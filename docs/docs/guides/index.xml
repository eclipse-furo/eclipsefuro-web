<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on フロー Furo Web</title>
    <link>https://web-components.furo.pro/docs/guides/</link>
    <description>Recent content in Guides on フロー Furo Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://web-components.furo.pro/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with data</title>
      <link>https://web-components.furo.pro/docs/guides/dealing-w-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://web-components.furo.pro/docs/guides/dealing-w-data/</guid>
      <description>Dealing with data #  Overview #   mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) flowchart LR I1(Input Component) -. data binding --- DO(Data Object); I2(Custom Component) -. data binding --- DO(Data Object); DO -- set data -- A(Entity Agent); A -- updates -- DO; A API[(Rest API)]; SB(Save Button) -- triggers -- A LB(Load Button) -- triggers -- A Data Object #  The furo-data-object translates raw JSON to objects which are usable for the UI components and vice versa.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://web-components.furo.pro/docs/guides/route/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://web-components.furo.pro/docs/guides/route/</guid>
      <description>Routing #  For applications which just have one view, routing is not needed. As soon you need multiple views, routing is needed.
Even in a small todo app you will quickly have more than one view (list, create, details,&amp;hellip;). Having the possibility to display only one of them at a time, is a nice feature.
 Routing is just the procedure to display a view based on some conditions. The most known condition for routing, is the path URL of your app.</description>
    </item>
    
    <item>
      <title>Extending a UI lib</title>
      <link>https://web-components.furo.pro/docs/guides/FNA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://web-components.furo.pro/docs/guides/FNA/</guid>
      <description>How to make your own UI components bindable #  There are several ways to make your component bindable.
Variant 1 DIY #  You can create a bind-data method by yourself and apply the listeners and watchers on the FieldNode or the RepeaterNode, depending on what your component will consume.
This can be quite complex, but will give you the greatest flexibility.
Take a look at the furo-ui5-button, which is a very small example to handle the binding by yourself.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://web-components.furo.pro/docs/guides/app-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://web-components.furo.pro/docs/guides/app-flow/</guid>
      <description>App flow #  For this kind of routing you need the following building blocks:
   component description     @furo/route/src/furo-app-flow-router app flow manager   @furo/route/src/furo-app-flow emits app flow events   @furo/config/src/furo-config-loader can load config files   flowConfig.json flow config definition file    1 2 3 4 5 6 7 8 9  &amp;lt;!-- main-app --&amp;gt; &amp;lt;furo-config-loader src=&amp;#34;custom/flowConfig.json&amp;#34; section=&amp;#34;flow&amp;#34; @-config-loaded=&amp;#34;--flowConfigLoaded&amp;#34;&amp;gt;&amp;lt;/furo-config-loader&amp;gt; &amp;lt;furo-app-flow-router ƒ-.</description>
    </item>
    
  </channel>
</rss>
