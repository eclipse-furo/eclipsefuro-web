'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/guides/dealing-w-data/','title':"Dealing with data",'section':"Guides",'content':"Dealing with data #  Overview #   mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) flowchart LR I1(Input Component) -. data binding --- DO(Data Object); I2(Custom Component) -. data binding --- DO(Data Object); DO -- set data -- A(Entity Agent); A -- updates -- DO; A API[(Rest API)]; SB(Save Button) -- triggers -- A LB(Load Button) -- triggers -- A Data Object #  The furo-data-object translates raw JSON to objects which are usable for the UI components and vice versa.\nflowchart LR I1(Input Component) -. data binding --- DO(Data Object); I2(Custom Component) -. data binding --- DO(Data Object); DO -- produces -- JSON JSON -- consumes -- DO 1 2 3 4 5 6 7 8 9  \u0026lt;furo-ui5-text-input ƒ-bind-data=\u0026#34;--taskDO(*.fields.display_name)\u0026#34;\u0026gt;\u0026lt;/furo-ui5-text-input\u0026gt; \u0026lt;furo-data-object type=\u0026#34;task.Task\u0026#34; ƒ-inject-raw=\u0026#34;--rawJsonData\u0026#34; @-object-ready=\u0026#34;--taskDO\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt;   Entity Agent #  The main task of the furo-entity-agent is to communicating with REST API\u0026rsquo;s.\nIt exposes a simple API for saving, loading, creating and deleting stuff on the server side.\nflowchart LR DO(Data Object) -- object -- A(Entity Agent); A -- json -- DO; A -- json -- API[(Rest API)]; API -- json -- A 1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;furo-data-object type=\u0026#34;task.Task\u0026#34; ƒ-inject-raw=\u0026#34;--rawJsonData\u0026#34; @-object-ready=\u0026#34;--taskDO\u0026#34;\u0026gt; \u0026lt;/furo-data-object\u0026gt; \u0026lt;furo-entity-agent service=\u0026#34;TaskService\u0026#34; ƒ-create=\u0026#34;--createClicked\u0026#34; ƒ-hts-in=\u0026#34;--hts\u0026#34; ƒ-bind-request-object=\u0026#34;--taskDO\u0026#34; @-response=\u0026#34;--rawJsonData\u0026#34;\u0026gt;\u0026lt;/furo-entity-agent\u0026gt;   Hateoas #  furo-deep-link builds static HATEOAS information based on query params and service-type.\nThe HATEOAS data is used by the furo-entity-agent to resolve the locations it has to send the requests to.\nflowchart LR DL(Deep Link) -- HATEOAS -- A(Entity Agent); QP[Query Params] -- json -- DL 1 2 3 4 5 6 7 8  \u0026lt;furo-deep-link ƒ-qp-in=\u0026#34;--pageURLChanged(*.query)\u0026#34; service=\u0026#34;TaskService\u0026#34; @-hts-out=\u0026#34;--hts\u0026#34;\u0026gt;\u0026lt;/furo-deep-link\u0026gt; \u0026lt;furo-location @-location-changed=\u0026#39;--pageURLChanged\u0026#39; \u0026gt;\u0026lt;/furo-location\u0026gt;   Assume we visit a link like my.app.com/display_task?tsk=5\nfuro-deep-link receives the query params {\u0026quot;tsk\u0026quot;: \u0026quot;5\u0026quot;} from furo-location.\nIt will then produce the HATEOAS links according to the specified service.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  [ { \u0026#34;rel\u0026#34;: \u0026#34;self\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;/api/v1/tasks/5\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;task.Task\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;TaskService\u0026#34; }, { \u0026#34;rel\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;/api/v1/tasks/5\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;DELETE\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;task.Task\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;TaskService\u0026#34; }, { \u0026#34;rel\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;/api/v1/tasks\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;task.Task\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;TaskService\u0026#34; } ]   "});index.add({'id':1,'href':'/docs/guides/routing/','title':"Routing",'section':"Guides",'content':"Routing #  For applications which just have one view, routing is not needed. As soon you need multiple views, routing is needed.\nEven in a small todo app you will quickly have more than one view (list, create, details,\u0026hellip;). Having the possibility to display only one of them at a time, is a nice feature.\n Routing is just the procedure to display a view based on some conditions. The most known condition for routing, is the path URL of your app. Another well known condition could also be a tab bar, this variant is mostly used to display different sub parts of a view/page.\n Trivial example #  Lets assume the following structure for a simple application:\ntodo-app ├── View List //app.com/ \u0026lt;view-list\u0026gt; ├── View Create //app.com/create \u0026lt;view-create\u0026gt; └── View Details //app.com/detail?tsk=999 \u0026lt;view-detail\u0026gt; Building blocks #  You need the following building blocks to implement the example:\n   component description     @furo/route/src/furo-location observes location and path   @furo/route/src/furo-pages can activate views based on the current location    Implementation #   Furo FBP syntax is used in this example.\n1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-location @-location-changed=\u0026#34;--pathChanged\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt; \u0026lt;furo-pages ƒ-inject-location=\u0026#34;--pathChanged\u0026#34; default=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;view-list name=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/view-list\u0026gt; \u0026lt;view-create name=\u0026#34;create\u0026#34;\u0026gt;\u0026lt;/view-create\u0026gt; \u0026lt;view-detail name=\u0026#34;detail\u0026#34;\u0026gt;\u0026lt;/view-detail\u0026gt; \u0026lt;/furo-pages\u0026gt;   Summary #  Let\u0026rsquo;s have a deeper look on the example from above.\n furo-location will emit a location-changed event, as soon something in the url of the page changes. The emitted location object will be passed to the inject-location method of the furo-pages component, which will then activate the component which have name attribute set to \u0026ldquo;detail\u0026rdquo;.  flowbased auto wires triggered from furo-pages #  furo-pages provides a set of auto wires, which are automatically triggered in the child elements if they support FBP. Each wire will forward a locationObject\n --pageActivated : Is triggered when the element is activated. --pageDeActivated : Is triggered when another page is activated. Empty wire. --pageQueryChanged : Is triggered when the page query changes. --pageHashChanged : Is triggered when the page hash changes. --pageReActivated : Is triggered when the locatioin contains the same page which already was activated.  locationObject #  1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;host\u0026#34;: \u0026#34;localhost:8480\u0026#34;, \u0026#34;query\u0026#34;: {\u0026#34;tsk\u0026#34;: 999}, \u0026#34;hash\u0026#34;: {}, \u0026#34;path\u0026#34;: \u0026#34;/detail\u0026#34;, \u0026#34;pathSegments\u0026#34;: [ \u0026#34;detail\u0026#34; ], \u0026#34;hashstring\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;querystring\u0026#34;: \u0026#34;tsk=999\u0026#34; }   "});index.add({'id':2,'href':'/docs/guides/routing/subrouting/','title':"Sub routing",'section':"Routing",'content':"Sub Routing #  For applications which just have one view, routing is not needed. As soon you need multiple views, routing is needed.\nEven in a small todo app you will quickly have more than one view (list, create, details,\u0026hellip;). Having the possibility to display only one of them at a time, is a nice feature.\n Routing is just the procedure to display a view based on some conditions. The most known condition for routing, is the path URL of your app. Another well known condition could also be a tab bar, this variant is mostly used to display different sub parts of a view/page.\n Example #  Lets assume the following structure for a simple application:\ntodo-app ├── View List //app.com/ \u0026lt;view-list\u0026gt; ├── View Create //app.com/create \u0026lt;view-create\u0026gt; └── View Details //app.com/detail?tsk=999 \u0026lt;view-detail\u0026gt; ├── Tab what //app.com/detail/what?tsk=999 ├── Tab when //app.com/detail/when?tsk=999 └── Tab who //app.com/detail/who?tsk=999 Building blocks #  You need the following building blocks to implement the example:\n   component description     @furo/route/src/furo-location observes location and path   @furo/route/src/furo-pages can activate views based on the current location    Implementation #  app-shell\n1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-location @-location-changed=\u0026#34;--pathChanged\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt; \u0026lt;furo-pages ƒ-inject-location=\u0026#34;--pathChanged\u0026#34; default=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;view-list name=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/view-list\u0026gt; \u0026lt;view-create name=\u0026#34;create\u0026#34;\u0026gt;\u0026lt;/view-create\u0026gt; \u0026lt;view-detail name=\u0026#34;detail\u0026#34;\u0026gt;\u0026lt;/view-detail\u0026gt; \u0026lt;/furo-pages\u0026gt;   view-detail\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;h1\u0026gt;Title\u0026lt;/h1\u0026gt; \u0026lt;furo-pages ƒ-inject-location=\u0026#34;--pathChanged\u0026#34; default=\u0026#34;when\u0026#34;\u0026gt; \u0026lt;panel-detail-what name=\u0026#34;what\u0026#34;\u0026gt;\u0026lt;/panel-detail-what\u0026gt; \u0026lt;panel-detail-when name=\u0026#34;when\u0026#34;\u0026gt;\u0026lt;/panel-detail-when\u0026gt; \u0026lt;panel-detail-who name=\u0026#34;who\u0026#34;\u0026gt;\u0026lt;/panel-detail-who\u0026gt; \u0026lt;/furo-pages\u0026gt; \u0026lt;furo-location url-space-regex=\u0026#34;^/detail\u0026#34; @-location-changed=\u0026#34;--pathChanged\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt;   Summary #  The furo-location component in view-detail will only listen to URLs that begins with \u0026ldquo;/details\u0026rdquo; because the attribute url-space-regex=\u0026quot;^/detail\u0026quot; is set.\n"});index.add({'id':3,'href':'/docs/guides/','title':"Guides",'section':"Docs",'content':"Getting started #  If you need a detailed getting started guide and examples, visit this guide.\nInitializing process #  To be able to use the components from furo-data, you have to set up the environment and register the types and services.\nMinimal Environment #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // -- initialize application env, api  import {Init, Env} from \u0026#34;@furo/framework/src/furo.js\u0026#34; // The services and types must be registered in the Env: import {Services, Types} from \u0026#34;data-environment.js\u0026#34;; // this is the file which was generated by `furo genEsModule`.  /** * register the available types and services * This is needed if you want to work with @furo/data/* and components with bind-data support. */ Init.registerApiServices(Services); Init.registerApiTypes(Types); /** * [Optional] * Register the API prefix based on the APPROOT. * This information is used for furo-deep-link and furo-reverse-deep-link to resolve the api address. */ Env.api.prefix = `/api`; // apply the prefix Init.applyCustomApiPrefixToServicesAndTypes(Env.api.prefix);   example of an init file\n"});index.add({'id':4,'href':'/docs/guides/app-flow/','title':"Application Flow",'section':"Guides",'content':"Application flow / Event driven routing #  For this kind of routing you need the following building blocks:\n   component description     @furo/route/src/furo-app-flow-router app flow manager   @furo/route/src/furo-app-flow emits app flow events   @furo/config/src/furo-config-loader can load config files   flowConfig.json flow config definition file    1 2 3 4 5 6 7 8 9  \u0026lt;!-- main-app --\u0026gt; \u0026lt;furo-config-loader src=\u0026#34;custom/flowConfig.json\u0026#34; section=\u0026#34;flow\u0026#34; @-config-loaded=\u0026#34;--flowConfigLoaded\u0026#34;\u0026gt;\u0026lt;/furo-config-loader\u0026gt; \u0026lt;furo-app-flow-router ƒ-.config=\u0026#34;--flowConfigLoaded\u0026#34; ƒ-trigger=\u0026#34;--flowEvent\u0026#34;\u0026gt;\u0026lt;/furo-app-flow-router\u0026gt; \u0026lt;!-- somewhere inside e.g. view, page --\u0026gt; \u0026lt;furo-app-flow ƒ-emit=\u0026#34;--actionWire\u0026#34; event=\u0026#34;actionSaved\u0026#34;\u0026gt;\u0026lt;/furo-app-flow\u0026gt;    flowConfig configuration #  /** *Configuration Array * * | current | flow-event-name | target | [mapping] | noHistory | * |:----------|:---------------------|:------------|:-------------------|:-------------------| * | view-main | form-complete | detail-view | element =\u0026gt; aufgabe | flag | * | * | menu-settings-click | settings | | | * * * * [['view-main', 'button-tap', 'detail-view', 'task =\u0026gt; id]] * if current is set to view-main and the app-flow-event with name 'button-tap' * is triggered, current is set to detail-view and data.task from app-flow is mapped to data.id. * * Special configurations: * * if target is set to HISTORY-BACK the app-flow-event will * allways set the current to the lastCurrent * * [['view-detail', 'button-tap', 'HISTORY-BACK', 'task =\u0026gt; id]] will route you back to view-main * * You can set a wildcard for \u0026quot;current\u0026quot;. If you check the example: menu-settings-click can be triggered * from any current. If there is a \u0026quot;current\u0026quot; with menu-settings-click configured and you are * there, the wildcard is not used. * * Set noHistory if there \u0026quot;current\u0026quot; view should not be listed under _lastCurrents. * This is used to exclude pages from the back navigation. */  Example file #  1 2 3 4  [ [\u0026#34;*\u0026#34;, \u0026#34;unauthorized\u0026#34;, \u0026#34;auth\u0026#34;], [\u0026#34;overview\u0026#34;, \u0026#34;actionSaved\u0026#34;, \u0026#34;detailview\u0026#34;] ]   "});index.add({'id':5,'href':'/docs/guides/FNA/','title':"Extending a UI lib",'section':"Guides",'content':"How to make your own UI components bindable #  There are several ways to make your component bindable.\nVariant 1 DIY #  You can create a bind-data method by yourself and apply the listeners and watchers on the FieldNode or the RepeaterNode, depending on what your component will consume.\nThis can be quite complex, but will give you the greatest flexibility.\nTake a look at the furo-ui5-bool-icon, which is a very small example to handle the binding by yourself.\nVariant 2: Use the FieldNodeAdapter #  The easiest and most convenient way to make your component bindable is to extend the component with the FieldNodeAdapter. It will give you some callback methods to overwrite and does the heavy lifting for you.\nTake a look at the furo-ui5-text-input , which is a full-fledged example which uses nearly everything from the FNA.\nMinimal example #  The smallest variant to achieve a usable binding will need the method _setFnaFieldValue and the callback onFnaFieldValueChanged.\nonFnaFieldValueChanged({JSON}) Will give you the value as JSON literal, you do not need to handle the FieldNode attributes.\nsetFnaFieldValue({JSON}) Let you update the FieldNode by simply passing in a JSON literal.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { FieldNodeAdapter } from \u0026#39;@furo/data/src/lib/FieldNodeAdapter.js\u0026#39;; export class SampleInput extends FBP(FieldNodeAdapter(LitElement)) { constructor() { super() this.addEventListener(\u0026#34;change\u0026#34;, (e) =\u0026gt; { // update the FieldNode  this.setFnaFieldValue(e.data); }) } // receive updates from FieldNode  onFnaFieldValueChanged(val) { this.value = val } }   Methods, Attrs and Callbacks #  There are some more attributes, methods and callbacks that you receive from the FieldNodeAdapter.\nvar __fieldNode #  This is a reference for the adapter and contains the FieldNode.\nMethod getDataType() #  Returns the type name of the bounded fieldNode\n@return string Typename\nMethod isFat() #  Check if bounded type is a fat type\n@return boolean\nMethod isWrapper() #  Check if bounded type is a wrapper type\n@return boolean\nMethod bindData(fieldNode) #  Binds a fieldNode. Make sure the type of your field is accepted by the implemented component.\n@param fieldNode {FieldNode|RepeaterNode} - FieldNode or RepeaterNode\nMethod setFnaFieldValue(value) #  Sets the value on the fieldNode. When you set the value, the changes you made will not trigger the onFnaFieldValueChanged of the current component (no loop backs).\n@param value {JSON} - the raw json value for the fieldNode.\ncallback onFnaFieldValueChanged(value) #  Notifies a field value change event. This event is debounced with 1ms, if you have bound a complex type, only one change event will be triggered (this is what you want). If you need all change events or more control for your component, use the listener on the fieldNode itself.\n@param value - the raw json value for the fieldNode.\ncallback onFnaConstraintsChanged(constraints) #  Notifies changes on the constraints.\nreturns an object like:\n1 2 3 4 5 6  { \u0026#34;min\u0026#34;: { is: 33, message: \u0026#34;must be bigger\u0026#34; } }   1 2 3 4 5 6 7 8 9 10  // example callback onFnaConstraintsChanged(constraints) { if (constraints.min !== undefined) { this._constraintsFromFNA.min = constraints.min; if (this._privilegedAttributes.min === null \u0026amp;\u0026amp; this._attributesFromFAT.min === undefined) { this.min = constraints.min.is; } } }   callback onFnaOptionsChanged(options) #  Notifies when the options for the field is changed or set.\n@param options Object - options object\nonFnaReadonlyChanged(readonly) #  Notifies when the readonly flag for the field is changed or set.\n@param readonly bool - readonly state\ncallback onFnaHintChanged(hint) #  Notifies when the hint for the field is changed or set.\n@param hint - text for the hint\ncallback onFnaLabelChanged(label) #  Notifies when the label for the field is changed or set.\n@param label string - text for the label\nonFnaPlaceholderChanged(placeholder) #  Notifies when the placeholder for the field is changed or set.\n@param placeholder string - text for the placeholder\ncallback onFnaFieldNodeBecameInvalid(validity) #  Notifies that a field gets invalid.\n@param validity - Object like {constraint: \u0026ldquo;min\u0026rdquo;, description: \u0026ldquo;too small\u0026rdquo;, field: \u0026ldquo;\u0026quot;}\ncallback onFnaFieldNodeBecameValid() #  Notifies that a field gets valid.\ncallback onFnaFieldNewDataInjected() #  Notifies that new data was injected.\ncallback onFnaRepeatedFieldChanged() #  Notifies when a repeater node changes. This means, a element was added or removed to the repeater node.\nThis will not notify you about values inside the repeater node.\n"});index.add({'id':6,'href':'/docs/guides/type-renderer/','title':"Type Renderer",'section':"Guides",'content':"Dynamic type-dependent rendering #  The furo-type-renderer is used to display type specific data. It uses display as default context and will warn you on the console if the requested context-[type-name] does not exist or was not imported.\nThere is a standard set of type-renderers for rendering the most common types.\nThe standard ui5 set can be integrated with the import\n import \u0026lsquo;@furo/ui5/src/standard-type-renderers/display-registry.js\u0026rsquo;.  If you want to implement an individual display of a type, you need your own context-[type-name] component and import it.\nComponent Naming Convention #  Type: google.type.TimeOfDay\ndisplay-google-type-timeofday ------- --------------------- | | context type-name use the generic path #  1 2 3  \u0026lt;furo-type-renderer ƒ-bind-data=\u0026#34;--dao(*.data.any_type_of_field)\u0026#34;\u0026gt; \u0026lt;/furo-type-renderer\u0026gt;   or use the specific component #  1 2 3  \u0026lt;display-google-type-timeofday ƒ-bind-data=\u0026#34;--dao(*.data.timeofday_field)\u0026#34;\u0026gt; \u0026lt;/display-google-type-timeofday\u0026gt;   DOM Sample #  1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!-- use the furo-type-renderer in the html markup --\u0026gt; \u0026lt;furo-type-renderer content=\u0026#34;\u0026#34; ƒ-bind-data=\u0026#34;--data\u0026#34; context=\u0026#34;display\u0026#34; value-state=\u0026#34;Positive\u0026#34; data-size=\u0026#34;size-s\u0026#34;\u0026gt;\u0026lt;/furo-type-renderer\u0026gt; \u0026lt;!-- it creates the type specific component in the DOM. Context and all attributes are applied--\u0026gt; \u0026lt;display-country-factsheet content=\u0026#34;\u0026#34; context=\u0026#34;display\u0026#34; value-state=\u0026#34;Positive\u0026#34; data-size=\u0026#34;size-s\u0026#34;\u0026gt;\u0026lt;/display-country-factsheet\u0026gt;   "});index.add({'id':7,'href':'/docs/guides/featuretoggle/','title':"Feature Toggles",'section':"Guides",'content':"Feature Toggles #  Use FuroFeatureToggle to implement toggles for the following scenarios: 1\n release toggles - in the context of Continuous Delivery, unfinished features are toggled off, and only activated when the feature is ready. However, the source code is transferred to the master branch earlier and deployed to the various stages. experiment toggles - the classic, for example for A/B tests ops toggles - this refers to switches under operational aspects. For example, when new features are rolled out and the performance behavior of the application is still unclear, the feature can simply be turned off if problems occur during operation. As far as everything runs stable, the switches are removed. permission toggles - certain features are made available only to premium or paying customers, or to users with extended privileges.  Do not use toggles feature for:\n Enabling or hiding buttons, based on a HATEOAS response. Use furo-hateoas-state for that.  Initialization #  If you want to init your keys, register them with registerKeyMap. This method can be called at any time, because a uninitialized key defaults to the false state.\n1 2 3 4 5 6 7  import { FuroFeatureToggle } from \u0026#39;@furo/framework/src/FuroFeatureToggler/FuroFeatureToggle.js\u0026#39;; FuroFeatureToggle.registerKeyMap({ \u0026#34;feature.a\u0026#34;:true, \u0026#34;feature.b\u0026#34;:true, \u0026#34;feature.c\u0026#34;:false, });   init.js\nSupported toggles for Web Components or HTML #  The lib supports the following cases, for direct usage in your html:\ndata-furo-toggle-append #  Appends the element on true state of the key and removes the element from the dom on false state. This will also happen if you change the state of the toggle, at a later time.\n For this, you have to write the tag in the HTML, to avoid flickering, you can import the needed component with a toggle callback.\n data-furo-toggle-remove #  This behaves like the append toggle, but the difference is, that it removes the element on true state of the key and will append the element on a false state\ndata-furo-toggle-hide #  Will add a hidden=\u0026quot;\u0026quot; attribute to the element on true state of the key and removes the attribute on a false state.\ndata-furo-toggle-show #  Is the counter component for hide. It removes a hidden attribute from the element on true state of the key and adds the attribute on a false state\ndata-furo-toggle-disable #  Will add a disabled=\u0026quot;\u0026quot; attribute to the element on true state of the key and removes the attribute on a false state.\ndata-furo-toggle-enable #  Is the counter component for disable. It removes a disabled attribute from the element on true state of the key and adds the disabled attribute on a false state\nHelpers and Utils #  At the moment, there is only the furo-feature-toggle component available. Feel free to file an issue with a feature request, if you miss something.\n   Wikipedia (de), Wikipedia (en) \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':8,'href':'/docs/modules/furo-fbp/empty-fbp-node/','title':"empty-fbp-node",'section':"@furo/fbp",'content':"empty-fbp-node #  @furo/fbp v6.3.2 import '@furo/fbp/src/empty-fbp-node.js'; exports \u0026lt;empty-fbp-node\u0026gt; custom-element-definition superclass HTMLElement mixes FBP summary **\nAttributes and Properties #  Methods #  "});index.add({'id':9,'href':'/docs/modules/furo-fbp/flow-bind/','title':"flow-bind",'section':"@furo/fbp",'content':"flow-bind #  @furo/fbp v6.3.2 import '@furo/fbp/src/flow-bind.js'; exports \u0026lt;flow-bind\u0026gt; custom-element-definition superclass HTMLElement mixes FBP summary Custom element to allow using furo-fbp's template features in a html document.\nflow-bind\nCustom element to allow using furo-fbp\u0026rsquo;s template features in a html document. It comes very handy, when you want write tests or make some demos.\n1 2 3 4 5 6 7 8 9 10  \u0026lt;test-fixture id=\u0026#34;basic\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;flow-bind id=\u0026#34;elem\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;sender\u0026#34; @-click=\u0026#34;--data-received\u0026#34;\u0026gt;sender\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;receiver\u0026#34; ƒ-render=\u0026#34;--data-received\u0026#34;\u0026gt;receiver\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/flow-bind\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/test-fixture\u0026gt;   Attributes and Properties #  Methods #  "});index.add({'id':10,'href':'/docs/modules/furo-fbp/flow-repeat/','title':"flow-repeat",'section':"@furo/fbp",'content':"flow-repeat #  @furo/fbp v6.3.2 import '@furo/fbp/src/flow-repeat.js'; exports FlowRepeat js exports \u0026lt;flow-repeat\u0026gt; custom-element-definition superclass HTMLElement mixes FBP summary Custom element to allow using FBPs template features in repeated template\nflow-repeat\nCustom element to repeat Arrays. The repeated items are injected before the flow-repeat element. If you need the repeated items inside of an other dom node, use setInsertRef\n1 2 3 4 5  \u0026lt;flow-repeat ƒ-inject-items=\u0026#34;--dataArray\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;repeated-item index=\u0026#34;${this.index}\u0026#34; ƒ-inject=\u0026#34;--init\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/flow-repeat\u0026gt;    Note: if you want to bind a repeater node, use furo-data-flow-repeat.\n Available wires in the template: #   Note: Each repeated item has its own closed scope. You can not use the wires outside of the template. Use events to interact with components outside of the template.\n  --init : contains the repeated item, fired only once on creation of the repeated node --item : contains the repeated item, fired on every inject --firstItem : contains the repeated item, fired on the first element. --lastItem : contains the repeated item, fired on the last element. --index : contains a number with the index of the element. --host : contains a reference to the host component. --trigger : contains what was passed in to the triggering method. --triggerFirst : contains what was passed in to the triggering method. --triggerLast : contains what was passed in to the triggering method. --itemSelected : contains nothing, is triggered with select(index). --itemDeSelected : contains nothing, is triggered when another item is selected with select(index).  Available attributes #  index contains the current index of the item. Use this to fire a event with an index like @-click=\u0026quot;^^item-clicked(index)\u0026quot; item contains the current index of the item. Use this to fire a event with the repeated item like @-click=\u0026quot;^^item-selected(item)\u0026quot;\nAttributes and Properties #  Events #  last-element-selected #  at-last-element-selected → index of the element\nFired when the last element is selected. Use this to trigger a load next. items-in-dom #  at-items-in-dom → Number\nFired when items are attached to the dom, with Number of items. Methods #  clear #  clear() ⟹ void\n* → fn-clear\nClear the list\n\nselect #  select(index int ) ⟹ void\nint  → fn-select\nTriggers the wire --itemSelected on selected item and --itemDeSelected on last selected Item.\n index Index of item to select   selectIdentity #  selectIdentity(identifier * ) ⟹ void\n*  → fn-select-identity\nSelect item by its identity.\nUsing this method only works when you have set the identity-path.\n identifier Identity from identity-path   selectNextIndex #  selectNextIndex() ⟹ void\n* → fn-select-next-index\nSelects next index. If none was selected, the first index will be selected.\nIf you reached the last index, the first index will be selected.\nIf you reach the last element, last-element-selected will fire.\nTriggers the wire --itemSelected on selected item and --itemDeSelected on last selected Item\n\nselectPreviousIndex #  selectPreviousIndex() ⟹ void\n* → fn-select-previous-index\nSelects the previous index.\nIf you are on the first item, the last will be selected.\nTriggers the wire --itemSelected on selected item and --itemDeSelected on last selected Item\n\ntriggerSelected #  triggerSelected(data * ) ⟹ void\n*  → fn-trigger-selected\nTriggers the currently selected item.\nTriggers the wire --trigger on the every item.\nTriggers the wire --triggerIndex on the every item.\n data Data to forward.   triggerAll #  triggerAll(data * ) ⟹ void\n*  → fn-trigger-all\nTriggers all nodes.\nTriggers the wire --trigger on the every item.\nTriggers the wire --triggerIndex on the every item.\n data data to forward   deselect #  deselect() ⟹ void\n* → fn-deselect\nTriggers the wire --itemDeSelected on the last selected item\n\nsetInsertRef #  setInsertRef(ref DomNode ) ⟹ void\nDomNode  → fn-set-insert-ref\nSet a reference to append the repeated elements in to the ref instead of appending them before the repeater itself.\n ref Node to append the repeated items.   deselectAll #  deselectAll() ⟹ void\n* → fn-deselect-all\nTriggers the wire --itemDeSelected on all items\n\ninjectItems #  injectItems(items Array ) ⟹ void\nArray  → fn-inject-items\nInject items to repeat.\n items Items to repeat   triggerFirst #  triggerFirst(data * ) ⟹ void\n*  → fn-trigger-first\nTriggers the wire --trigger on the first item.\nTriggers the wire \u0026ndash;triggerFirst on the first item.\n data data to forward to the item.   triggerLast #  triggerLast(data * ) ⟹ void\n*  → fn-trigger-last\nTriggers the wire --trigger on the last item.\nTriggers the wire \u0026ndash;triggerLast on the last item.\n data data to forward to the item.   triggerIndex #  triggerIndex(i int data * ) ⟹ void\nint *  → fn-trigger-index\nTriggers the wire --trigger on the item.\nTriggers the wire --triggerIndex on the item.\n i index of item that you want to trigger. data data to forward to the item.   "});index.add({'id':11,'href':'/docs/modules/furo-data/furo-api-fetch/','title':"furo-api-fetch",'section':"@furo/data",'content':"furo-api-fetch #  @furo/data v2.3.0 import '@furo/data/src/furo-api-fetch.js'; exports \u0026lt;furo-api-fetch\u0026gt; custom-element-definition superclass HTMLElement summary fetch data from network\nUse furo-api-fetch to fetch data from the network.\n1  \u0026lt;furo-api-fetch fn-invoke-request=\u0026#34;--Request\u0026#34;\u0026gt;\u0026lt;/furo-api-fetch\u0026gt;   Attributes and Properties #  lastRequest #  default: {}\nLastRequest\u0026rsquo;s response.\nNote that lastResponse is set when ongoing request finishes, so if loading is true, then lastResponse will correspond to the result of the previous request. isLoading #  default: false\nTrue while request is in flight. Events #  fatal-error #  at-fatal-error → Request\nRequests are made via the Fetch API if possible.Fallback XMLHttpRequest request-started #  at-request-started → Request\nFired when a request is sent. request-aborted #  at-request-aborted → Request\nFired when a request was canceled. response-raw #  at-response-raw → Object\nFired when a response is received. response #  at-response → Object\nFired when a response is received. Here you will get the parsed response Format depends on request header content-type supported types: - text/plain - application/json - image/jpeg (Blob) - application/octet-stream (ArrayBuffer) - application/pdf (Blob) parse-error #  at-parse-error → CustomEvent\n\nresponse-error-raw #  at-response-error-raw → Object\nFired when a error has occoured. response-error #  at-response-error → Object\nFired when an error has occoured. This is a general error event. The specific error events are fired additionally. **** #  at- → CustomEvent\n\nresponse-error-[status-code] #  at-response-error-[status-code] → Object\nFired when an error has occoured. This is a specific error event. response-error-4xx #  at-response-error-4xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-5xx #  at-response-error-5xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx Methods #  invokeRequest #  invokeRequest(request Request ) ⟹ void\nRequest  → fn-invoke-request\nSends a HTTP request to the server\n request (The Request interface of the Fetch API represents a resource request.) https://developer.mozilla.org/en-US/docs/Web/API/Request   abortRequest #  abortRequest(controller AbortController ) ⟹ void\nAbortController  → fn-abort-request\nAborts a pending request You have to submit an AbortController\n controller (The AbortController interface represents a controller object that allows you to abort one or more DOM requests as and when desired.) https://developer.mozilla.org/en-US/docs/Web/API/AbortController   "});index.add({'id':12,'href':'/docs/modules/furo-route/furo-app-flow/','title':"furo-app-flow",'section':"@furo/route",'content':"furo-app-flow #  @furo/route v2.1.1 import '@furo/route/src/furo-app-flow.js'; exports \u0026lt;furo-app-flow\u0026gt; custom-element-definition superclass LitElement summary Application Flow =\u0026gt; routing\nfuro-app-flow triggers the flow events for the app-flow-router.\nAttributes and Properties #  qp #   Deprecated, use the setQp method instead display #  default: 'none'\n\nevent #  event String \nName of your app-flow event object\ni.e. \u0026lsquo;task-clicked\u0026rsquo;, \u0026lsquo;wizard-step1-completed\u0026rsquo;,\u0026hellip; Events #  app-flow #  at-app-flow → data\nApp-flow event with app-flow object will be fired when you trigger the emit function. Methods #  setQp #  setQp(qp Object ) ⟹ void\nObject  → fn-set-qp\nUse this to explicitly set the query params.\nThis is useful if you use the trigger method.\n qp Object with key value pairs   trigger #  trigger() ⟹ void\n* → fn-trigger\nTriggers the flow event (with the qp that was set before)\n\nemit #  emit(queryParams `` QueryParam object|QueryParams ) ⟹ void\n`` object|QueryParams  → fn-emit\nfire the app-flow event\n queryParams  QueryParam Object   "});index.add({'id':13,'href':'/docs/modules/furo-route/furo-app-flow-router/','title':"furo-app-flow-router",'section':"@furo/route",'content':"furo-app-flow-router #  @furo/route v2.1.1 import '@furo/route/src/furo-app-flow-router.js'; exports \u0026lt;furo-app-flow-router\u0026gt; custom-element-definition superclass LitElement mixes FBP summary Application Flow =\u0026gt; routing\nfuro-app-flow-router\nUse this component with app-flow and furo-pages to implement your application flow / routing\n1  \u0026lt;app-flow-router set-config=\u0026#34;--flowConfigLoaded\u0026#34; fn-trigger=\u0026#34;--flowEvent\u0026#34; fn-back=\u0026#34;--wire\u0026#34; fn-forward=\u0026#34;--wire\u0026#34;\u0026gt;\u0026lt;/app-flow-router\u0026gt;   *Configuration Array\n   current flow-event-name target [mapping]     view-main form-complete detail-view from =\u0026gt; to   * menu-settings-click settings    * all-fields-req all-qps *   * some-fields-req some-qps a=\u0026gt;b,x=\u0026gt;id,c=\u0026gt;item    1 2 3 4 5 6 7  [ [\u0026#39;view-main\u0026#39;, \u0026#39;button-tap\u0026#39;, \u0026#39;detail-view\u0026#39;, \u0026#39;task =\u0026gt; id], [\u0026#34;*\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;EXTERNAL_LINK: https://google.com/\u0026#34;], [\u0026#34;*\u0026#34;, \u0026#34;searchInNewWindow\u0026#34;, \u0026#34;EXTERNAL_LINK_BLANK: https://google.com/\u0026#34;] [\u0026#34;*\u0026#34;, \u0026#34;searchInNewWindow\u0026#34;, \u0026#34;EXTERNAL_LINK_BLANK:\u0026#34;, *], [\u0026#34;*\u0026#34;, \u0026#34;activity-url\u0026#34;, \u0026#34;URL\u0026#34;, \u0026#34;*\u0026#34;], ]   if the current view is view-main and the flow-event-name is \u0026lsquo;form-complete\u0026rsquo;, the view switches to detail-view and data.from is mapped to \u0026ldquo;to\u0026rdquo;.\nSpecial configurations: #    Set a \u0026ldquo;*\u0026rdquo; to map all data 1:1 to the url.\n  You can set a wildcard for \u0026ldquo;current\u0026rdquo;. If you check the example: menu-settings-click can be triggered from any current. If there is a \u0026ldquo;current\u0026rdquo; with menu-settings-click configured and you are there, the wildcard is not used.\n  if you want to link to a dynamic target outside your app add URL and use fn-emit on the furo-app-flow component with the url as data.\n  if you want to link to a target outside your app add EXTERNAL_LINK: followed by the link\n  if you want to close a page which was openend by a _blank click use the keyword WINDOW-CLOSE\n  if you want to trigger a history.back() use the HISTORY-BACK\n  if there is no history.back() possible use the flow event! HISTORY-BACK and define the target as usual\n  Attributes and Properties #  config #  config Array \nThe Configuration Array display #  default: 'none'\n\nurlSpaceRegex #  url-space-regex string|RegExp default: ''\ndefault value of urlSpaceRegex. this value can be rewritten via url-space-regex attribute Events #  __beforeReplaceState #  at-__beforeReplaceState → void\nFired when before the state will be updated. view-changed #  at-view-changed → flowEvent\nFired when page was changed. event-not-found #  at-event-not-found → flowEvent\nFired when view was not found. Methods #  back #  back() ⟹ void\n* → fn-back\ntrigger a history back\n\nforward #  forward() ⟹ void\n* → fn-forward\ntrigger a history forward\n\nsetConfig #  setConfig(config `` ) ⟹ void\n``  → fn-set-config\nSet the config\n config    trigger #  trigger(flowEvent `` ) ⟹ boolean\n``  → fn-trigger\nTrigger the router\n flowEvent    "});index.add({'id':14,'href':'/docs/modules/furo-layout/furo-backdrop/','title':"furo-backdrop",'section':"@furo/layout",'content':"furo-backdrop #  @furo/layout v2.0.7 import '@furo/layout/src/furo-backdrop.js'; exports \u0026lt;furo-backdrop\u0026gt; custom-element-definition superclass LitElement mixes FBP summary show content with backdrop\nfuro-backdrop\nDisplays content with a backdrop.\nThe element you place in to furo-backdrop will be displayed centered.\n1 2 3 4 5 6  \u0026lt;furo-backdrop at-opened=\u0026#34;--BackdropFocus\u0026#34; at-closed=\u0026#34;--backdropClosed\u0026#34; fn-show=\u0026#34;--expandIconClicked\u0026#34; fn-close=\u0026#34;--closeRequested, --recordSelected\u0026#34;\u0026gt; \u0026lt;any-component at-item-selected=\u0026#34;--recordSelected\u0026#34; style=\u0026#34;width: 90vw; height: 90vh\u0026#34;\u0026gt;\u0026lt;/any-component\u0026gt; \u0026lt;/furo-backdrop\u0026gt;   You can wire and use the elements in furo-backrop as if they were local elements.\nDo not forget to add the furo-backdrop-display somewhere in the parent dom.\nAttributes and Properties #  Events #  opened #  at-opened → handle: this\nThe opened event will be fired when the content is visible on the backdrop. Tipp: you can use this to focus something on the shown content. closed #  at-closed → handle: this\nThe closed event will be fired when the displayed content is invisible and the backdrop is closed. Tipp: Maybe you want to use this event to refocus the initiator. register-backdrop #  at-register-backdrop → handle: this\nInternal event to move the contents to the backdrop-display. Methods #  show #  show() ⟹ void\n* → fn-show\nInitiates the backdrop and shows the content on top of the backdrop area.\n\nclose #  close() ⟹ void\n* → fn-close\nHides the display.\nNote: The display will also get closed when the user clicks on the backdrop.\n\n"});index.add({'id':15,'href':'/docs/modules/furo-layout/furo-backdrop-display/','title':"furo-backdrop-display",'section':"@furo/layout",'content':"furo-backdrop-display #  @furo/layout v2.0.7 import '@furo/layout/src/furo-backdrop-display.js'; exports \u0026lt;furo-backdrop-display\u0026gt; custom-element-definition superclass LitElement mixes FBP summary Display component for furo-backdrop\nfuro-backdrop-display\nThis components receives and displays the backdrop requests from furo-backdrop components.\nThe backdrop display can be placed anywhere in the dom. The higher the better.\nTipp: place it below or inside the component which applies the style vars. Othewise the displayed components do not know these vars.\n1 2  \u0026lt;!-- place the display in your main-stage --\u0026gt; \u0026lt;furo-backdrop-display\u0026gt;\u0026lt;/furo-backdrop-display\u0026gt;   Attributes and Properties #  toDuration #  to-duration number default: 100\ntimeout duration Methods #  close #  close() ⟹ void\n* → fn-close\ncloses the backdrop. You can close the backdrop on the display element, this is useful when you want to close the backdrops on page changes.\nUsualy the component which triggers the backdrop or is displayed closes it.\n\nStyling #  The following custom properties available for styling:\n   Custom property Description     --furo-backdrop-color background color of backdrop  default: #6d6d6d fallback: 0px    "});index.add({'id':16,'href':'/docs/modules/furo-data/furo-collection-agent/','title':"furo-collection-agent",'section':"@furo/data",'content':"furo-collection-agent #  @furo/data v2.3.0 import '@furo/data/src/furo-collection-agent.js'; exports \u0026lt;furo-collection-agent\u0026gt; custom-element-definition superclass LitElement mixes FBP summary interface component to handle collection requests\nfuro-collection-agent is an interface component to handle collection requests.\n1 2 3 4 5 6 7 8  \u0026lt;furo-collection-agent service=\u0026#34;Servicename\u0026#34; fn-hts-in=\u0026#34;--hts\u0026#34;\u0026gt;\u0026lt;/furo-collection-agent\u0026gt; \u0026lt;!-- produces a hateoas link array --\u0026gt; \u0026lt;furo-deep-link service=\u0026#34;Servicename\u0026#34; at-hts-out=\u0026#34;--hts\u0026#34;\u0026gt;\u0026lt;/furo-deep-link\u0026gt;   before you can do any requests, the service and the HATEOAS must be defined\nAttributes and Properties #  view #  view String \nParameter for contextual representations\nTo reduce network traffic, it is sometimes useful to allow the client to limit which parts of the resource the server should return in its responses, returning a view of the resource (i.e. specialized version for dropdowns ) instead of the full resource representation.\nhttps://cloud.google.com/apis/design/design_patterns#resource_view\nview=smallcards\nOnly useable if your service has implemented this feature. filter #  filter String \nSet the filter.\nHint: use the FieldNode._base64 property to send complex objects as a filter and decode it on the server side.\nOnly useable if your service has implemented this feature. service #  service String \nThe service name from the specs. pageSize #  page-size Number \nSets pagination size in the List request.\nOnly useful if your service supports pagination. fields #  fields String \nComma separated list of fields (like a fieldmask) used for partial representation / partial responses.\nIf your services supports this feature, you will receive a subset of the fields. orderBy #  order-by String \nSorting order\norder-by=\u0026ldquo;foo,-bar\u0026rdquo; means foo asc and bar desc\nhttps://cloud.google.com/apis/design/design_patterns#sorting_order\nTo avoid sql injection errors we do not send any sql like syntax!\nOnly useable if your service has implemented this feature. listOnHtsIn #  list-on-hts-in Boolean \nExecutes a list when a rel=\u0026ldquo;list\u0026rdquo; is injected. loadRelOnHtsIn #  load-rel-on-hts-in Boolean \nExecutes a loadRel when a rel=\u0026ldquo;XXXX\u0026rdquo; is injected.\nYou have to set the attributes rel and method to have this working.\nThis is useful for getting \u0026ldquo;custom\u0026rdquo; collections. rel #  rel String \nrel which should be used on load rel method #  method String \nfor compatibility reasons you have to specify the method inside of the service.\nThis attribute should not be needed in future versions, because the rel already contains all relevant information. Events #  request-aborted #  at-request-aborted → Request\nFired if the request was successfully cancelled request-started #  at-request-started → Request\nFired when a request is sent. response-raw #  at-response-raw → Object\nFired when a response is received. response-error #  at-response-error → Object\nFired when an error has occoured. This is a general error event. The specific error events are fired additionally. response-error-[status-code] #  at-response-error-[status-code] → Object\nFired when an error has occoured. This is a specific error event. fatal-error #  at-fatal-error → Request\nRequests are made via the Fetch API if possible.Fallback XMLHttpRequest response-error-4xx #  at-response-error-4xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-5xx #  at-response-error-5xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-raw #  at-response-error-raw → Object\nFired when a error has occoured. response #  at-response → Object\nFired when a response is received. response-hts-updated #  at-response-hts-updated → hts\nFired when the hts was updated by the received response. filter-changed #  at-filter-changed → ``\nFired when filter was updated with fn-set-filter. hts-updated #  at-hts-updated → Array|HATEOAS\nFired when hateoas was updated from response. hts-injected #  at-hts-injected → Hateoas links\nFired when hateoas was updated Methods #  setFields #  setFields(fields String ) ⟹ void\nString  → fn-set-fields\nComma separated list of fields (like a fieldmask) used for partial representation / partial responses.\nIf your services supports this feature, you will receive a subset of the fields.\n fields Comma separated list of fields   bindRequestData #  bindRequestData(dataObject `` ) ⟹ void\n``  → fn-bind-request-data\nBinds a furo-data-object type. Use this if you want save data.\n dataObject    setOrderBy #  setOrderBy(order String ) ⟹ void\nString  → fn-set-order-by\nSorting order\norder-by=\u0026ldquo;foo,-bar\u0026rdquo; means foo asc and bar desc\nhttps://cloud.google.com/apis/design/design_patterns#sorting_order\nTo avoid sql injection errors we do not send any sql like syntax!\nOnly useable if your service has implemented this feature.\n order Comma separated list of sort orders   clearFilter #  clearFilter() ⟹ void\n* → fn-clear-filter\nclear the setted filter\n\nsetFilter #  setFilter(filterstring String ) ⟹ void\nString  → fn-set-filter\nSet the filter.\nHint: use the FieldNode._base64 property to send complex objects as a filter and decode it on the server side.\nOnly useable if your service has implemented this feature.\n filterstring String for your filter.   setPageSize #  setPageSize(size Number ) ⟹ void\nNumber  → fn-set-page-size\nSets pagination size in the List request.\nOnly useful if your service supports pagination.\n size requested size of a page.   updateQp #  updateQp(qp `` key Object ) ⟹ void\n`` Object  → fn-update-qp\nUpdate query params a qp like {\u0026ldquo;active\u0026rdquo;:true} will just update the qp active\nIf the current value of the qp is not the same like the injected value, a qp-changed event will be fired\n qp  key value pairs   setQp #  setQp(qp `` key Object ) ⟹ void\n`` Object  → fn-set-qp\nSet query params All existing query params are replaced by the transferred parameters If the transferred object is empty, all the values will be removed! The AgentHelper fires a qp-set event after the query params are replaced.\n qp  key value pairs   clearQp #  clearQp() ⟹ void\n* → fn-clear-qp\nclear the query params that you have setted before\n\nlist #  list() ⟹ void\n* → fn-list\nloads the entity if hts is available\n\nload #  load() ⟹ void\n* → fn-load\nloads the entity if hts is available\n\nloadRel #  loadRel() ⟹ void\n* → fn-load-rel\nloads the entity following the link which is specified on the attribute rel if it is available.\n\nsearchRel #  searchRel(term `` ) ⟹ void\n``  → fn-search-rel\nsearch for a term following the link which is specified on the attribute rel\nThis will set the query param q and execute the query.\n term    search #  search(term `` ) ⟹ void\n``  → fn-search\nsearch for a term.\nThis will set the query param q and triggers a list()\n term    first #  first() ⟹ void\n* → fn-first\nloads the entity if hts is available\n\nprev #  prev() ⟹ void\n* → fn-prev\nloads the entity if hts is available\n\nnext #  next() ⟹ void\n* → fn-next\nloads the entity if hts is available\n\nlast #  last() ⟹ void\n* → fn-last\nloads the entity if hts is available\n\nhtsIn #  htsIn(hts `` ) ⟹ void\n``  → fn-hts-in\nInject HATEOAS links.\n hts    abortPendingRequest #  abortPendingRequest() ⟹ void\n* → fn-abort-pending-request\nAborts a pending request\n\n"});index.add({'id':17,'href':'/docs/modules/furo-util/furo-config/','title':"furo-config",'section':"@furo/util",'content':"furo-config #  @furo/util v2.0.9 import '@furo/util/src/furo-config.js'; exports \u0026lt;furo-config\u0026gt; custom-element-definition superclass LitElement summary config access\nfuro-config\nAccess config data\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;!-- set with config-loader --\u0026gt; \u0026lt;furo-config-loader section=\u0026#34;views\u0026#34; src=\u0026#34;/viewconfig.json\u0026#34; \u0026gt;\u0026lt;/furo-config\u0026gt; \u0026lt;!-- consume a config --\u0026gt; \u0026lt;furo-config section=\u0026#34;views\u0026#34; at-config-updated=\u0026#34;--conf\u0026#34; \u0026gt;\u0026lt;/furo-config\u0026gt; \u0026lt;!-- consume a sub path of a config section --\u0026gt; \u0026lt;furo-config section=\u0026#34;views.subset.deep\u0026#34; at-config-updated=\u0026#34;--deepconf\u0026#34; \u0026gt;\u0026lt;/furo-config\u0026gt;   Attributes and Properties #  section #  section String \nsection of the config object that you are interested in\naccess deep object with dots like main.sub.sub config #  default: Config\nThe current section of the config, which was defined by section. Events #  config-updated #  at-config-updated → config.section\nFired when section changed Methods #  "});index.add({'id':18,'href':'/docs/modules/furo-util/furo-config-loader/','title':"furo-config-loader",'section':"@furo/util",'content':"furo-config-loader #  @furo/util v2.0.9 import '@furo/util/src/furo-config-loader.js'; exports \u0026lt;furo-config-loader\u0026gt; custom-element-definition superclass LitElement mixes FBP summary load config files\nfuro-config-loader loads a configuration json in to the defined section.\nTo access the config values, use furo-config.\n1 2 3 4  \u0026lt;furo-config-loader src=\u0026#34;/custom/view-config.json\u0026#34; section=\u0026#34;views\u0026#34; \u0026gt;\u0026lt;/furo-config-loader\u0026gt;   Attributes and Properties #  src #  src String \nFile source section #  section String \nTargeted section to load the config in. Events #  config-loaded #  at-config-loaded → Object\nFired when the config is loaded with the loaded config as detail. Methods #  "});index.add({'id':19,'href':'/docs/modules/furo-data/furo-custom-method/','title':"furo-custom-method",'section':"@furo/data",'content':"furo-custom-method #  @furo/data v2.3.0 import '@furo/data/src/furo-custom-method.js'; exports \u0026lt;furo-custom-method\u0026gt; custom-element-definition superclass LitElement mixes FBP summary interface component to handle custom methods\nfuro-custom-method is a interface component to handle custom methods.\n1 2 3 4 5 6 7 8 9 10  \u0026lt;furo-custom-method service=\u0026#34;Servicename\u0026#34; method=\u0026#34;release\u0026#34; fn-hts-in=\u0026#34;--hts\u0026#34; fn-trigger=\u0026#34;--customClick\u0026#34;\u0026gt;\u0026lt;/furo-custom-method\u0026gt; \u0026lt;!-- produces a hateoas link array --\u0026gt; \u0026lt;furo-deep-link service=\u0026#34;Servicename\u0026#34; at-hts-out=\u0026#34;--hts\u0026#34;\u0026gt;\u0026lt;/furo-deep-link\u0026gt;    before you can do any requests, the service, method and the HATEOAS must be known  Attributes and Properties #  service #  service String \nName of the service. method #  method String \nName of the custom method / rel. Events #  hts-updated #  at-hts-updated → HTS\nFired when hts was updated by fn-hts-in. request-aborted #  at-request-aborted → Request\nFired when a request was canceled. request-started #  at-request-started → Request\nFired when a request is sent. response-raw #  at-response-raw → Object\nFired when a response is received. response-error #  at-response-error → Object\nFired when an error has occoured. This is a general error event. The specific error events are fired additionally. response-error-[status-code] #  at-response-error-[status-code] → Object\nFired when an error has occoured. This is a specific error event. fatal-error #  at-fatal-error → Request\nRequests are made via the Fetch API if possible.Fallback XMLHttpRequest response-error-4xx #  at-response-error-4xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-5xx #  at-response-error-5xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-raw #  at-response-error-raw → Object\nFired when a error has occoured. response #  at-response → Object\nFired when a response is received. Methods #  updateQp #  updateQp(qp `` key Object ) ⟹ void\n`` Object  → fn-update-qp\nUpdate query params a qp like {\u0026ldquo;active\u0026rdquo;:true} will just update the qp active\nIf the current value of the qp is not the same like the injected value, a qp-changed event will be fired\n qp  key value pairs   bindRequestData #  bindRequestData(dataObject `` ) ⟹ void\n``  → fn-bind-request-data\nBinds a furo-data-object type.\n dataObject    clearQp #  clearQp() ⟹ void\n* → fn-clear-qp\nclear the query params that you have setted before\n\ntrigger #  trigger() ⟹ void\n* → fn-trigger\ntrigger the method with respect for binded-requset-object\n\ntriggerEmpty #  triggerEmpty() ⟹ void\n* → fn-trigger-empty\n\ntriggerWithBody #  triggerWithBody(body `` ) ⟹ void\n``  → fn-trigger-with-body\ntrigger the method with data\n body    htsIn #  htsIn(hts `` ) ⟹ void\n``  → fn-hts-in\n hts    abortPendingRequest #  abortPendingRequest() ⟹ void\n* → fn-abort-pending-request\nAborts a pending request\n\n"});index.add({'id':20,'href':'/docs/modules/furo-data/furo-data-flow-repeat/','title':"furo-data-flow-repeat",'section':"@furo/data",'content':"furo-data-flow-repeat #  @furo/data v2.3.0 import '@furo/data/src/furo-data-flow-repeat.js'; exports FuroDataFlowRepeat js exports \u0026lt;furo-data-flow-repeat\u0026gt; custom-element-definition superclass FlowRepeat mixes FieldNodeAdapter summary automatic display of repeated fields\nfuro-data-flow-repeat Is a bindable repeater.\n1 2 3 4 5 6  \u0026lt;furo-data-flow-repeat identity-path=\u0026#34;id\u0026#34; fn-bind-data=\u0026#34;--data(*.repeaterfield)\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;furo-ui5-data-text-input-labeled fn-bind-data=\u0026#34;--init\u0026#34;\u0026gt;\u0026lt;/furo-ui5-data-text-input-labeled\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/furo-data-flow-repeat\u0026gt;   The wire --init is fired from furo-data-flow-repeat\nIf you want to delete a repeated item, implement something which triggers the deleteNode method on the fieldNode itself.\nAvailable wires in the template: #   --init : contains the repeated item, fired only once on creation of the repeated node --item : contains the repeated item, fired on every inject --firstItem : contains the repeated item, fired on the first element. --lastItem : contains the repeated item, fired on the last element. --index : contains a number with the index of the element. --host : contains a reference to the host component. --trigger : contains what was passed in to the triggering method. --triggerFirst : contains what was passed in to the triggering method. --triggerLast : contains what was passed in to the triggering method. --itemSelected : contains nothing, is triggered with select(index). --itemDeSelected : contains nothing, is triggered when another item is selected with select(index).  Available attributes #  index contains the current index of the item. Use this to fire a event with an index like at-click=\u0026quot;^^item-clicked(index)\u0026quot; item contains the current index of the item. Use this to fire a event with the repeated item like at-click=\u0026quot;^^item-selected(item)\u0026quot;\nAttributes and Properties #  selectAddedItem #  default: false\nEnable this to select the created item. This will trigger a wire --itemSelected which can be wired to fn-focus=\u0026quot;--itemSelected\u0026quot;. identityPath #  default: false\nBy setting this param, the repeater has not to rebuild the list on new data. It only updates the parts that have changed.\nThe path is a field, relative to the root of the repeated item. Methods #  bindData #  bindData(fieldNode RepeaterNode ) ⟹ boolean\nRepeaterNode  → fn-bind-data\nBind a repeater node.\nIf identity-path is not set, the list will be cleared every time it receives new data.\n fieldNode Must be a repeater node.   add #  add(data Object ) ⟹ void\nObject  → fn-add\nAdds a repeated item of the same type.\nIf no object is set, a initial FieldNode of the same type is added to the repeats.\n data Object that match the type of the repeated node.   "});index.add({'id':21,'href':'/docs/modules/furo-data/furo-data-hide-content/','title':"furo-data-hide-content",'section':"@furo/data",'content':"furo-data-hide-content #  @furo/data v2.3.0 import '@furo/data/src/furo-data-hide-content.js'; exports \u0026lt;furo-data-hide-content\u0026gt; custom-element-definition superclass LitElement mixes FBP summary hide content with a boolean fieldnode\nfuro-data-hide-content hides content in dependency to a boolean field value.\nIt is also possible to call the hide() and show() methods to show and hide the content and update the value. TODO: support furo.fat.Bool and google.protobuf.BoolValue\n1 2 3  \u0026lt;furo-data-hide-content fn-bind-data=\u0026#34;--bind(*.bool)\u0026#34;\u0026gt; \u0026lt;div\u0026gt;some content\u0026lt;/div\u0026gt; \u0026lt;/furo-collapsible-box\u0026gt;   Attributes and Properties #  hidden #  default: false\n\nhideOnFalse #  hide-on-false Boolean \nHide element on false instead of true Events #  value-changed #  at-value-changed → Boolean\nFired when the visibility changed, contains the current visibility state hid #  at-hid → void\nFired when the content gets hid showed #  at-showed → void\nFired when the content gets visible Methods #  bindData #  bindData(fieldNode Object|FieldNode ) ⟹ void\nObject|FieldNode  → fn-bind-data\nBind a entity field to the date-input. You can use the entity even when no data was received. When you use at-object-ready from a furo-data-object which emits a EntityNode, just bind the field with --entity(*.fields.fieldname)\n fieldNode a Field object   hide #  hide() ⟹ void\n* → fn-hide\nhides the content\n\nshow #  show() ⟹ void\n* → fn-show\nshows the content\n\ntoggle #  toggle() ⟹ void\n* → fn-toggle\nToggle the current visibility state.\n\nSlots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. "});index.add({'id':22,'href':'/docs/modules/furo-data/furo-data-object/','title':"furo-data-object",'section':"@furo/data",'content':"furo-data-object #  @furo/data v2.3.0 import '@furo/data/src/furo-data-object.js'; exports FuroDataObject js exports \u0026lt;furo-data-object\u0026gt; custom-element-definition superclass LitElement summary Typed data object\nfuro-data-object gives you a object which is built based on the type spec. The types must be available in the {Env}, learn more about setting up the environment in the guide.\nThe data will mostly be used in a [data-ui]/(../../data-input/doc) component or in component that yoh build, which contains one or more of them.\nfuro-data-object receives its data regularly from a collection-aget or a entity-aget. But you can also send json data which is formed like the raw-data of this type.\nfuro-data-object will not do any validation or data manipulation neither will send the data. It is just responsible to transform incomming data to an object and vice versa. You can access the manipulated data structure on the property .data.rawData with javascript (if needed).\n1 2 3 4 5 6 7 8 9 10  \u0026lt;!-- The furo-data-object will send a initial dataObject of type project.Project on at-response-ready --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;project.Project\u0026#34; fn-inject-raw=\u0026#34;--response(*.data)\u0026#34; at-object-ready=\u0026#34;--dataObject\u0026#34;\u0026gt;\u0026lt;/furo-data-object\u0026gt; \u0026lt;!-- The furo-entity-agent will fetch the data from ProjectService and pass it in at-response to the furo-data-object. --\u0026gt; \u0026lt;furo-entity-agent service=\u0026#34;ProjectService\u0026#34; fn-save=\u0026#34;--saveClicked\u0026#34; fn-bind-request-data=\u0026#34;--dataObject\u0026#34; at-response=\u0026#34;--response\u0026#34; \u0026gt;\u0026lt;/furo-entity-agent\u0026gt;   Attributes and Properties #  type #  type String \nThe name of the type you want to use. The type must be registered in Env json #   get the data from the data object as raw json Events #  data-injected #  at-data-injected → ``\nFired when injected data was processed (bubbles). data-changed #  at-data-changed → {Object|CollectionNode}\nFired when data in furo-data-object has changed (bubbles). This event fires a lot, consider using a de-bounce with the event. data-changed-after-inject #  at-data-changed-after-inject → {Object|CollectionNode}\nFired when data in furo-data-object has changed after injectRaw is complete (bubbles). This event fires a lot, consider using a de-bounce with the event. field-value-changed #  at-field-value-changed → {Object} the field node\nFired when a field has changed. validation-success #  at-validation-success → DataObject\nFired when validation results in a valid state. validation-failed #  at-validation-failed → DataObject\nFired when validation results in a invalid state. data-object-became-invalid #  at-data-object-became-invalid → {Object|EntityNode} reference to entity\nFired when the data object switches from ininvalid to invalid state (bubbles). data-object-became-valid #  at-data-object-became-valid → {Object|EntityNode} reference to entity\nFired when the data object switches from invalid to valid state (bubbles). object-ready #  at-object-ready → A EntityNode object\nFired when the object defined by type is built (bubbles). init-completed #  at-init-completed → A EntityNode object\nFired when the object init was done (bubbles). Methods #  injectRaw #  injectRaw(jsonObj `` ) ⟹ void\n``  → fn-inject-raw\ninject a raw data response from the corresonding agent.\nInput may look something like this:\nEntity data\n1 2 3 4 5  { \u0026#34;data\u0026#34;: {}, \u0026#34;links\u0026#34;: [], \u0026#34;meta\u0026#34;: {} }   Collection data\n1 2 3 4 5 6  { \u0026#34;data\u0026#34;: {}, \u0026#34;links\u0026#34;: [], \u0026#34;meta\u0026#34;: {}, \u0026#34;entities\u0026#34;: [] }    jsonObj    setPristine #  setPristine() ⟹ void\n* → fn-set-pristine\nSet all nodes to pristine\nUseful for working with deltas\n\nclearAllErrors #  clearAllErrors() ⟹ void\n* → fn-clear-all-errors\nClears all errors on children without any validation!\n\nvalidateAllFields #  validateAllFields() ⟹ void\n* → fn-validate-all-fields\nTriggers the validation of all fields in the data object.\nUse this before you submit some data to a server.\nWill cause a data-object-became-valid or data-object-became-invalid and a validation-success or validation-failed event.\n\nappendErrors #  appendErrors(grpcStatus `` ) ⟹ void\n``  → fn-append-errors\nAppend errors from custom methods or other agents or sources to the data object. The error object must have a grpc status error signature like:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;code\u0026#34;:3, \u0026#34;message\u0026#34;:\u0026#34;invalid username\u0026#34;, \u0026#34;details\u0026#34;:[{ \u0026#34;@type\u0026#34;:\u0026#34;type.googleapis.com/google.rpc.BadRequest\u0026#34;, \u0026#34;field_violations\u0026#34;:[{ \u0026#34;field\u0026#34;:\u0026#34;user.name\u0026#34;, \u0026#34;description\u0026#34;:\u0026#34;The username must only contain alphanumeric characters\u0026#34; }] }] }    grpcStatus    reset #  reset() ⟹ void\n* → fn-reset\nReset the model to the last injected state.\nTo set the model to the initial state use init\n\ninit #  init() ⟹ void\n* → fn-init\nSets the model to an initial state according to the given type.\nfires init-completed\nTo reset changed data to the last injected state, please use reset();\n\ngetData #  getData() ⟹ void\n* → fn-get-data\nget the data of the data object\n\n"});index.add({'id':23,'href':'/docs/modules/furo-util/furo-de-bounce/','title':"furo-de-bounce",'section':"@furo/util",'content':"furo-de-bounce #  @furo/util v2.0.9 import '@furo/util/src/furo-de-bounce.js'; exports \u0026lt;furo-de-bounce\u0026gt; custom-element-definition superclass LitElement mixes FBP summary event de bouncer\nThe Debounce technique allow us to “group” multiple sequential calls in a single one.\n Read more about debouncing here\n1 2 3  \u0026lt;furo-de-bounce fn-trigger=\u0026#34;--searchStringEntered\u0026#34; at-debounced=\u0026#34;--debouncedSrch\u0026#34; \u0026gt;\u0026lt;/furo-de-bounce\u0026gt;   Attributes and Properties #  immediate #  immediate Boolean \nIf true, input-wire is triggered immediatley (leading edge instead of trailing) Default value: false wait #  wait Number \nDebounce time in milliseconds Default value: 250 Events #  out #  at-out → *\ndeprecated, use debounced instead. // TODO: remove @out and fn-input-wire in q2 2022 debounced #  at-debounced → *\nFired after N milliseconds. If immediateis set to TRUE, it fires on the leading edge. Methods #  trigger #  trigger(data * ) ⟹ void\n*  → fn-trigger\nTrigger the debounce\n data Any data, will be dispatched on the debounced event.   "});index.add({'id':24,'href':'/docs/modules/furo-data/furo-deep-link/','title':"furo-deep-link",'section':"@furo/data",'content':"furo-deep-link #  @furo/data v2.3.0 import '@furo/data/src/furo-deep-link.js'; exports \u0026lt;furo-deep-link\u0026gt; custom-element-definition superclass LitElement summary Resolve deep links HATEOAS based on query params\nfuro-deep-link Resolve deep links HATEOAS based on the query params and the selected service.\n1 2 3 4  \u0026lt;furo-deep-link service=\u0026#34;TaskService\u0026#34; fn-qp-in=\u0026#34;--pageQueryChanged(*.query)\u0026#34; at-hts-out=\u0026#34;--serviceHTS\u0026#34;\u0026gt; \u0026lt;/furo-deep-link\u0026gt;   Deeplink inside of a furo-page\nThe services must be registered in the Env:\n1 2 3  import {Services,Types} from \u0026#34;./furo-spec.js\u0026#34; Init.registerApiServices(Services); Init.registerApiTypes(Types);   Usually this is done in your src/configs/init.js\nAttributes and Properties #  service #  service String \nName of the service Events #  hts-out #  at-hts-out → []HTSLinks\nFired when hateoas is available Methods #  qpIn #  qpIn(queryParams `` ) ⟹ void\n``  → fn-qp-in\nFuro-deep-link consumes a object literal with key value pairs.\nThis can come from the *.query part of an event from furo-location.\nOr from a furo-pages wire.\nRelevant wires from furo-pages:\n  \u0026ndash;pageQueryChanged(*.query)\n  \u0026ndash;pageActivated(*.query)\n  \u0026ndash;pageHashChanged(*.query)\n  queryParams    trigger #  trigger() ⟹ void\n* → fn-trigger\nEvaluates hts. Use qpIn(qp) if you have a qp object in your event.detail This method have no effect as long _qp is not set.\n\nsetService #  setService(serviceName `` ) ⟹ void\n``  → fn-set-service\nSets the service by wire\n serviceName    "});index.add({'id':25,'href':'/docs/modules/furo-util/furo-demo-snippet/','title':"furo-demo-snippet",'section':"@furo/util",'content':"furo-demo-snippet #  @furo/util v2.0.9 import '@furo/util/src/doc/furo-demo-snippet.js'; exports \u0026lt;furo-demo-snippet\u0026gt; custom-element-definition superclass LitElement mixes FBP summary documentation helper\nfuro-demo-snippet This is a documentation helper to show a example, the flow and the source of an example.\nAttributes and Properties #  template #   \nmarkdown #  default: \\``html\\n${t.innerHTML}\\n````\n\nicon #  default: '# '\n\nsource #  source reflects Boolean \nShow the source tab demo #  demo reflects Boolean \nShow the demo tab flow #  flow reflects Boolean \nShow the flow tab Methods #  "});index.add({'id':26,'href':'/docs/modules/furo-route/furo-document-title/','title':"furo-document-title",'section':"@furo/route",'content':"furo-document-title #  @furo/route v2.1.1 import '@furo/route/src/furo-document-title.js'; exports \u0026lt;furo-document-title\u0026gt; custom-element-definition superclass LitElement mixes FBP summary Document title\nfuro-document-title\nUpdates the document title and set navigation waypoints.\nStructure of the title #  The title is built up from 3 parts (prefix, title, suffix). Each of them can be set by attribute or a setter method. The title and suffix part can be set with a fieldnode from a furo-data-object.\ndocument.title = prefix + title + suffix\nWaypoints #  Waypoints are pushed to the browser history and allows you to navigate with the back and forward buttons of the browser. To return to the last waypoint within your app, you have to trigger a history.back(). Read more about the history API here.\nIf you use furo-app-flow you can send the history-back event.\nViews and pages without a waypoint are not stored in the history.\n[a]--\u0026gt;[b]--\u0026gt;[.]--\u0026gt;[.]--\u0026gt;[.]--\u0026gt;[c] ▲ │ └───────────────────────┘ By clicking the back button you will return to b Usage example #  1 2 3 4 5 6  \u0026lt;furo-document-title prefix=\u0026#34;${i18n.t(\u0026#39;prefix.label\u0026#39;)} [\u0026#34; fn-bind-title=\u0026#34;--DataObject(*.display_name)\u0026#34; suffix=\u0026#34;]\u0026#34; fn-set-waypoint=\u0026#34;--pageActivated\u0026#34; \u0026gt;\u0026lt;/furo-document-title\u0026gt;   The document title will be set to: PrefixLabel [display_name_value]\nAttributes and Properties #  prefix #  prefix String default: ''\nprefix part, you can also use setPrefix().` title #  title String default: ''\nTitle part, you can also use setTitle() or bindTitle(). suffix #  suffix String default: ''\nSuffix part, you can also use setSuffix() or bindSuffix(). Events #  waypoint-pushed #  at-waypoint-pushed → Event\nFired when the waypoint is finaly pushed to the browser history. waypoint-canceled #  at-waypoint-canceled → Event\nFired when the waypoint was set but not pushed to the history, because the user navigated back. Methods #  setWaypoint #  setWaypoint() ⟹ void\n* → fn-set-waypoint\n\nactivate #  activate() ⟹ void\n* → fn-activate\nSet the document title with the current prefix title suffix. Without setting a waypoint.\n\nsetSuffix #  setSuffix(s `` ) ⟹ void\n``  → fn-set-suffix\nUpdates the suffix\n s    setTitle #  setTitle(title `` ) ⟹ void\n``  → fn-set-title\nUpdates the title\n title string   bindSuffix #  bindSuffix(fieldnode `` ) ⟹ void\n``  → fn-bind-suffix\nBind a fieldnode to auto update the suffix\n fieldnode    bindTitle #  bindTitle(fieldnode `` ) ⟹ void\n``  → fn-bind-title\nBind a fieldnode to auto update the title\n fieldnode    "});index.add({'id':27,'href':'/docs/modules/furo-layout/furo-empty-spacer/','title':"furo-empty-spacer",'section':"@furo/layout",'content':"furo-empty-spacer #  @furo/layout v2.0.7 import '@furo/layout/src/furo-empty-spacer.js'; exports \u0026lt;furo-empty-spacer\u0026gt; custom-element-definition superclass LitElement summary fill the space in a furo-xxxx-flex\nfuro-empty-spacer Takes the place in furo-horizontal-flex or a furo-vertical-flex.\n  small  small    Attributes and Properties #  flex #  flex reflects Boolean default: true\nAttribute flex for furo-horizontal-flex and furo-vertical-flex hidden #  hidden reflects Boolean default: false\nSet to true to hide the spacer Methods #  "});index.add({'id':28,'href':'/docs/modules/furo-data/furo-entity-agent/','title':"furo-entity-agent",'section':"@furo/data",'content':"furo-entity-agent #  @furo/data v2.3.0 import '@furo/data/src/furo-entity-agent.js'; exports \u0026lt;furo-entity-agent\u0026gt; custom-element-definition superclass LitElement mixes FBP summary interface component to handle entity requests\nfuro-entity-agent is an interface component to handle entity requests.\n Note When you trigger the save method and there is a HTS wich allows to PATCH the record, only the deltas (changes) of the values are sent.\n  Hint PUT will send all fields which are not marked as readonly. If you want to send all data on PUT (without filtering readonly fields) set Env.api.sendAllDataOnMethodPut = true;\n 1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;!-- The furo-entity-agent will fetch the data from ProjectService and pass it in at-response to the furo-data-object. --\u0026gt; \u0026lt;furo-entity-agent service=\u0026#34;ProjectService\u0026#34; fn-hts-in=\u0026#34;--hts\u0026#34; at-response=\u0026#34;--response\u0026#34; \u0026gt;\u0026lt;/furo-entity-agent\u0026gt; \u0026lt;!-- The furo-data-object will send a initial dataObject of type project.Project on at-response-ready --\u0026gt; \u0026lt;furo-data-object type=\u0026#34;project.ProjectEntity\u0026#34; fn-inject-raw=\u0026#34;--response\u0026#34; \u0026gt;\u0026lt;/furo-data-object\u0026gt;   Attributes and Properties #  service #  service String \nName des Services loadOnHtsIn #  load-on-hts-in Boolean \ntriggers a load when link rel=\u0026ldquo;self\u0026rdquo; is in the injected hts (after hts-injected is fired) appendUpdateMaskQP #  with-update-mask Boolean \nCreates the query param update mask according to the google api design guidelines.\nYour update service must have a query param update_mask to use this feature.\nhttps://cloud.google.com/apis/design/standard_methods#update\nYou may not need it if your server can handle PATCHes without a update_mask https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html Events #  response-hts-updated #  at-response-hts-updated → hts\nFired when hts was updated from the response. load-success #  at-load-success → response\nFired when load() was successful. load-failed #  at-load-failed → response\nFired when load() was not successful. delete-success #  at-delete-success → response\nFired when delete() was successful. delete-failed #  at-delete-failed → response\nFired when delete() was not successful. save-success #  at-save-success → response\nFired when save() was successful. save-failed #  at-save-failed → response\nFired when save() was not successful. put-success #  at-put-success → response\nFired when update() was successful. put-failed #  at-put-failed → response\nFired when update() was not successful. create-success #  at-create-success → response\nFired when create() was successful. create-failed #  at-create-failed → response\nFired when create() was not successful. hts-updated #  at-hts-updated → {Array|HATEOAS}\nFired when hateoas is updated from response. hts-injected #  at-hts-injected → Hateoas links\nFired when hateoas is updated. request-aborted #  at-request-aborted → Request\nFired when a request was canceled. request-started #  at-request-started → Request\nFired when a request is sent. response-raw #  at-response-raw → Object\nFired when a response is received. response-error #  at-response-error → Object\nFired when an error has occoured. This is a general error event. The specific error events are fired additionally. response-error-[status-code] #  at-response-error-[status-code] → Object\nFired when an error has occoured. This is a specific error event. fatal-error #  at-fatal-error → Request\nRequests are made via the Fetch API if possible.Fallback XMLHttpRequest response-error-4xx #  at-response-error-4xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-5xx #  at-response-error-5xx → Object\nFired when an error has occoured. This is a group error event. E.g. response-error-5xx, response-error-4xx response-error-raw #  at-response-error-raw → Object\nFired when a error has occoured. response #  at-response → Object\nFired when a response is received. Methods #  updateQp #  updateQp(qp `` key Object ) ⟹ void\n`` Object  → fn-update-qp\nUpdate query params a qp like {\u0026ldquo;active\u0026rdquo;:true} will just update the qp active\nIf the current value of the qp is not the same like the injected value, a qp-changed event will be fired\n qp  key value pairs   bindRequestData #  bindRequestData(dataObject `` ) ⟹ void\n``  → fn-bind-request-data\nBinds a furo-data-object type. Use this if you want save data.\n dataObject    clearQp #  clearQp() ⟹ void\n* → fn-clear-qp\nclear the query params that you have setted before\n\nload #  load() ⟹ void\n* → fn-load\nloads the entity if hts is available\n\ndelete #  delete() ⟹ void\n* → fn-delete\ndelete the entity if hts is available\n\nsave #  save() ⟹ void\n* → fn-save\nloads the entity if hts is available\n\nput #  put() ⟹ void\n* → fn-put\nsaves the entity with method put if hts is available\n\ncreate #  create() ⟹ void\n* → fn-create\ncreating the entity if hts rel=\u0026ldquo;create\u0026rdquo; is available\n\nhtsIn #  htsIn(hts `` ) ⟹ void\n``  → fn-hts-in\n hts    abortPendingRequest #  abortPendingRequest() ⟹ void\n* → fn-abort-pending-request\nAborts a pending request\n\n"});index.add({'id':29,'href':'/docs/modules/furo-data/furo-entity-field/','title':"furo-entity-field",'section':"@furo/data",'content':"furo-entity-field #  @furo/data v2.3.0 import '@furo/data/src/furo-entity-field.js'; exports \u0026lt;furo-entity-field\u0026gt; custom-element-definition superclass LitElement summary interact with single field of a data object\nUse this component to interact with fields from a furo-data-object.\nYou can update the field value or listen to changes of a field.\n1  \u0026lt;furo-entity-field fn-bind-data=\u0026#34;--dataObject(*.field)\u0026#34;\u0026gt;\u0026lt;/furo-entity-field\u0026gt;   Attributes and Properties #  value #   Set a value to update the fieldnode Events #  value-changed #  at-value-changed → *\nFired when the field value or a child value of it was changed. Methods #  setValue #  setValue(value * ) ⟹ void\n*  → fn-set-value\nSet the value of the field.\n value    bindData #  bindData(fieldNode Object|FieldNode ) ⟹ void\nObject|FieldNode  → fn-bind-data\nBind a FieldNode to the date-input.\n--personDO(*.person.firstname)\n fieldNode a Field object   "});index.add({'id':30,'href':'/docs/modules/furo-util/furo-feature-toggle/','title':"furo-feature-toggle",'section':"@furo/util",'content':"furo-feature-toggle #  @furo/util v2.0.9 import '@furo/util/src/furo-feature-toggle.js'; exports \u0026lt;furo-feature-toggle\u0026gt; custom-element-definition superclass LitElement mixes FBP summary flow based handler for feature toggles\nfuro-feature-toggle Is a handler for feature toggles, you can react to key changes with FBP. This component is quite simple, but gives you a lot of possibilities. Read more about feature toggles in the guide\n1 2 3 4 5 6 7 8 9 10  \u0026lt;!-- setting a key --\u0026gt; \u0026lt;furo-feature-toggle key=\u0026#34;feature.easter.egg\u0026#34; fn-set-true=\u0026#34;--activateClicked\u0026#34; fn-set-false=\u0026#34;--disableClicked\u0026#34;\u0026gt; \u0026lt;/furo-feature-toggle\u0026gt; \u0026lt;!-- observing key changes --\u0026gt; \u0026lt;furo-feature-toggle key=\u0026#34;feature.xxxx.yyy\u0026#34; at-key-activated=\u0026#34;--fxyActivated\u0026#34; at-key-changed=\u0026#34;--fxyChanged\u0026#34;\u0026gt; \u0026lt;/furo-feature-toggle\u0026gt;   Attributes and Properties #  key #  key String \nName of a feature toggle. Events #  key-true #  at-key-true → true\nFired when the key is set to true or is true on init. key-false #  at-key-false → false\nFired when the key is set to false or is false on init. key-changed #  at-key-changed → Boolean\nFired on init and when the key changes its state. Methods #  setFalse #  setFalse() ⟹ void\n* → fn-set-false\nSets a feature key state to false.\n\nsetTrue #  setTrue() ⟹ void\n* → fn-set-true\nSets a feature key state to true.\n\n"});index.add({'id':31,'href':'/docs/modules/furo-util/furo-fetch-json/','title':"furo-fetch-json",'section':"@furo/util",'content':"furo-fetch-json #  @furo/util v2.0.9 import '@furo/util/src/furo-fetch-json.js'; exports \u0026lt;furo-fetch-json\u0026gt; custom-element-definition superclass LitElement mixes FBP summary fetch json data\nfuro-fetch-json Fetches and parses json data from a source.\n1  \u0026lt;furo-fetch-json src=\u0026#34;/example.json\u0026#34; fn-fetch=\u0026#34;|--FBPready\u0026#34; at-data=\u0026#34;--contentReceived\u0026#34;\u0026gt;\u0026lt;/furo-fetch-json\u0026gt;   Attributes and Properties #  src #  src String \nthe url you want to fetch Events #  data #  at-data → {Object} json data\nFired when data received and json parsed parse-error #  at-parse-error → error\nFired when json is not parseable Methods #  fetch #  fetch() ⟹ Promise\n* → fn-fetch\nfetch and parse the data from specified src.\nUse fetch-src if you want to pass the source url\n\nfetchSrc #  fetchSrc(source *String* ) ⟹ Promise\n   → fn-fetch-src\nfetch json data from source\n source  String source   "});index.add({'id':32,'href':'/docs/modules/furo-layout/furo-form-layouter/','title':"furo-form-layouter",'section':"@furo/layout",'content':"furo-form-layouter #  @furo/layout v2.0.7 import '@furo/layout/src/furo-form-layouter.js'; exports \u0026lt;furo-form-layouter\u0026gt; custom-element-definition superclass LitElement mixes FBP summary Grid based form field row\nfuro-form-layouter\nUse furo-form-layouter to structure your forms. It is based on a grid system with the following properties:\n full-width row (Standard) two columns four columns  The required variant is set using an attribute. e.g. two, three, four and six\n1 2 3 4 5 6 7  \u0026lt;!-- four coulumn layout --\u0026gt; \u0026lt;furo-form-layouter four\u0026gt; \u0026lt;input-element\u0026gt;\u0026lt;/input-element\u0026gt; \u0026lt;input-element double\u0026gt;\u0026lt;/input-element\u0026gt; \u0026lt;input-element newline\u0026gt;\u0026lt;/input-element\u0026gt; \u0026lt;input-element full\u0026gt;\u0026lt;/input-element\u0026gt; \u0026lt;/furo-form-layouter\u0026gt;   To customize the slotted elements inside furo-form-layouter there are several attributes.\n double | stretches the element over two units full | stretches the element to full width newline | forces a new line  Responsiveness #     Columns narrow narrower     one one one   two one one   three one one   four two one   six three one    Attributes and Properties #  narrow #  default: false\n\nnarrower #  default: false\n\nbreakpointBig #  breakpoint-big reflects String default: 810\nSet custom breakpoint big Default: \u0026ldquo;810\u0026rdquo; breakpointSmall #  breakpoint-small reflects String default: 405\nSet custom breakpoints small Default: \u0026ldquo;405\u0026rdquo; narrowFix #  narrow-fix reflects Boolean \nSet narrow-fix attribute to force the layout analog to breakpoint big narrowerFix #  narrower-fix reflects Boolean \nSet narrower-fix attribute to force 1 column view (analog breakpoint small) Events #  layout-changed #  at-layout-changed → CustomEvent\n\nMethods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. Tags: form Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-form-layouter-row-gap width of row gap  default: 0px fallback: 0px   --furo-form-layouter-column-gap width of column gap  default: 0px fallback: 0px    "});index.add({'id':33,'href':'/docs/modules/furo-util/furo-forth-stack/','title':"furo-forth-stack",'section':"@furo/util",'content':"furo-forth-stack #  @furo/util v2.0.9 import '@furo/util/src/furo-forth-stack.js'; exports FuroForthStack js exports \u0026lt;furo-forth-stack\u0026gt; custom-element-definition superclass LitElement summary forth like stack\nfuro-forth-stack is a declarative stack, inspired by the forth stack.\nhttps://hackaday.com/2017/01/27/forth-the-hackers-language/ http://wiki.laptop.org/go/Forth_stack_operators http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm#stacks\nAttributes and Properties #  size #  default: 0\nCurrent size of the stack Events #  stack-size-changed #  at-stack-size-changed → Number\nFired when the stack size changes with Integer with the current size of the stack. rotated #  at-rotated → the top element\nFired when stack was rotated stack-changed #  at-stack-changed → the top element\nFired when the stack contents changes after put, drop,\u0026hellip; swapped #  at-swapped → void\nFired when stack was swapped empty #  at-empty → void\nFired when stack gets empty Methods #  clearStack #  clearStack() ⟹ void\n* → fn-clear-stack\nEmpties the stack and set the stack-size to 0\n\nput #  put(e `` ) ⟹ void\n``  → fn-put\nAdd an element to the stack\n e    swap #  swap() ⟹ void\n* → fn-swap\nswap ( n1 n2 \u0026ndash; n2 n1 )\nswap, as you may have guessed, swaps the top two elements of the stack. For example:\n1 2 3 4 swap will give you:\n1 2 4 3 \u0026lt;- Top\n\ndrop #  drop() ⟹ void\n* → fn-drop\ndrop ( n \u0026ndash; )\ndrop simply drops the top element of the stack. Running:\n1 2 3 drop gives you a stack of:\n1 2 \u0026lt;- Top\n\ndup #  dup() ⟹ void\n* → fn-dup\ndup ( n \u0026ndash; n n )\ndup is short for “duplicate” – it duplicates the top element of the stack. For example, try this out: 1 2 3 dup You should end up with the following stack: 1 2 3 3 \u0026lt;- Top  \nover #  over() ⟹ void\n* → fn-over\nover ( n1 n2 \u0026ndash; n1 n2 n1 )\nover is a bit less obvious: it takes the second element from the top of the stack and duplicates it to the top of the stack. Running this:\n1 2 3 over will result in this:\n1 2 3 2 \u0026lt;- Top\n\nrot #  rot() ⟹ void\n* → fn-rot\nrot ( n1 n2 n3 \u0026ndash; n2 n3 n1 )\nFinally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n1 2 3 rot gives you:\n2 3 1 \u0026lt;- Top\n\nrrot #  rrot() ⟹ void\n* → fn-rrot\nrrot ( n1 n2 n3 \u0026ndash; n3 n1 n2 )\nReverse rotation or right rotation rrot “rotates” the elements of the stack inverse to rot. The top elemen the stack gets moved to the bottom of the stack.\n1 2 3 rot gives you:\n3 1 2 \u0026lt;- Top\n\n"});index.add({'id':34,'href':'/docs/modules/furo-util/furo-get-clipboard/','title':"furo-get-clipboard",'section':"@furo/util",'content':"furo-get-clipboard #  @furo/util v2.0.9 import '@furo/util/src/furo-get-clipboard.js'; exports \u0026lt;furo-get-clipboard\u0026gt; custom-element-definition superclass LitElement mixes FBP summary get clipboard content\nfuro-get-clipboard get the clipboard content from the OS.\n1 2 3 4 5  \u0026lt;furo-get-clipboard fn-trigger=\u0026#34;--clipboardContentRequested\u0026#34; at-content=\u0026#34;--contentReceived\u0026#34; \u0026gt;\u0026lt;/furo-get-clipboard\u0026gt;   Attributes and Properties #  json #  json String \nConvert clipboard content to json Events #  content #  at-content → ``\nFired when clipboard content is received Methods #  trigger #  trigger() ⟹ void\n* → fn-trigger\n\n"});index.add({'id':35,'href':'/docs/modules/furo-util/furo-graph-renderer/','title':"furo-graph-renderer",'section':"@furo/util",'content':"furo-graph-renderer #  @furo/util v2.0.9 import '@furo/util/src/doc/graph/furo-graph-renderer.js'; exports \u0026lt;furo-graph-renderer\u0026gt; custom-element-definition superclass LitElement mixes FBP summary paints a dagree graph as svg\nfuro-graph-renderer Paint a SVG from the received graph data\nAttributes and Properties #  Events #  show-tooltip-requested #  at-show-tooltip-requested → node\nFired on mouseover of a attr node Methods #  draw #  draw(graph dagre ) ⟹ void\ndagre  → fn-draw\nDraw the graph as svg\n graph Dagre graph   "});index.add({'id':36,'href':'/docs/modules/furo-data/furo-hateoas-state/','title':"furo-hateoas-state",'section':"@furo/data",'content':"furo-hateoas-state #  @furo/data v2.3.0 import '@furo/data/src/furo-hateoas-state.js'; exports \u0026lt;furo-hateoas-state\u0026gt; custom-element-definition superclass LitElement mixes FieldNodeAdapter summary disables or hide nodes based on hts\nfuro-hateoas-state is an invisible component with a binding of type furo.Link or injection of a link array.\nIt disables / enables or hides / shows components according to the injected HATEOAS links. furo-hateoas-state only sets or remove the attributes hidden and disabled on the nodes.\nAll nodes inside the same parent are taken in to control.\nElements inside a shadow root are not selected.\nSet the attribute data-rel=\u0026ldquo;list\u0026rdquo; on any element you want to control with furo-hateoas-state.\nSet the attribute hide-no-rel if you want to hide the node instead of being disabled.\n1 2 3 4 5 6  \u0026lt;div\u0026gt; \u0026lt;button data-rel=\u0026#39;list\u0026#39;\u0026gt;list\u0026lt;/button\u0026gt; \u0026lt;button hide-no-rel data-rel=\u0026#39;list\u0026#39;\u0026gt;hide no rel\u0026lt;/button\u0026gt; \u0026lt;button data-rel=\u0026#39;add\u0026#39;\u0026gt;add\u0026lt;/button\u0026gt; \u0026lt;furo-hateoas-state fn-bind-hts=\u0026#39;--collection(*.links)\u0026#39;\u0026gt;\u0026lt;/furo-hateoas-state\u0026gt; \u0026lt;/div\u0026gt;   all elements with a data-rel=\u0026ldquo;something\u0026rdquo; attribute inside the div are controlled\nAttributes and Properties #  Methods #  enable #  enable() ⟹ void\n* → fn-enable\nEnable or show all nodes.\n\ndisable #  disable() ⟹ void\n* → fn-disable\nDisable or hide all nodes.\n\nbindData #  bindData(fieldNode `` ) ⟹ boolean\n``  → fn-bind-data\nBinds a fieldNode. Make sure the type of your field is accepted by the implemented component.\n fieldNode    bindHts #  bindHts(Links `` ) ⟹ void\n``  → fn-bind-hts\nBind a RepeaterNode of type furo.Link.\n Links    injectHts #  injectHts(value [json] ) ⟹ void\n[json]  → fn-inject-hts\nInject a link array directly.\n1 2 3 4 5 6 7 8 9  [ { \u0026#34;href\u0026#34;: \u0026#34;/mockdata/persons/list\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;list\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;person.PersonCollection\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;PersonService\u0026#34; } ]    value Array with raw furo.Link like   "});index.add({'id':37,'href':'/docs/modules/furo-util/furo-head-tail/','title':"furo-head-tail",'section':"@furo/util",'content':"furo-head-tail #  @furo/util v2.0.9 import '@furo/util/src/furo-head-tail.js'; exports \u0026lt;furo-head-tail\u0026gt; custom-element-definition superclass HTMLElement summary split an array\nfuro-head-tail Splits an iterable (i.e. Array) in its head and tail part.\n \u0026lt;furo-head-tail fn-split=\u0026quot;--arrayData\u0026quot; at-head=\u0026quot;--firstElement\u0026quot; at-tail=\u0026quot;--restOfArray\u0026quot;\u0026gt;\u0026lt;/furo-head-tail\u0026gt; Attributes and Properties #  Events #  head #  at-head → {Any}\nFired when Array was splitted, contains the first element of array. tail #  at-tail → Array | Any\nFired when Array was splitted. {Array || Any} is the tail from the injected array (e1 - 1n) Methods #  split #  split(iterable `` ) ⟹ void\n``  → fn-split\nSplits an iterable to its head (first item) and its tail (the rest) parts.\n[\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;] |_| |___________| ^ ^ | | | TAIL =\u0026gt; [\u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;] HEAD =\u0026gt; \u0026quot;a\u0026quot;  iterable    "});index.add({'id':38,'href':'/docs/modules/furo-layout/furo-horizontal-flex/','title':"furo-horizontal-flex",'section':"@furo/layout",'content':"furo-horizontal-flex #  @furo/layout v2.0.7 import '@furo/layout/src/furo-horizontal-flex.js'; exports \u0026lt;furo-horizontal-flex\u0026gt; custom-element-definition superclass LitElement summary horizontal alignment\nfuro-horizontal-flex\nWith this component, any elements can be aligned horizontally. Similar to css flex. The attribute \u0026ldquo;flex\u0026rdquo; must be set for growing elements. The component takes up 100% of the space.\n1 2 3 4 5  \u0026lt;furo-horizontal-flex\u0026gt; \u0026lt;div\u0026gt;small\u0026lt;/div\u0026gt; \u0026lt;div flex\u0026gt;full width\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;small\u0026lt;/div\u0026gt; \u0026lt;/furo-horizontal-flex\u0026gt;   Attributes and Properties #  Methods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. Styling #  The following custom properties available for styling:\n   Custom property Description     --furo-horizontal-flex-space default padding (space)  default: 0.5rem fallback: N/A   --furo-horizontal-flex-bigspace big padding (bigspace) Tags: layout  default: 3rem fallback: N/A    "});index.add({'id':39,'href':'/docs/modules/furo-util/furo-hp-35/','title':"furo-hp-35",'section':"@furo/util",'content':"furo-hp-35 #  @furo/util v2.0.9 import '@furo/util/src/furo-hp-35.js'; exports \u0026lt;furo-hp-35\u0026gt; custom-element-definition extends /src/furo-forth-stack.js superclass FuroForthStack summary calculator component\nhp-35 is a declarative rpn calculator component.\nsee https://hansklav.home.xs4all.nl/rpn/\nhttp://h10032.www1.hp.com/ctg/Manual/c01579350\nAttributes and Properties #  radMode #  radMode Boolean default: false\nSet to true to use rad, default is deg x #  x Number \ncurrent x y #  y Number \ncurrent y z #  z Number \ncurrent z t #  t Number \ncurrent t stack #  stack Array \nthe stack. size #  default: 0\nCurrent size of the stack Events #  stackchange #  at-stackchange → void\nFired when something in stack changes stack-size-changed #  at-stack-size-changed → Number\nFired when the stack size changes with Integer with the current size of the stack. rotated #  at-rotated → the top element\nFired when stack was rotated stack-changed #  at-stack-changed → the top element\nFired when the stack contents changes after put, drop,\u0026hellip; swapped #  at-swapped → void\nFired when stack was swapped empty #  at-empty → void\nFired when stack gets empty Methods #  enter #  enter(n Number ) ⟹ void\nNumber  → fn-enter\nEnter a number\n n    updateXYZT #  updateXYZT() ⟹ void\n* → fn-update-xyzt\n\nswap #  swap() ⟹ void\n* → fn-swap\nswap ( n1 n2 \u0026ndash; n2 n1 )\nswap, as you may have guessed, swaps the top two elements of the stack. For example:\n1 2 3 4 swap will give you:\n1 2 4 3 \u0026lt;- Top\n\nrot #  rot() ⟹ void\n* → fn-rot\nrot ( n1 n2 n3 \u0026ndash; n2 n3 n1 )\nFinally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n1 2 3 rot gives you:\n2 3 1 \u0026lt;- Top\n\nroll #  roll() ⟹ void\n* → fn-roll\nrot ( n1 n2 n3 \u0026ndash; n2 n3 n1 )\nFinally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n1 2 3 rot gives you:\n2 3 1 \u0026lt;- Top\n\nadd #  add(n Number ) ⟹ number\nNumber  → fn-add\nProcess an addition\n n    substract #  substract(n Number ) ⟹ number\nNumber  → fn-substract\nProcess a substraction\n n    sqrt #  sqrt(n Number ) ⟹ number\nNumber  → fn-sqrt\nPerform square root operation\n n    ln #  ln(n Number ) ⟹ number\nNumber  → fn-ln\nPerform log operation\n n    cos #  cos(n Number ) ⟹ number\nNumber  → fn-cos\nPerform cos operation\n n    sin #  sin(n Number ) ⟹ number\nNumber  → fn-sin\nPerform sin operation\n n    tan #  tan(n Number ) ⟹ number\nNumber  → fn-tan\nPerform tan operation\n n    abs #  abs(n Number ) ⟹ number\nNumber  → fn-abs\nPerform abs operation\n n    reciprocal #  reciprocal(n Number ) ⟹ number\nNumber  → fn-reciprocal\nPerform reciprocal operation\n n    exp #  exp(n Number ) ⟹ number\nNumber  → fn-exp\nPerform exp operation\nreturns e^x, where x is the argument, and e is Euler\u0026rsquo;s number (also known as Napier\u0026rsquo;s constant), the base of the natural logarithms.\n n    xroot #  xroot(n `` ) ⟹ void\n``  → fn-xroot\n n    multiply #  multiply(n Number ) ⟹ number\nNumber  → fn-multiply\nProcess a multiplication\n n    pow #  pow(n Number ) ⟹ number\nNumber  → fn-pow\nProcess power\n n    divide #  divide(n Number ) ⟹ number\nNumber  → fn-divide\nProcess a division\n n    clear #  clear() ⟹ void\n* → fn-clear\nclear the stack\n\nclearStack #  clearStack() ⟹ void\n* → fn-clear-stack\nEmpties the stack and set the stack-size to 0\n\nput #  put(e `` ) ⟹ void\n``  → fn-put\nAdd an element to the stack\n e    drop #  drop() ⟹ void\n* → fn-drop\ndrop ( n \u0026ndash; )\ndrop simply drops the top element of the stack. Running:\n1 2 3 drop gives you a stack of:\n1 2 \u0026lt;- Top\n\ndup #  dup() ⟹ void\n* → fn-dup\ndup ( n \u0026ndash; n n )\ndup is short for “duplicate” – it duplicates the top element of the stack. For example, try this out: 1 2 3 dup You should end up with the following stack: 1 2 3 3 \u0026lt;- Top  \nover #  over() ⟹ void\n* → fn-over\nover ( n1 n2 \u0026ndash; n1 n2 n1 )\nover is a bit less obvious: it takes the second element from the top of the stack and duplicates it to the top of the stack. Running this:\n1 2 3 over will result in this:\n1 2 3 2 \u0026lt;- Top\n\nrrot #  rrot() ⟹ void\n* → fn-rrot\nrrot ( n1 n2 n3 \u0026ndash; n3 n1 n2 )\nReverse rotation or right rotation rrot “rotates” the elements of the stack inverse to rot. The top elemen the stack gets moved to the bottom of the stack.\n1 2 3 rot gives you:\n3 1 2 \u0026lt;- Top\n\n"});index.add({'id':40,'href':'/docs/modules/furo-util/furo-interval-pulse/','title':"furo-interval-pulse",'section':"@furo/util",'content':"furo-interval-pulse #  @furo/util v2.0.9 import '@furo/util/src/furo-interval-pulse.js'; exports \u0026lt;furo-interval-pulse\u0026gt; custom-element-definition superclass LitElement summary trigger an event in intervals\nfuro-interval-pulse\nPulses a tick event every interval ms duration and every takt a tock event is also fired.\nAttributes and Properties #  interval #  interval Number default: 200\nDuration of a tact in ms. takt #  takt Number default: 4\nNumber of ticks per tact. auto #  auto Boolean \nStarts interval automatically Events #  tick #  at-tick → Number\nFired on every interval with the position of the pulse starting at 0. tock #  at-tock → Number\nFired nth interval defined by takt. Methods #  start #  start() ⟹ void\n* → fn-start\nStarts the pulsing.\n\nstop #  stop() ⟹ void\n* → fn-stop\nStops the pulsing.\n\n"});index.add({'id':41,'href':'/docs/modules/furo-util/furo-key-filter/','title':"furo-key-filter",'section':"@furo/util",'content':"furo-key-filter #  @furo/util v2.0.9 import '@furo/util/src/furo-key-filter.js'; exports \u0026lt;furo-key-filter\u0026gt; custom-element-definition superclass LitElement mixes FBP summary keyboard event filter\nfuro-key-filter Allows only defined keyboard events to pass through\n1 2 3 4 5 6  \u0026lt;!-- note the asterisk on other-component keydown. Because filter needs the keyboard event. --\u0026gt; \u0026lt;other-component at-keydown=\u0026#34;--keydown(*)\u0026#34;\u0026gt;\u0026lt;/other-component\u0026gt; \u0026lt;furo-key-filter fn-filter=\u0026#34;--keydown\u0026#34; at-matched=\u0026#34;--escapePressed\u0026#34; keys=\u0026#34;Escape\u0026#34; \u0026gt;\u0026lt;/furo-key-filter\u0026gt;   Attributes and Properties #  keys #  keys String \nComa separated list with allowed keys to pass. i.e \u0026ldquo;Enter, ArrowUp\u0026rdquo; shift #  shift Boolean \nModifier key shift must be pressed too to match alt #  alt Boolean \nModifier key alt must be pressed too to match command #  command Boolean \nAlias for meta.\nModifier key meta must be pressed too to match. meta #  meta Boolean \nModifier key meta must be pressed too to match control #  control Boolean \nModifier key control must be pressed too to match Events #  matched #  at-matched → KeyboardEvent\nFired when key matches the options Methods #  filter #  filter(keyboardEvent `` ) ⟹ void\n``  → fn-filter\nCheck the event and dispatch matched when the conditions are fulfilled.\n keyboardEvent    "});index.add({'id':42,'href':'/docs/modules/furo-util/furo-keydown/','title':"furo-keydown",'section':"@furo/util",'content':"furo-keydown #  @furo/util v2.0.9 import '@furo/util/src/furo-keydown.js'; exports \u0026lt;furo-keydown\u0026gt; custom-element-definition superclass LitElement mixes FBP summary keyboard event listener\nfuro-keydown attaches a keypress listener to the parent element and gives you handy events to work with.\nWhen you set alt, ctrl or any of the other arguments, the key event will be triggered only if the corresponding key was pressed too.\n more about keydown\n1 2  \u0026lt;furo-keydown key=\u0026#34;Enter\u0026#34; at-key=\u0026#34;--enterPressed\u0026#34;\u0026gt;\u0026lt;/furo-keydown\u0026gt; \u0026lt;furo-keydown ctrl key=\u0026#34;c\u0026#34; at-key=\u0026#34;--copyRequested\u0026#34;\u0026gt;\u0026lt;/furo-keydown\u0026gt;   Attributes and Properties #  key #  key String \nKey to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c global #  global Boolean \nSet this attribute to listen to the keydown event global (window). alt #  alt Boolean \nalt key must be pressed to trigger the key event. ctrl #  ctrl Boolean \nctrl key must be pressed to trigger the key event. meta #  meta Boolean \nmeta key must be pressed to trigger the key event. shift #  shift Boolean \nshift key must be pressed to trigger the key event. preventDefault #  prevent-default Boolean \nSet this attribute to prevent the event default of the keypress event. stopPropagation #  stop-propagation Boolean \nSet this to true to stop the event propagation of the keypress event. Events #  key #  at-key → KeyboardEvent\nFired when key was catched on target Methods #  "});index.add({'id':43,'href':'/docs/modules/furo-route/furo-location/','title':"furo-location",'section':"@furo/route",'content':"furo-location #  @furo/route v2.1.1 import '@furo/route/src/furo-location.js'; exports \u0026lt;furo-location\u0026gt; custom-element-definition superclass LitElement summary url watcher\nfuro-location watches for URL changes and notifies you. The location object which is fired from furo-location can be used for page navigation in furo-pages or for deep link resolution.\n1 2 3 4 5 6 7 8 9  \u0026lt;furo-location at-location-changed=\u0026#34;--pathChanged\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt; \u0026lt;furo-pages fn-inject-location=\u0026#34;--pathChanged\u0026#34; default=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;view-list name=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/view-list\u0026gt; \u0026lt;view-create name=\u0026#34;create\u0026#34;\u0026gt;\u0026lt;/view-create\u0026gt; \u0026lt;view-detail name=\u0026#34;detail\u0026#34;\u0026gt;\u0026lt;/view-detail\u0026gt; \u0026lt;/furo-pages\u0026gt;   locationObject #  1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;host\u0026#34;: \u0026#34;localhost:8480\u0026#34;, \u0026#34;query\u0026#34;: {\u0026#34;tsk\u0026#34;: 999}, \u0026#34;hash\u0026#34;: {}, \u0026#34;path\u0026#34;: \u0026#34;/detail\u0026#34;, \u0026#34;pathSegments\u0026#34;: [ \u0026#34;detail\u0026#34; ], \u0026#34;hashstring\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;querystring\u0026#34;: \u0026#34;tsk=999\u0026#34; }   Attributes and Properties #  urlSpaceRegex #  url-space-regex string|RegExp default: ''\nA regexp that defines the set of URLs that should be considered part of this web app.\nClicking on a link that matches this regex won\u0026rsquo;t result in a full page navigation, but will instead just update the URL state in place.\nThis regexp is given everything after the origin in an absolute URL. So to match just URLs that start with /app/ do: url-space-regex=\u0026quot;^/app/\u0026quot;\nIf you plan to work in sub directories, you may set url-space-regex=\u0026quot;^${window.APPROOT}/additional/path\u0026quot;. Keep in mind to put a \u0026ldquo;url-space-regex\u0026rdquo; on every furo-location. Otherwise you can not switch between apps in different folders with a link. Events #  location-path-changed #  at-location-path-changed → Location object\nFired when Path portion of the location changed location-hash-changed #  at-location-hash-changed → Location object\nFired when Hash portion of the location changed location-query-changed #  at-location-query-changed → Location object\nFired when Query portion of the location changed location-changed #  at-location-changed → Location object\nFired when something in the location changed external-link-clicked #  at-external-link-clicked → Location object\nFired when a external link was clicked url-space-entered #  at-url-space-entered → Location object\nFired when the path matches the url-space-regex and neither a search query or hash was given, useful to detect if someone enters the current url __beforeReplaceState #  at-__beforeReplaceState → void\nFired when before the state will be updated Methods #  "});index.add({'id':44,'href':'/docs/modules/furo-route/furo-location-updater/','title':"furo-location-updater",'section':"@furo/route",'content':"furo-location-updater #  @furo/route v2.1.1 import '@furo/route/src/furo-location-updater.js'; exports \u0026lt;furo-location-updater\u0026gt; custom-element-definition superclass LitElement mixes FBP summary deep linking helper\nfuro-location-updater updates parts of the url location with pushState\nYou can set query params and hashes. Use this component for proper deep linking. The furo-location component will fire the location events as usual.\n1 2 3 4 5  \u0026lt;furo-location-updater fn-set-qp=\u0026#34;--QueryParamKeyValuePairs\u0026#34; fn-set-hash=\u0026#34;--HashKeyValuePairs\u0026#34;\u0026gt;\u0026lt;/furo-location-updater\u0026gt;   Attributes and Properties #  clearQp #  clear-qp String \nComma separated list of qp keys to clear if they are not explicitly set with fn-set-qp clearHash #  clear-hash String \nComma separated list of hashes to clear if they are not explicitly set with fn-set-hash Events #  __beforeReplaceState #  at-__beforeReplaceState → Number\nFired when before the state will be updated, with window.performance.now(). Methods #  setQp #  setQp(newQP `` ) ⟹ void\n``  → fn-set-qp\nSet query params by giving an object with key-value pairs.\nKeep in mind, that this values goes to the url, so setting objects as values is not a good idea\n newQP    setHash #  setHash(newHASH `` ) ⟹ void\n``  → fn-set-hash\nSet hash values by giving an object with key-value pairs.\nKeep in mind, that this values goes to the url, so setting objects as values is not a good idea\n newHASH    "});index.add({'id':45,'href':'/docs/modules/furo-util/furo-markdown/','title':"furo-markdown",'section':"@furo/util",'content':"furo-markdown #  @furo/util v2.0.9 import '@furo/util/src/furo-markdown.js'; exports \u0026lt;furo-markdown\u0026gt; custom-element-definition superclass LitElement summary renders markdown data\nfuro-markdown Renders given md data with parseMarkdown or loads a md file with mdsrc=\u0026quot;source.md\u0026quot;\nAttributes and Properties #  mdsrc #  mdsrc String \nsource of the md markdown #  markdown String \nmarkdown string markdownRendered #  default: undefined\n\nunsafe #  unsafe Boolean \nallow unsafe md. (writing html, components,\u0026hellip;) Methods #  fetchMd #  fetchMd(src `` ) ⟹ Promise\u0026amp;lt;string | never\u0026amp;gt;\n``  → fn-fetch-md\nfetch markdown from a url or path\n src    parseMarkdown #  parseMarkdown(markdown `` ) ⟹ void\n``  → fn-parse-markdown\nParse markdown string to html content\n markdown    "});index.add({'id':46,'href':'/docs/modules/furo-util/furo-navigation-pad/','title':"furo-navigation-pad",'section':"@furo/util",'content':"furo-navigation-pad #  @furo/util v2.0.9 import '@furo/util/src/furo-navigation-pad.js'; exports \u0026lt;furo-navigation-pad\u0026gt; custom-element-definition superclass LitElement mixes FBP summary keyboard navigation helper\nfuro-navigation-pad listens to different keyboard navigation events like the arrow keys. It will attach the listeners to the parent node and cancel the default and stop the propagation of the events.\nThe events are available as standalone events or as combined event in the navigated event.\n1 2 3 4 5  \u0026lt;!-- forward all navigation events except the Escape --\u0026gt; \u0026lt;furo-navigation-pad ignored-keys=\u0026#34;Escape\u0026#34; at-navigated=\u0026#34;--navpad\u0026#34; \u0026gt;\u0026lt;/furo-navigation-pad\u0026gt;   Attributes and Properties #  ignoredKeys #  ignored-keys String \nEnter the keys you want to ignore as comma seperated values.\ni.e. \u0026ldquo;Escape, ArrowLeft\u0026rdquo; Events #  navigated #  at-navigated → String\nGeneric navigation event, fired when one of the navigation keys was pressed, detail contains one of these: Escape | Enter | ArrowDown | ArrowUp |ArrowLeft|ArrowRight| PageUp | PageDown | Home | End enter-pressed #  at-enter-pressed → KeyboardEvent\nFired when Enter key was pressed. arrow-down-pressed #  at-arrow-down-pressed → KeyboardEvent\nFired when ArrowDown key was pressed. arrow-up-pressed #  at-arrow-up-pressed → KeyboardEvent\nFired when ArrowUp key was pressed. arrow-left-pressed #  at-arrow-left-pressed → KeyboardEvent\nFired when ArrowLeft key was pressed. arrow-right-pressed #  at-arrow-right-pressed → KeyboardEvent\nFired when ArrowRight key was pressed. escape-pressed #  at-escape-pressed → KeyboardEvent\nFired when Escape key was pressed. page-up-pressed #  at-page-up-pressed → KeyboardEvent\nFired when PageUp key was pressed. page-down-pressed #  at-page-down-pressed → KeyboardEvent\nFired when PageDown key was pressed. home-pressed #  at-home-pressed → KeyboardEvent\nFired when Home key was pressed. end-pressed #  at-end-pressed → KeyboardEvent\nFired when End key was pressed. Methods #  "});index.add({'id':47,'href':'/docs/modules/furo-route/furo-pages/','title':"furo-pages",'section':"@furo/route",'content':"furo-pages #  @furo/route v2.1.1 import '@furo/route/src/furo-pages.js'; exports \u0026lt;furo-pages\u0026gt; custom-element-definition superclass LitElement summary Simple content switcher\nUse furo-pages to build tabs, views, subviews,\u0026hellip;\npreconditions #  The components used in a furo-page must implement a hidden attribute css to set itself to display none.\n1 2 3  :host([hidden]){ display:none }   usage #  1 2 3 4 5 6 7 8  \u0026lt;furo-pages fn-inject-location=\u0026#34;--locationChanged\u0026#34; default=\u0026#34;home\u0026#34;\u0026gt; \u0026lt;page-home name=\u0026#34;home\u0026#34;\u0026gt;\u0026lt;/page-home\u0026gt; \u0026lt;other-page name=\u0026#34;more\u0026#34;\u0026gt;\u0026lt;/other-page\u0026gt; \u0026lt;view-404 name=\u0026#34;404\u0026#34;\u0026gt;\u0026lt;/view-404\u0026gt; \u0026lt;/furo-pages\u0026gt; \u0026lt;furo-location at-location-changed=\u0026#34;--locationChanged\u0026#34;\u0026gt;\u0026lt;/furo-location\u0026gt;   If the url is / or /home, page-home is displayed. If the url is /more, other-page is displayed. If the url does not match any of the names and a 404 is available, the 404 is displayed.\nflowbased auto wires #  furo-pages provides auto wires, which are automatically triggered in the child elements if they support FBP. Each wire will forward a locationObject\n --pageActivated : Is triggered when the element is activated. --pageDeActivated : Is triggered when another page is activated. Empty wire. --pageQueryChanged : Is triggered when the page query changes. --pageHashChanged : Is triggered when the page hash changes. --pageReActivated : Is triggered when the locatioin contains the same page which already was activated.  Attributes and Properties #  default #   Set the default page to show. Methods #  activatePage #  activatePage(pageName *String* ) ⟹ void\n   → fn-activate-page\nActivate a page by name\n pageName  String pageName   injectLocation #  injectLocation(location `` ) ⟹ void\n``  → fn-inject-location\nInject the location Object from furo-location. The page which is defined in location.pathSegments[0] will get activated.\nTo meke \u0026ldquo;sub\u0026rdquo; pages do not forget to enable the url-space-regex property on the furo-location component which feeds this component.\nIf the page/view does not exist and you have a page \u0026ldquo;404\u0026rdquo; defined, the 404 will be shown\nIf the page/view does not exist AND 404 does not exist, the default page gets activated.\n location    Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add pages. "});index.add({'id':48,'href':'/docs/modules/furo-route/furo-panel-coordinator/','title':"furo-panel-coordinator",'section':"@furo/route",'content':"furo-panel-coordinator #  @furo/route v2.1.1 import '@furo/route/src/furo-panel-coordinator.js'; exports \u0026lt;furo-panel-coordinator\u0026gt; custom-element-definition superclass LitElement mixes FBP summary Complex content switcher based on furo-tree\nfuro-panel-coordinator\nAttributes and Properties #  Events #  controls-ready #  at-controls-ready → RepeaterNode\nFired when Controls for panels are ready, initially it starts with an empty set. Methods #  showPage #  showPage(NavigationNode `` ) ⟹ Promise\u0026amp;lt;void\u0026amp;gt;\n``  → fn-show-page\nLoads and shows the page based on the NavigationNode\n NavigationNode    closeAll #  closeAll() ⟹ void\n* → fn-close-all\nThis will trigger a close-request event all panels. Which should close themself then.\n\nforceCloseAll #  forceCloseAll() ⟹ void\n* → fn-force-close-all\ncloses all open panels without asking\n\n"});index.add({'id':49,'href':'/docs/modules/furo-util/furo-pretty-json/','title':"furo-pretty-json",'section':"@furo/util",'content':"furo-pretty-json #  @furo/util v2.0.9 import '@furo/util/src/furo-pretty-json.js'; exports \u0026lt;furo-pretty-json\u0026gt; custom-element-definition superclass LitElement mixes FBP summary pretty prints json data\nfuro-pretty-json Pretty json with highlighting\n1 2  \u0026lt;furo-pretty-json fn-inject-json=\u0026#34;--data\u0026#34;\u0026gt;\u0026lt;/furo-pretty-json\u0026gt;   Attributes and Properties #  Methods #  injectData #  injectData(json JSON ) ⟹ void\nJSON  → fn-inject-data\nInject JSON data\n json Json literal   "});index.add({'id':50,'href':'/docs/modules/furo-util/furo-put-clipboard/','title':"furo-put-clipboard",'section':"@furo/util",'content':"furo-put-clipboard #  @furo/util v2.0.9 import '@furo/util/src/furo-put-clipboard.js'; exports \u0026lt;furo-put-clipboard\u0026gt; custom-element-definition superclass LitElement summary write content to clipboard\nfuro-put-clipboard put content to the clipboard of the OS.\n1 2 3 4 5 6  \u0026lt;furo-put-clipboard json fn-trigger=\u0026#34;--data\u0026#34; at-content-put=\u0026#34;--contentInClipboard\u0026#34; \u0026gt;\u0026lt;/furo-put-clipboard\u0026gt;   Attributes and Properties #  json #  json Boolean \nStringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention. Events #  content-put #  at-content-put → *\nFired when content is written to clipboard Methods #  setData #  setData(data Object ) ⟹ void\nObject  → fn-set-data\nSet data that you want to put to clipboard.\n data Serializable data to put   trigger #  trigger(data Object|null ) ⟹ void\nObject|null  → fn-trigger\nWrite data to the clipboard\nIf you trigger without data, the data which sas set with setData will be written to the clipboard.\n data Serializable data   "});index.add({'id':51,'href':'/docs/modules/furo-data/furo-rel-exists/','title':"furo-rel-exists",'section':"@furo/data",'content':"furo-rel-exists #  @furo/data v2.3.0 import '@furo/data/src/furo-rel-exists.js'; exports \u0026lt;furo-rel-exists\u0026gt; custom-element-definition superclass LitElement summary checks for a specific rel\nfuro-rel-exists Checks if a hateoas relation exists in a given hateaos Links array.\n1  \u0026lt;furo-rel-exists rel=\u0026#34;update\u0026#34; service=\u0026#34;person.Personservice\u0026#34; fn-inject=\u0026#34;--HTS-array\u0026#34;\u0026gt;\u0026lt;/furo-rel-exists\u0026gt;   Attributes and Properties #  rel #  rel String \nName of the rel service #  service String \ndefine the service if you want a specific check on the service also Events #  furo-rel-exists #  at-furo-rel-exists → Object Hateoas Link\nFired when rel exists in linkArray. rel-dont-exist #  at-rel-dont-exist → void\nFired when rel does not exists in linkArray. Methods #  inject #  inject(linkArray [furo.Link] ) ⟹ boolean\n[furo.Link]  → fn-inject\nInject a HTS Link Array to receive a rel-exist or a rel-dont-exist event.\ninject returns true for existing links and false for non existing links. TODO: implement bind data too TODO: emit a event with bool which is triggered on any change of the hts array or binded data\n linkArray Array of furo links   "});index.add({'id':52,'href':'/docs/modules/furo-layout/furo-resizer/','title':"furo-resizer",'section':"@furo/layout",'content':"furo-resizer #  @furo/layout v2.0.7 import '@furo/layout/src/furo-resizer.js'; exports \u0026lt;furo-resizer\u0026gt; custom-element-definition superclass LitElement mixes FBP summary resizable box\nfuro-resizer container which let you resize its width.\nDouble-click on the handler to reset the width. You need a counter part which flexes.\n1 2 3 4 5 6 7  \u0026lt;furo-horizontal-flex\u0026gt; \u0026lt;div flex\u0026gt; the flexible part \u0026lt;/div\u0026gt; \u0026lt;!-- you have to set at leas one handle to resize the content --\u0026gt; \u0026lt;furo-resizer righthandle remember=\u0026#34;logv\u0026#34; minwidth=\u0026#34;280\u0026#34; maxwidth=\u0026#34;780\u0026#34;\u0026gt; \u0026lt;some-content\u0026gt;\u0026lt;/some-content\u0026gt; \u0026lt;/furo-resizer\u0026gt; \u0026lt;/furo-horizontal-flex\u0026gt;   Attributes and Properties #  resetSize #   removes remember and set to the initial size lefthandle #  lefthandle Boolean \nadd a handle to the left side righthandle #  righthandle Boolean \nadd a handle to the right side remember #  remember String \nremember the size after resizing. Give the id for the rememberer, you can use the id on different views maxwidth #  maxwidth Number \nSet the maximal width of the resizer minwidth #  minwidth Number \nSet the minimal width of the resizer Methods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. "});index.add({'id':53,'href':'/docs/modules/furo-data/furo-reverse-deep-link/','title':"furo-reverse-deep-link",'section':"@furo/data",'content':"furo-reverse-deep-link #  @furo/data v2.3.0 import '@furo/data/src/furo-reverse-deep-link.js'; exports \u0026lt;furo-reverse-deep-link\u0026gt; custom-element-definition superclass LitElement summary create query param object from HATEOAS\nConverts hateoas to queryParams, which is useful for routing with app-flow\n1 2 3 4 5  \u0026lt;furo-reverse-deep-link service=\u0026#34;TaskService\u0026#34; rel=\u0026#34;self\u0026#34; at-converted=\u0026#34;--queryParams\u0026#34; fn-convert=\u0026#34;--rawEntityOrCollection, --linksArray, --linkObject\u0026#34; \u0026gt;\u0026lt;/furo-reverse-deep-link\u0026gt;   Attributes and Properties #  service #  service String default: ''\nName of service rel #  rel String \nOptional rel to convert.\nNot needed if you inject a link object.\nIf you insert an entity rel self is taken. If you insert a collection, rel list is used. Events #  converted #  at-converted → QueryParams\nFired when input was converted. Methods #  convert #  convert(data object ) ⟹ object\nobject  → fn-convert\nconverts the href of a LinkObject\nreturns Error on undefined service\n data rawEntity|rawCollection   "});index.add({'id':54,'href':'/docs/modules/furo-util/furo-show-flow/','title':"furo-show-flow",'section':"@furo/util",'content':"furo-show-flow #  @furo/util v2.0.9 import '@furo/util/src/doc/graph/furo-show-flow.js'; exports \u0026lt;furo-show-flow\u0026gt; custom-element-definition superclass LitElement mixes FBP summary internal helper component\nfuro-show-flow Renders a flow from dom node or html source\nAttributes and Properties #  Methods #  parseHtml #  parseHtml(source string ) ⟹ void\nstring  → fn-parse-html\nParse html content\n source    parseTemplate #  parseTemplate(template `` dom dom ) ⟹ void\n`` dom  → fn-parse-template\nParse a dom node\n template  dom node   "});index.add({'id':55,'href':'/docs/modules/furo-layout/furo-split-view/','title':"furo-split-view",'section':"@furo/layout",'content':"furo-split-view #  @furo/layout v2.0.7 import '@furo/layout/src/furo-split-view.js'; exports \u0026lt;furo-split-view\u0026gt; custom-element-definition superclass LitElement mixes FBP summary splitted layout\nfuro-split-view is a layout component to visualise main / detail views (left right layout for master detail views). You can add the attribute scroll on the detail view to make the content scrollable.\n1 2 3 4  \u0026lt;furo-split-view\u0026gt; \u0026lt;div slot=\u0026#34;master\u0026#34;\u0026gt;Master\u0026lt;/div\u0026gt; \u0026lt;big-component scroll\u0026gt; \u0026lt;/big-component\u0026gt; \u0026lt;/furo-split-view\u0026gt;   Attributes and Properties #  reverse #  reverse Boolean \nflip the left and right side Methods #  Slots #  master #  Type: HTMLElement [0..n]\ndefault slot to add content to the main section. default #  Type: HTMLElement [0..n]\ndefault slot to add content to the detail section. Styling #  The following custom properties available for styling:\n   Custom property Description     --split-master-width width of the master slot  default: 270px fallback: N/A    "});index.add({'id':56,'href':'/docs/modules/furo-data/furo-type-renderer/','title':"furo-type-renderer",'section':"@furo/data",'content':"furo-type-renderer #  @furo/data v2.3.0 import '@furo/data/src/furo-type-renderer.js'; exports \u0026lt;furo-type-renderer\u0026gt; custom-element-definition superclass LitElement mixes FBP summary dynamic type rendering\nThe furo-type-renderer is used to display type specific data. It uses display as default context and will warn you on the console if the requested context-[type-name] does not exist or was not imported.\nThere is a standard set of display components @furo/ui5/src/standard-type-renderers for rendering the individual types.\nThe standard ui5 set can be integrated with the import\n import \u0026lsquo;@furo/ui5/src/standard-type-renderers/display-registry.js\u0026rsquo;.  The standard material set can be integrated with the import\n import \u0026lsquo;@furo/data-ui/src/standard-type-renderers/display-registry.js\u0026rsquo;.  If you want to implement an individual display of a type, you need your own context-[type-name] component and import it.\nfor repeated fields you should write your own context-[type-name]-repeated component and import it. If no context-[type-name]-repeated exists, the renderer will use the display-[type] component as fallback and display it repeatedly, this is ok for a lot of cases.\nNaming convention #  display-google-type-timeofday ------- --------------------- | | context type-name # examples: cell-string celledit-string display-string yourcontext-string The method to evaluate the renderer is built as following: context-[(package.type).replaceAll('.', '-').toLocaleLowerCase()] Basic Usage #  1  \u0026lt;furo-type-renderer fn-bind-data=\u0026#34;--dao(*.data.fieldname)\u0026#34;\u0026gt;\u0026lt;/furo-type-renderer\u0026gt;   Writing your own renderer #  The only API you need to implement in your component is the bindData() method. You just have to follow the naming convention for your renderer.\nAttributes and Properties #  context #  context String default: 'display'\nSet the context if you need another then display. Prebuilt context renderers exist for display, cell, celledit. disabled #  disabled Boolean \nA Boolean attribute which, if present, means this field is displayed in disabled state. Methods #  bindData #  bindData(fieldNode FieldNode ) ⟹ void\nFieldNode  → fn-bind-data\nBind a fieldnode of any type\n fieldNode Fieldnode of any type   "});index.add({'id':57,'href':'/docs/modules/furo-layout/furo-vertical-flex/','title':"furo-vertical-flex",'section':"@furo/layout",'content':"furo-vertical-flex #  @furo/layout v2.0.7 import '@furo/layout/src/furo-vertical-flex.js'; exports \u0026lt;furo-vertical-flex\u0026gt; custom-element-definition superclass LitElement summary vertical alignment\nfuro-vertical-flex\nWith this component, any elements can be aligned vertically. Similar to css flex. The attribute \u0026ldquo;flex\u0026rdquo; must be set for growing elements. The component takes up 100% of the space\n1 2 3 4 5  \u0026lt;furo-vertical-flex\u0026gt; \u0026lt;div\u0026gt;small\u0026lt;/div\u0026gt; \u0026lt;div flex\u0026gt;full width\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;small\u0026lt;/div\u0026gt; \u0026lt;/furo-vertical-flex\u0026gt;   Tags: layout\nAttributes and Properties #  Methods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. "});index.add({'id':58,'href':'/docs/modules/furo-layout/furo-vertical-scroller/','title':"furo-vertical-scroller",'section':"@furo/layout",'content':"furo-vertical-scroller #  @furo/layout v2.0.7 import '@furo/layout/src/furo-vertical-scroller.js'; exports \u0026lt;furo-vertical-scroller\u0026gt; custom-element-definition superclass LitElement mixes FBP summary vertical scroll\nfuro-vertical-scroller\n1 2 3  \u0026lt;furo-vertical-scroller\u0026gt; \u0026lt;your-content\u0026gt;\u0026lt;/your-content\u0026gt; \u0026lt;/furo-vertical-scroller\u0026gt;   Attributes and Properties #  Methods #  Slots #  default #  Type: HTMLElement [0..n]\ndefault slot to add content. Styling #  The following custom properties available for styling:\n   Custom property Description     --surface Background color scrollbar  default: white fallback: N/A   --on-surface Background color of the draggable scrolling element  default: black fallback: N/A    "});index.add({'id':59,'href':'/docs/modules/furo-util/light-bulb/','title':"light-bulb",'section':"@furo/util",'content':"light-bulb #  @furo/util v2.0.9 import '@furo/util/src/doc/light-bulb.js'; exports \u0026lt;light-bulb\u0026gt; custom-element-definition superclass LitElement mixes FBP summary a light bulb for the documentation\nlight-bulb\nThis component is for the documentation\nAttributes and Properties #  on #  on Boolean \nSwitch on the bulb off #  off reflects Boolean default: true\nSwitch of the bulb color #  default: \u0026quot;#fee753\u0026quot;\n\nMethods #  setColor #  setColor(color `` ) ⟹ void\n``  → fn-set-color\n color    toggle #  toggle() ⟹ void\n* → fn-toggle\ntoggles the light bulb on off\n\n"});index.add({'id':60,'href':'/docs/modules/furo-data/','title':"@furo/data",'section':"Packages",'content':"@furo/data #  @furo/data v2.3.0 Furo data components\nThese are probably the most important components of the furo web components.\nThe components builds the bridge from the ui implementations to the data sources by respecting the specs.\nThe agents in this module are responsible to communicate directly with the specified sources and will feed the data object with the needed data. furo-api-fetch, which is also used by the agents, can fetch any data from any sources and do the error and success \u0026ldquo;handling\u0026rdquo;.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) flowchart LR I1(Input Component) -. data binding --- DO(Data Object); I2(Custom Component) -. data binding --- DO(Data Object); DO -- set data -- A(Entity Agent); A -- updates -- DO; A API[(Rest API)]; SB(Save Button) -- triggers -- A LB(Load Button) -- triggers -- A Shematic flow\nInstallation #  npm:\n1  npm i -S @furo/data`   What is inside #  Components #    furo-api-fetch fetch data from network  furo-collection-agent interface component to handle collection requests  furo-custom-method interface component to handle custom methods  furo-data-flow-repeat automatic display of repeated fields  furo-data-hide-content hide content with a boolean fieldnode  furo-data-object Typed data object  furo-deep-link Resolve deep links HATEOAS based on query params  furo-entity-agent interface component to handle entity requests  furo-entity-field interact with single field of a data object  furo-hateoas-state disables or hide nodes based on hts  furo-rel-exists checks for a specific rel  furo-reverse-deep-link create query param object from HATEOAS  furo-type-renderer dynamic type rendering  "});index.add({'id':61,'href':'/docs/modules/furo-fbp/','title':"@furo/fbp",'section':"Packages",'content':"@furo/fbp #  @furo/fbp v6.3.2 Declarative programming with web-components.\nフロー Furo Flow Based Programming #  enables you to write your web applications following the flow based programming paradigm.\nFully Declarative - No “Code” needed #  Instead of writing hundreds of lines of code with HTML element selectors and attaching EventListeners to them to write another HTML element selector for calling a simple method, simply express your intention and string them together.\n Learn more about furo fbp\nInstallation #  npm:\n1  npm i -S @furo/fbp`   What is inside #  Components #    empty-fbp-node  flow-bind Custom element to allow using furo-fbp's template features in a html document.  flow-repeat Custom element to allow using FBPs template features in repeated template  "});index.add({'id':62,'href':'/docs/modules/furo-framework/','title':"@furo/framework",'section':"Packages",'content':"@furo/framework #  @furo/framework v2.1.2 Furo framework libs\nInstallation #  npm:\n1  npm i -S @furo/framework`   What is inside #  Components #  "});index.add({'id':63,'href':'/docs/modules/furo-layout/','title':"@furo/layout",'section':"Packages",'content':"@furo/layout #  @furo/layout v2.0.7 Layout components for furo\nInstallation #  npm:\n1  npm i -S @furo/layout`   What is inside #  Components #    furo-backdrop-display Display component for furo-backdrop  furo-backdrop show content with backdrop  furo-empty-spacer fill the space in a furo-xxxx-flex  furo-form-layouter Grid based form field row  furo-horizontal-flex horizontal alignment  furo-resizer resizable box  furo-split-view splitted layout  furo-vertical-flex vertical alignment  furo-vertical-scroller vertical scroll  "});index.add({'id':64,'href':'/docs/modules/furo-route/','title':"@furo/route",'section':"Packages",'content':"@furo/route #  @furo/route v2.1.1 Routing components\nInstallation #  npm:\n1  npm i -S @furo/route`   What is inside #  Components #    furo-app-flow-router Application Flow =\u0026gt; routing  furo-app-flow Application Flow =\u0026gt; routing  furo-document-title Document title  furo-location-updater deep linking helper  furo-location url watcher  furo-pages Simple content switcher  furo-panel-coordinator Complex content switcher based on furo-tree  "});index.add({'id':65,'href':'/docs/modules/furo-util/','title':"@furo/util",'section':"Packages",'content':"@furo/util #  @furo/util v2.0.9 package sample\nInstallation #  npm:\n1  npm i -S @furo/util`   What is inside #  Components #    furo-config-loader load config files  furo-config config access  furo-de-bounce event de bouncer  furo-feature-toggle flow based handler for feature toggles  furo-fetch-json fetch json data  furo-forth-stack forth like stack  furo-get-clipboard get clipboard content  furo-head-tail split an array  furo-hp-35 calculator component  furo-interval-pulse trigger an event in intervals  furo-key-filter keyboard event filter  furo-keydown keyboard event listener  furo-markdown renders markdown data  furo-navigation-pad keyboard navigation helper  furo-pretty-json pretty prints json data  furo-put-clipboard write content to clipboard  furo-demo-snippet documentation helper  light-bulb a light bulb for the documentation  furo-graph-renderer paints a dagree graph as svg  furo-show-flow internal helper component  "});index.add({'id':66,'href':'/docs/modules/furo-data/AgentHelper/','title':"AgentHelper",'section':"@furo/data",'content':"AgentHelper #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/AgentHelper.js'; exports AgentHelper js\n This is a helper class for the agents #  Update query params a qp like {\u0026ldquo;active\u0026rdquo;:true} will just update the qp active\nIf the current value of the qp is not the same like the injected value, a qp-changed event will be fired\nAttributes and Properties #  Methods #  updateQp #  updateQp(caller *qp* ) ⟹ void\n caller  qp    setQp #  setQp(caller Object qp QueryParams ) ⟹ void\nSet query params All existing query params are replaced by the transferred parameters If the transferred object is empty or undefined, all the values will be removed!\n caller caller qp Queryparam Object   getParams #  getParams(caller *link* ) ⟹ Object\nget existing params from href and append query params\n caller  link    rebuildQPFromParams #  rebuildQPFromParams(params `` ) ⟹ []\nrebuild qp from params\n params    generateHeaderAccept #  generateHeaderAccept(caller *services* rel `` ) ⟹ string\ngenerate accept field for header\n caller  services  rel    generateReq #  generateReq(link *qp* ) ⟹ string\ngenerate request url from original link and qp\n link  qp    "});index.add({'id':67,'href':'/docs/modules/furo-route/BasePanel/','title':"BasePanel",'section':"@furo/route",'content':"BasePanel #  @furo/furo-route v2.1.1 import '@furo/route/src/lib/BasePanel.js'; exports BasePanel js superclass LitElement mixes FBP\n Extend BasePanel to build a panel which is controllable by furo-panel-coordinator.\nAttributes and Properties #  onCloseRequest #   Callback function to interact with close requests Return a true if closing is allowed or false if not Methods #  closePanel #  closePanel() ⟹ void\nClose the panel\n\n"});index.add({'id':68,'href':'/docs/modules/furo-util/Config/','title':"Config",'section':"@furo/util",'content':"Config #  @furo/furo-util v2.0.9 import '@furo/util/src/lib/Config.js'; exports Config js\n Config Class for furo-config. Not intended for direct usage.\nAttributes and Properties #  Methods #  append #  append(section *obj* ) ⟹ void\n section  obj    deepCreate #  deepCreate(parent *section* obj `` ) ⟹ void\ncreate nodes a long they are objects\n parent  section  obj    watch #  watch(section *cb* ) ⟹ void\n section  cb    "});index.add({'id':69,'href':'/docs/modules/furo-data/DataObject/','title':"DataObject",'section':"@furo/data",'content':"DataObject #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/DataObject.js'; exports DataObject js superclass EventTreeNode\n EntityNode is usually the root node of an eventTree\nAttributes and Properties #  rawEntity #   \n_value #   This setter aliases to injectRaw. Added for compatibility reasons for the FieldNodeAdapter _spec #  default: this.__specdefinitions[type]\n\n_type #  default: type\n\n_pristine #  default: true\n\n_isValid #  default: true\n\nMethods #  validateAllFields #  validateAllFields() ⟹ void\n\nclearAllErrors #  clearAllErrors() ⟹ void\nclears all errors on every fieldnode\n\nsetAllToPristine #  setAllToPristine() ⟹ void\nset all children to pristine useful for deltas\n\ninjectRaw #  injectRaw(rawEntity `` ) ⟹ void\ninjects a raw model e.g. body data of a collection or entity\n rawEntity    reset #  reset() ⟹ void\nResete zum letzten injected state zurück\n\n_hasAncestorOfType #  _hasAncestorOfType(type `` ) ⟹ void\n type    getJson #  getJson() ⟹ *\nReturns a json representation of your Data Object\n\ngetValidityMessage #  getValidityMessage() ⟹ {}\nReturns a json representation of all field validity messages\n\n_updateFieldValuesAndMetaFromRawEntity #  _updateFieldValuesAndMetaFromRawEntity(node *data* ) ⟹ void\n node  data    _setInvalid #  _setInvalid(error `` ) ⟹ void\n error    toString #  toString() ⟹ void\n\n"});index.add({'id':70,'href':'/docs/modules/furo-fbp/DOMFBP/','title':"DOMFBP",'section':"@furo/fbp",'content':"DOMFBP #  @furo/furo-fbp v6.3.2 import '@furo/fbp/src/DOMFBP.js'; exports DOMFBP js extends src/DOMFBP.js mixes FBP\n DOMFBP allows you to append FBP to any dom element.\nUsage:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@2.3.0/dist/furo-fbp.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; import(\u0026#34;https://cdn.jsdelivr.net/npm/@furo/precompiled@2.3.0/dist/DOMFBP.js\u0026#34;).then(() =\u0026gt; { // activate FBP on body  const fbphandle = new DOMFBP(document.body) // enable tracing  fbphandle._FBPTraceWires(); }) \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button at-click=\u0026#34;--buttonClicked\u0026#34; fn-remove=\u0026#34;--buttonClicked\u0026#34;\u0026gt;remove me\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6  import {DOMFBP} from \u0026#39;@furo/fbp/src/DOMFBP.js\u0026#39;; // append fbp to the body new DOMFBP(document.body);   Attributes and Properties #  Methods #  "});index.add({'id':71,'href':'/docs/modules/furo-util/EmptyStackError/','title':"EmptyStackError",'section':"@furo/util",'content':"EmptyStackError #  @furo/furo-util v2.0.9 import '@furo/util/src/lib/EmptyStackError.js'; exports EmptyStackError js extends src/lib/EmptyStackError.js superclass Error\n Error for the furo-forth-stack component.\nAttributes and Properties #  Methods #  "});index.add({'id':72,'href':'/docs/modules/furo-framework/Env/','title':"Env",'section':"@furo/framework",'content':"Env #  @furo/furo-framework v2.1.2 import '@furo/framework/src/environment.js'; exports Env js\n This class stores your environment data,\n like the api services and types, which is used by the data components the current locale, which is used by the i18n package the acceptLanguage, which is used by the data components  Attributes and Properties #  Methods #  "});index.add({'id':73,'href':'/docs/modules/furo-fbp/FBP/','title':"FBP",'section':"@furo/fbp",'content':"FBP #  @furo/furo-fbp v6.3.2 import '@furo/fbp/src/fbp.js'; exports FBP js\n Attributes and Properties #  Methods #  "});index.add({'id':74,'href':'/docs/modules/furo-fbp/FbpBreakpoints/','title':"FbpBreakpoints",'section':"@furo/fbp",'content':"FbpBreakpoints #  @furo/furo-fbp v6.3.2 import '@furo/fbp/src/FbpBreakpoints.js'; exports FbpBreakpoints js\n Attributes and Properties #  Methods #  SetBreakpoints #  SetBreakpoints(breakpoints `` ) ⟹ void\n breakpoints    Breakpoints #  Breakpoints() ⟹ void\n\nGetElementByPath #  GetElementByPath(path `` ) ⟹ *\nThis will get the DOM Node for a path produced by FBP._getDomPath\n path    "});index.add({'id':75,'href':'/docs/modules/furo-data/FieldNode/','title':"FieldNode",'section':"@furo/data",'content':"FieldNode #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/FieldNode.js'; exports FieldNode js superclass EventTreeNode\n internal events #   this-field-became-invalid, when a field gets invalid field-became-invalid bubbles, when a field gets invalid this-field-became-valid, when a field gets valid field-became-valid bubbles, when a field gets valid this-field-value-changed, when the value of a field changed field-value-changed bubbles, when the value of a field changed this-metas-changed, when the metas of a field changed metas-changed bubbles, when the meta of a field changed oneof-field-cleared, when a field in a oneof group was cleared oneof-field-changed, when a field in a oneof group was changed this-node-field-added, when a sub field was added to a field node-field-added bubbles, when a sub field was added to a field this-node-field-deleted, when a sub field was added to a field node-field-deleted bubbles, when a sub field was added to a field any-type-removed, fired before a node of type any changes its inner type any-type-created, fired when a node of type any is created or the type was changed  internal broadcasted events #   parent-readonly-meta-set, when readonly was set on a parent field  Attributes and Properties #  defaultvalue #   Set the value of the field to the specified defaults. _spec #  default: { type: vType }\nReference to the current spec definition of the fieldNode _pristine #  default: true\nPristine state of the fieldNode, this is always set to true when new data is injected and is false if the value itself or the value of a child node gets changed. _isValid #  default: true\nValidity of the fieldNode, this is always set to true when new data is injected and is false if the value itself validates to false or the value of a child node validates to false. Methods #  createField #  createField(options \u0026amp;#34;fieldName\u0026amp;#34; ) ⟹ void\ncreate a field in a FieldNode, this is useful when using map\u0026lt;string,something\u0026gt; set the value option to init with values\n options :\u0026quot;name\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;string\u0026quot;, \u0026quot;spec\u0026quot;:{..}} spec is optional   moveNode #  moveNode(oldIndex *newIndex* ) ⟹ void\n oldIndex  newIndex    reinit #  reinit() ⟹ void\nsets the field to the initial values from the spec default values are applied\n\n_createVendorType #  _createVendorType(type `` ) ⟹ void\n type    _checkConstraints #  _checkConstraints(event `` ) ⟹ void\n event    _createAnyType #  _createAnyType(val `` ) ⟹ void\n val    _updateKeyValueMap #  _updateKeyValueMap(val *spec* ) ⟹ void\n val  spec    deleteNode #  deleteNode() ⟹ void\ndeletes the fieldnode\n\n_clearInvalidity #  _clearInvalidity() ⟹ void\n\ntoString #  toString() ⟹ void\n\n"});index.add({'id':76,'href':'/docs/modules/furo-data/FieldNodeAdapter/','title':"FieldNodeAdapter",'section':"@furo/data",'content':"FieldNodeAdapter #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/FieldNodeAdapter.js'; exports FieldNodeAdapter js\nBinding methods for fieldNodes\nUse this class to make your component bindable without handling with the internals of FieldNode.\nRead more in the GUIDE section please.\nAttributes and Properties #  Methods #  bindData #  bindData(fieldNode FieldNode|RepeaterNode ) ⟹ void\nBinds a fieldNode. Make sure the type of your field is accepted by the implemented component.\n fieldNode FieldNode or RepeaterNode   "});index.add({'id':77,'href':'/docs/modules/furo-framework/FuroFeatureToggle/','title':"FuroFeatureToggle",'section':"@furo/framework",'content':"FuroFeatureToggle #  @furo/furo-framework v2.1.2 import '@furo/framework/src/FuroFeatureToggler/FuroFeatureToggle.js'; exports FuroFeatureToggle js\n Use the FuroFeatureToggle to control features from a central registry. FuroFeatureToggle only needs a key and a boolean value. These key can be set at any time. A requested key which was not set, is interpreted as false.\nAvailable toggles #  Following toggles are given, use the one which is appropriate to your problem. Sometimes you want to hide some parts if a key is true and sometimes you have to do the opposite.\n  data-furo-toggle-append Appends the element on true state of the key, removes the element on false state\n  data-furo-toggle-remove Removes the element on true state of the key, appends the element on false state\n  data-furo-toggle-hide Adds a hidden attribute to the element on true state of the key, removes the attribute on false state\n  data-furo-toggle-show Removes a hidden attribute from the element on true state of the key, adds the attribute on false state\n  data-furo-toggle-disable Adds a disabled attribute to the element on true state of the key, removes the attribute on false state\n  data-furo-toggle-enable Removes a disabled attribute from the element on true state of the key, adds the attribute on false state\n  data-furo-toggle-custom-add Adds the custom attribute to the element on true state of the key, removes the attribute on false state\n  data-furo-toggle-custom-remove Removes the custom attribute from the element on true state of the key, adds the attribute on false state\n  Example usage: #  js #  1 2 3 4 5 6 7 8 9 10 11 12 13  // import FuroFeatureToggle import { FuroFeatureToggle } from \u0026#39;@furo/framework/src/FuroFeatureToggler/FuroFeatureToggle.js\u0026#39;; // enabling for a part of your component FuroFeatureToggle.parseDom(this.shadowRoot) // enabling for a part of your component  FuroFeatureToggle.parseDom(this.shadowRoot.querySelector(\u0026#39;#partial\u0026#39;)) // setting a key  FuroFeatureToggle.setKeyState(\u0026#39;feature.key\u0026#39;, true);   html #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  remove: \u0026lt;span data-furo-toggle-remove=\u0026#39;feature.key\u0026#39;\u0026gt; span is removed if key state is true, otherwise appended\u0026lt;/span\u0026gt; append: \u0026lt;span data-furo-toggle-append=\u0026#39;feature.key\u0026#39;\u0026gt; span is appended when key state true, otherwise removed\u0026lt;/span\u0026gt; enable: \u0026lt;button data-furo-toggle-disable=\u0026#39;feature.key\u0026#39;\u0026gt; button is enabled when state is true, otherwise disabled\u0026lt;/button\u0026gt; disable: \u0026lt;button data-furo-toggle-enable=\u0026#39;feature.key\u0026#39;\u0026gt; button is disabled when state is true, otherwise enabled\u0026lt;/button\u0026gt; hide: \u0026lt;div data-furo-toggle-hide=\u0026#39;feature.key\u0026#39;\u0026gt; Div will get a hidden attribute when the key state is true, otherwise hidden \u0026lt;/div\u0026gt; show: \u0026lt;div data-furo-toggle-show=\u0026#39;feature.key\u0026#39;\u0026gt; The hidden attribute will be removed when the key state is true, otherwise the hidden attribute will be set. \u0026lt;/div\u0026gt; custom add: \u0026lt;div data-furo-toggle-custom-add=\u0026#39;feature.key, ATTRIBUTE, VALUE\u0026#39;\u0026gt; Div will get a custom attribute when the key state is true, otherwise the custom attribute will be removed. \u0026lt;/div\u0026gt; custom remove: \u0026lt;div data-furo-toggle-custom-remove=\u0026#39;feature.key, ATTRIBUTE, VALUE\u0026#39;\u0026gt; The custom attribute will be removed when the key state is true, otherwise the custom attribute will be set. \u0026lt;/div\u0026gt;   Attributes and Properties #  Methods #  parseDom #  parseDom(root DOM ) ⟹ void\nParses the DOM for feature toggles and applies them.\n root The dom root you want to be managed.   setKeyState #  setKeyState(key String state Boolean ) ⟹ void\nUse this method to register a key with an initial state or to update a state.\n key The key of a feature. state The state to set.   registerKeyMap #  registerKeyMap(keymap map ) ⟹ void\nUse this method to bulk register feature toggles.\n keymap String,Boolean} Object with keys and their initial state   getKeyState #  getKeyState(key String ) ⟹ Boolean\nReads the current state of a key\n key The key of a feature.   registerCallback #  registerCallback(key String cb function(Boolean, KeyState) ) ⟹ void\nRegister a custom callback on a key.\nThe callback will be immediately executed when you register it and every time the key state changes.\n key The key of a feature. cb The callback method signature is a boolean for the current state and the KeyState object.   "});index.add({'id':78,'href':'/docs/modules/furo-framework/i18n/','title':"i18n",'section':"@furo/framework",'content':"i18n #  @furo/furo-framework v2.1.2 import '@furo/framework/src/i18n.js'; exports i18n js\n The built in i18n is a trivial translation mechanism which translates keys (words) a method for pluralized keys (words with numbers) is available but not implemented.\nYou can override the builtin methods in your init file, as long you keep i18n.t and i18n.n\nUsage #  After you have registered a translation file, you can use i18n in your components.\n1 2 3 4 5 6 7 8 9 10 11 12  // import i18n import {i18n} from \u0026#34;@furo/framework/src/i18n\u0026#34; // use it in your source  let label = i18n.t(\u0026#34;key\u0026#34;); // use it in your template like this  render() { // language=HTML  return html` \u0026lt;div\u0026gt;${i18n.t(\u0026#34;key\u0026#34;)}\u0026lt;/div\u0026gt;`; }   Register a translation file and use custom translation methods #  Register i18n in the init phase of your application.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  import {Init, i18n, Env, Iconset} from \u0026#34;@furo/framework/src/furo.js\u0026#34;; // import your translations import {Translations} from \u0026#34;./translations\u0026#34;; // register your translations i18n.registerResBundle(Translations); // Apply custom Intl methods i18n.t = (key) =\u0026gt; { let b = i18n.resbundle[Env.locale.toLowerCase().replace(\u0026#34;-\u0026#34;, \u0026#34;_\u0026#34;)] || i18n.resbundle[\u0026#39;de_ch\u0026#39;]; if (b === undefined) { console.warn(\u0026#39;No resource bundle with locale \u0026#39; + Env.locale + \u0026#39; exists.\u0026#39;); return } const res = key.split(\u0026#39;.\u0026#39;).reduce((acc, part) =\u0026gt; acc \u0026amp;\u0026amp; acc[part], b); return (res ? res : key + \u0026#39;**\u0026#39;); }; // Apply custom Intl methods for pluralized keys i18n.n = (key, num) =\u0026gt; { let t = i18n.resbundle[Env.locale.toLowerCase().replace(\u0026#34;-\u0026#34;, \u0026#34;_\u0026#34;)] || i18n.resbundle[\u0026#39;de_ch\u0026#39;]; if (t === undefined) { console.warn(\u0026#39;No resource bundle with locale \u0026#39; + Env.locale + \u0026#39; exists.\u0026#39;); return } let p = key.split(\u0026#34;.\u0026#34;); for (let i = 0; i \u0026lt; p.length; i++) { if (t[p[i]]) { t = t[p[i]]; } else { console.warn(\u0026#34;key does not exist\u0026#34;, key); return; } } if (t) { if (num === 1) { if (t.one) { return t.one(num); } else { console.warn(\u0026#34;key does not exist\u0026#34;, key + \u0026#34;.one\u0026#34;); return num; } } if (num \u0026gt; 1) { if (t.many) { return t.many(num); } else { console.warn(\u0026#34;key does not exist\u0026#34;, key + \u0026#34;.many\u0026#34;); return num; } } if (t.none) { return t.none(num); } else { console.warn(\u0026#34;key does not exist\u0026#34;, key + \u0026#34;.none\u0026#34;); return num; } } };   Attributes and Properties #  Methods #  registerResBundle #  registerResBundle(bundle `` ) ⟹ void\n bundle    t #  t(key `` ) ⟹ void\n key    n #  n(key *num* ) ⟹ void\n key  num    "});index.add({'id':79,'href':'/docs/modules/furo-framework/Init/','title':"Init",'section':"@furo/framework",'content':"Init #  @furo/furo-framework v2.1.2 import '@furo/framework/src/system.js'; exports Init js exports Sys js\n The init class is used to init your Env, the API services and the API types.\nUse the init package in the init phase of your application\nexample init #  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  // -- initialize application env, theme, api import {Init,Iconset} from \u0026#34;@furo/framework/src/furo.js\u0026#34;; import {Services, Types} from \u0026#34;@furo/specs/build/data_environment.js\u0026#34; Init.registerApiServices(Services); Init.registerApiTypes(Types); //Attention: Styling is defined in main-stage import {FuroBaseIcons} from \u0026#34;@furo/icon/assets/iconsets/baseIcons\u0026#34;; import {MapsIcons} from \u0026#34;@furo/icon/assets/iconsets/mapsIcons\u0026#34;; import {PlacesIcons} from \u0026#34;@furo/icon/assets/iconsets/placesIcons\u0026#34;; import {CommunicationIcons} from \u0026#34;@furo/icon/assets/iconsets/communicationIcons\u0026#34;; import {NotificationIcons} from \u0026#34;@furo/icon/assets/iconsets/notificationIcons\u0026#34;; import {FuroDocIcons} from \u0026#34;./assets/iconset\u0026#34;; import {AvIcons} from \u0026#34;@furo/icon/assets/iconsets/avIcons\u0026#34;; import {DeviceIcons} from \u0026#34;@furo/icon/assets/iconsets/deviceIcons\u0026#34;; import {EditorIcons} from \u0026#34;@furo/icon/assets/iconsets/editorIcons\u0026#34;; import {SocialIcons} from \u0026#34;@furo/icon/assets/iconsets/socialIcons\u0026#34;; import {HardwareIcons} from \u0026#34;@furo/icon/assets/iconsets/hardwareIcons\u0026#34;; import {ImageIcons} from \u0026#34;@furo/icon/assets/iconsets/imageIcons\u0026#34;; Iconset.registerIconset(\u0026#34;furo\u0026#34;, FuroDocIcons); Iconset.registerIconset(\u0026#34;default\u0026#34;, FuroBaseIcons); Iconset.registerIconset(\u0026#34;av\u0026#34;, AvIcons); Iconset.registerIconset(\u0026#34;communication\u0026#34;, CommunicationIcons); Iconset.registerIconset(\u0026#34;device\u0026#34;, DeviceIcons); Iconset.registerIconset(\u0026#34;editor\u0026#34;, EditorIcons); Iconset.registerIconset(\u0026#34;social\u0026#34;, SocialIcons); Iconset.registerIconset(\u0026#34;places\u0026#34;, PlacesIcons); Iconset.registerIconset(\u0026#34;notification\u0026#34;, NotificationIcons); Iconset.registerIconset(\u0026#34;map\u0026#34;, MapsIcons); Iconset.registerIconset(\u0026#34;hardware\u0026#34;, HardwareIcons); Iconset.registerIconset(\u0026#34;image\u0026#34;, ImageIcons);   Attributes and Properties #  Methods #  registerEnv #  registerEnv(section *data* ) ⟹ void\n section  data    registerApiServices #  registerApiServices(services `` ) ⟹ void\n services    registerApiTypes #  registerApiTypes(types `` ) ⟹ void\n types    addApiTypeSpec #  addApiTypeSpec(typename *spec* ) ⟹ void\nAdd a single type spec to the registry\nAttention: If the name already exist, the old entry is overwritten.\n typename  spec    addApiServiceSpec #  addApiServiceSpec(servicename *spec* ) ⟹ void\nAdd a single service spec to the registry\nAttention: If the name already exist, the old entry is overwritten.\n servicename  spec    applyCustomApiPrefixToServicesAndTypes #  applyCustomApiPrefixToServicesAndTypes(prefix `` ) ⟹ void\nApply the prefix to all service deeplinks and to all furo.Reference types with defaults\n prefix    translateStaticTypeMessages #  translateStaticTypeMessages() ⟹ void\nTranslates spec content like meta.label, hints\n\n"});index.add({'id':80,'href':'/docs/modules/furo-framework/KeyState/','title':"KeyState",'section':"@furo/framework",'content':"KeyState #  @furo/furo-framework v2.1.2 import '@furo/framework/src/FuroFeatureToggler/KeyState.js'; exports KeyState js\n Handler of a single key, this class is used by FuroFeatureToggle\nAttributes and Properties #  Methods #  "});index.add({'id':81,'href':'/docs/modules/furo-framework/NodeEvent/','title':"NodeEvent",'section':"@furo/framework",'content':"NodeEvent #  @furo/furo-framework v2.1.2 import '@furo/framework/src/EventTreeNode.js'; exports NodeEvent js exports EventTreeNode js\n Custom event type for the AST\nAttributes and Properties #  type #  default: type\nEvent type / name path #  default: []\n\ntarget #  default: undefined\n\nbubbles #  default: bubbles\nshould the Event bubble detail #  default: detail\nEvent details cancelBubble #  default: false\nIf you are in a parent element and set this to true it will not bubble cancelBroadcast #  default: false\nif you are in a child element and set this to true, the event will not broadcast downwards Methods #  stopPropagation #  stopPropagation() ⟹ void\ndo not propagate the events to parent nodes\n\nstopBroadcast #  stopBroadcast() ⟹ void\nDo not broadcast to the children of this node anymore\n\n"});index.add({'id':82,'href':'/docs/modules/','title':"Packages",'section':"Docs",'content':"Overview #  "});index.add({'id':83,'href':'/docs/modules/furo-route/panelRegistry/','title':"panelRegistry",'section':"@furo/route",'content':"panelRegistry #  @furo/furo-route v2.1.1 import '@furo/route/src/lib/panelRegistry.js'; exports panelRegistry js\n Registry for the components which can handle a type in a specific context.\nThis class is used by the furo-panel-coordinator to find the component which suites best for the given data type.\nThe registry can be autogenerated from @furo/ui-builder\n// -- register panels panelRegistry.registerType(\u0026quot;auth.AuthEntity\u0026quot;, { \u0026quot;edit\u0026quot; : \u0026quot;auth-auth-update-panel\u0026quot; }); Attributes and Properties #  Methods #  registerType #  registerType(type *panel* ) ⟹ void\n type  panel    getPanelName #  getPanelName(type *suffix* ) ⟹ void\n type  suffix    "});index.add({'id':84,'href':'/docs/modules/furo-data/RepeaterNode/','title':"RepeaterNode",'section':"@furo/data",'content':"RepeaterNode #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/RepeaterNode.js'; exports RepeaterNode js superclass EventTreeNode\n internal events #   before-repeated-field-changed, fired before new data is injected this-metas-changed, when the metas of a field changed repeat-became-valid, fired when all sub items are valid, after one was invalid before repeat-became-invalid, fired when one sub item switches to a invalid state repeated-fields-changed, fired when this or any child repeaters was changed (new data, add, remove) this-repeated-field-changed, fired when this repeater was changed (new data, add, remove) repeated-fields-all-removed fired when all nodes of a repeater was deleted this-repeated-field-removed, fired whe a node of this repeater was deleted this-node-field-deleted, fired when this node was deleted *node-field-deleted, fired when a child node was deleted repeated-fields-added, fired when a node on this or any child repeater was added this-repeated-field-added, fired when a node on this repeater was added  Attributes and Properties #  _value #  default: tmp\n\n__specdefinitions #   \n_isRepeater #  default: true\n\nrepeats #  default: []\n\n_spec #  default: spec\n\n_name #  default: fieldName\n\nclearListOnNewData #  default: false\nSet this to true to clear the list on new data instead updating the current list. _pristine #  default: true\n\n_isValid #  default: true\n\n_validationDisabled #   \n__initialValue #   \nMethods #  moveNode #  moveNode(oldIndex *newIndex* ) ⟹ void\n oldIndex  newIndex    reinit #  reinit() ⟹ void\nresets the field to the initial _values from the spec\n\nreset #  reset() ⟹ void\nremoves all children\n\nremoveAllChildren #  removeAllChildren() ⟹ void\ndeletes all repeated fields on this node\n\n_hasAncestorOfType #  _hasAncestorOfType() ⟹ void\ninfinite recursive element protection we can return false here, because a repeater node is not created automatically\n\ndeleteNode #  deleteNode() ⟹ void\n\n__updateMetaAndConstraints #  __updateMetaAndConstraints(metaAndConstraints `` ) ⟹ void\n metaAndConstraints    deleteChild #  deleteChild(index `` ) ⟹ void\nDeletes a repeated item by index\n index    _addSilent #  _addSilent() ⟹ void\n\n_setInvalid #  _setInvalid(error `` ) ⟹ void\n error    add #  add(data `` ) ⟹ void\n data    "});index.add({'id':85,'href':'/docs/modules/furo-data/ScalarTypeHelper/','title':"ScalarTypeHelper",'section':"@furo/data",'content':"ScalarTypeHelper #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ScalarTypeHelper.js'; exports ScalarTypeHelper js\n Attributes and Properties #  Methods #  defaultForType #  defaultForType(type `` ) ⟹ void\n type    indeterminateDefault #  indeterminateDefault() ⟹ void\n\nisNumericType #  isNumericType(type `` ) ⟹ boolean\nchecks if a type is numeric (usefull when you want to compare min or max constraints)\n type    isScalarType #  isScalarType(type `` ) ⟹ boolean\nchecks if a type is scalar\n type    "});index.add({'id':86,'href':'/docs/modules/furo-data/ValidatorDefaultTypes/','title':"ValidatorDefaultTypes",'section':"@furo/data",'content':"ValidatorDefaultTypes #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorDefaultTypes.js'; exports ValidatorDefaultTypes js\n A class to validate constraints on type string\u0026lt;/code\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});index.add({'id':87,'href':'/docs/modules/furo-data/ValidatorFuroBigDecimal/','title':"ValidatorFuroBigDecimal",'section':"@furo/data",'content':"ValidatorFuroBigDecimal #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorFuroBigDecimal.js'; exports ValidatorFuroBigDecimal js\n A class to validate constraints on type of furo.BigDecimal\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});index.add({'id':88,'href':'/docs/modules/furo-data/ValidatorFuroReference/','title':"ValidatorFuroReference",'section':"@furo/data",'content':"ValidatorFuroReference #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorFuroReference.js'; exports ValidatorFuroReference js\n A class to validate constraints on type furo.Reference\u0026lt;/code\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\nchecks field constraints\n field    "});index.add({'id':89,'href':'/docs/modules/furo-data/ValidatorGoogleProtobufBoolValue/','title':"ValidatorGoogleProtobufBoolValue",'section':"@furo/data",'content':"ValidatorGoogleProtobufBoolValue #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorGoogleProtobufBoolValue.js'; exports ValidatorGoogleProtobufBoolValue js\n A class to validate constraints on type of google.protobuf.BoolValue\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});index.add({'id':90,'href':'/docs/modules/furo-data/ValidatorGoogleProtobufFloatValue/','title':"ValidatorGoogleProtobufFloatValue",'section':"@furo/data",'content':"ValidatorGoogleProtobufFloatValue #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorGoogleProtobufFloatValue.js'; exports ValidatorGoogleProtobufFloatValue js\n A class to validate constraints on type of google.protobuf.FloatValue\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});index.add({'id':91,'href':'/docs/modules/furo-data/ValidatorGoogleProtobufInt64Value/','title':"ValidatorGoogleProtobufInt64Value",'section':"@furo/data",'content':"ValidatorGoogleProtobufInt64Value #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorGoogleProtobufInt64Value.js'; exports ValidatorGoogleProtobufInt64Value js\n A class to validate constraints on type of google.protobuf.Int64Value\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});index.add({'id':92,'href':'/docs/modules/furo-data/ValidatorGoogleTypeDate/','title':"ValidatorGoogleTypeDate",'section':"@furo/data",'content':"ValidatorGoogleTypeDate #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorGoogleTypeDate.js'; exports ValidatorGoogleTypeDate js\n A class to validate constraints on type google.type.Date\u0026lt;/code\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\nchecks constraints\n field    isEmpty #  isEmpty(field `` ) ⟹ void\nchecks if type date is empty\n field    "});index.add({'id':93,'href':'/docs/modules/furo-data/ValidatorGoogleTypeMoney/','title':"ValidatorGoogleTypeMoney",'section':"@furo/data",'content':"ValidatorGoogleTypeMoney #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorGoogleTypeMoney.js'; exports ValidatorGoogleTypeMoney js\n A class to validate constraints on type google.type.Money\u0026lt;/code\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\nchecks field constraints\n field    isEmpty #  isEmpty(field `` ) ⟹ void\nchecks if type money is empty\n field    "});index.add({'id':94,'href':'/docs/modules/furo-data/ValidatorNumericTypes/','title':"ValidatorNumericTypes",'section':"@furo/data",'content':"ValidatorNumericTypes #  @furo/furo-data v2.3.0 import '@furo/data/src/lib/ValidatorNumericTypes.js'; exports ValidatorNumericTypes js\n A class to validate constraints on numeric types\nAttributes and Properties #  Methods #  validateConstraints #  validateConstraints(field `` ) ⟹ Promise\u0026amp;lt;unknown\u0026amp;gt;\n field    "});})();