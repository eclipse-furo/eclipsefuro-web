{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/furo-counter.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-hp-35.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`hp-35` is a declarative rpn calculator component.\n\nsee https://hansklav.home.xs4all.nl/rpn/\n\nhttp://h10032.www1.hp.com/ctg/Manual/c01579350",
          "name": "FuroHp35",
          "members": [
            {
              "kind": "method",
              "name": "enter",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Enter a number"
            },
            {
              "kind": "method",
              "name": "updateXYZT"
            },
            {
              "kind": "method",
              "name": "swap",
              "description": "\nswap **( n1 n2 -- n2 n1 )**\n\nswap, as you may have guessed, swaps the top two elements of the stack. For example:\n\n1 2 3 4 swap\nwill give you:\n\n1 2 4 3 <- Top"
            },
            {
              "kind": "method",
              "name": "rot",
              "description": "rot **( n1 n2 n3 -- n2 n3 n1 )**\n\n   Finally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n\n   1 2 3 rot\n   gives you:\n\n   2 3 1 <- Top"
            },
            {
              "kind": "method",
              "name": "roll",
              "description": "rot **( n1 n2 n3 -- n2 n3 n1 )**\n\n   Finally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n\n   1 2 3 rot\n   gives you:\n\n   2 3 1 <- Top"
            },
            {
              "kind": "method",
              "name": "add",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Process an addition",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "substract",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Process a substraction",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "sqrt",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform square root operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "ln",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform log operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "cos",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform cos operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "sin",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform sin operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "tan",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform tan operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "abs",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform abs operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "reciprocal",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform reciprocal operation",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "exp",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Perform exp operation\n\nreturns e^x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "xroot",
              "parameters": [
                {
                  "name": "n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "multiply",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Process a multiplication",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "pow",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Process power",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "divide",
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Process a division",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "description": "clear the stack"
            },
            {
              "kind": "field",
              "name": "_PIdivby180",
              "type": {
                "text": "number"
              },
              "default": "0.017453292519943295",
              "privacy": "public",
              "description": "so we dont have to calculate Math.PI / 180  every time\nused to calculate rad from angle",
              "attribute": "_PIdivby180"
            },
            {
              "kind": "field",
              "name": "radMode",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "description": "Set to true to use rad, default is deg",
              "attribute": "radMode"
            },
            {
              "kind": "field",
              "name": "x",
              "privacy": "public",
              "description": "current x",
              "type": {
                "text": "Number"
              },
              "attribute": "x"
            },
            {
              "kind": "field",
              "name": "y",
              "privacy": "public",
              "description": "current y",
              "type": {
                "text": "Number"
              },
              "attribute": "y"
            },
            {
              "kind": "field",
              "name": "z",
              "privacy": "public",
              "description": "current z",
              "attribute": "z"
            },
            {
              "kind": "field",
              "name": "t",
              "privacy": "public",
              "description": "current t",
              "attribute": "t"
            },
            {
              "kind": "field",
              "name": "stack",
              "privacy": "public",
              "description": "the stack.",
              "attribute": "stack"
            }
          ],
          "attributes": [
            {
              "name": "x",
              "description": "current x",
              "type": {
                "text": "Number"
              },
              "fieldName": "x"
            },
            {
              "name": "y",
              "description": "current y",
              "type": {
                "text": "Number"
              },
              "fieldName": "y"
            },
            {
              "name": "z",
              "description": "current z",
              "fieldName": "z"
            },
            {
              "name": "t",
              "description": "current t",
              "fieldName": "t"
            },
            {
              "name": "stack",
              "description": "the stack.",
              "fieldName": "stack"
            },
            {
              "name": "radMode",
              "description": "Set to true to use rad, default is deg",
              "fieldName": "radMode"
            },
            {
              "name": "_PIdivby180",
              "description": "so we dont have to calculate Math.PI / 180  every time\nused to calculate rad from angle",
              "fieldName": "_PIdivby180"
            }
          ],
          "superclass": {
            "name": "FuroForthStack",
            "package": "@furo/logic/src/furo-forth-stack.js"
          },
          "summary": "calculator component",
          "tagName": "furo-hp-35",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-hp-35",
          "declaration": {
            "name": "FuroHp35",
            "module": "src/furo-hp-35.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-random-number.js",
      "declarations": [],
      "exports": []
    }
  ]
}
