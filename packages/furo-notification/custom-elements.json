{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/furo-banner-display.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-banner-display`\nLit element\n\n furo-banner-display should be used together witch furo-banner. furo-banner-display listens the `open-furo-banner-requested`\n event on it's parent node. Which is sent via furo-banner. you can place those two components into different places.\n best place the furo-banner-display on the main site. then you only need one furo-banner-display. it can work with n furo-banner.\n you can also use more furo-banner-display for special needs. but You have to be sure the furo-banner-display can receive the event of the furo-banner.\n\n\n### When to use\n\nA banner displays an important, succinct message, and provides actions for users to address (or dismiss the banner). It requires a user action to be dismissed.\nBanners should be displayed at the top of the screen, below a top app bar. They are persistent and nonmodal, allowing the user to either ignore them or interact with them at any time\n\nComponent | Priority | User action\n----------------|------------------|----------\n`furo-snackbar`  | Low priority |Optional: Snackbars disappear automatically\n`furo-banner`    | Prominent, medium priority  |Optional: Banners remain until dismissed by the user, or if the state that caused the banner is resolved\n`furo-dialog`    | Highest priority |Required: Dialogs block app usage until the user takes a dialog action or exits the dialog (if available)\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default  | Fallback\n----------------|-------------|----------|----------\n`--banner-background` | Color of background |`--surface` |  #FAFAFA\n`--banner-on-background` | Color of background |`--on-surface` |  #333333\n`--banner-button-text-color` | Color of button text | `--primary` | #3f83e3\n`--banner-icon-margin-right` | right margin of icon | `--spacing` | 24px\n`--banner-margin-bottom`     | bottom margin of the banner   | `--spacing-s`     | 16px",
          "name": "FuroBannerDisplay",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_parseMarkdown",
              "static": true,
              "parameters": [
                {
                  "name": "markdown"
                }
              ],
              "description": "parse markdown string to html content",
              "return": {
                "type": {
                  "text": "TemplateResult | TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "parameters": [
                {
                  "name": "b"
                }
              ],
              "description": "show",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_pushToStack",
              "parameters": [
                {
                  "name": "b",
                  "description": "banner",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "__show",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "method",
              "name": "_close",
              "description": "close the CURRENT banner"
            },
            {
              "kind": "field",
              "name": "_banner",
              "type": {
                "text": "object"
              },
              "default": "{\n      text: '',\n      dismissButtonText: 'dismiss',\n      confirmButtonText: '',\n      icon: '',\n      banner: {},\n    }",
              "privacy": "public",
              "attribute": "_banner"
            },
            {
              "kind": "field",
              "name": "_stack",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "privacy": "public",
              "attribute": "_stack"
            },
            {
              "kind": "field",
              "name": "_isOpen",
              "privacy": "public",
              "attribute": "_isOpen"
            },
            {
              "kind": "field",
              "name": "_timer",
              "privacy": "public",
              "attribute": "_timer"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "privacy": "public",
              "description": "enable autofocus for dismiss button after slide in",
              "attribute": "autofocus"
            }
          ],
          "attributes": [
            {
              "name": "_banner",
              "fieldName": "_banner"
            },
            {
              "name": "_stack",
              "fieldName": "_stack"
            },
            {
              "name": "_isOpen",
              "fieldName": "_isOpen"
            },
            {
              "name": "_timer",
              "fieldName": "_timer"
            },
            {
              "name": "autofocus",
              "description": "enable autofocus for dismiss button after slide in",
              "fieldName": "autofocus"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "helper component to show a banner",
          "tagName": "furo-banner-display",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-banner-display",
          "declaration": {
            "name": "FuroBannerDisplay",
            "module": "src/furo-banner-display.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-banner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-banner`\nLit element\n\n furo-banner should be used together witch furo-banner-display. you can place those two components into different places.\n best place the furo-banner-display on the main site. then you only need one furo-banner-display. it can work with n furo-banner.\n\n### When to use\n\nA banner displays an important, succinct message, and provides actions for users to address (or dismiss the banner). It requires a user action to be dismissed.\nBanners should be displayed at the top of the screen, below a top app bar. They are persistent and nonmodal, allowing the user to either ignore them or interact with them at any time\n\nComponent | Priority | User action\n----------------|------------------|----------\n`furo-snackbar`  | Low priority |Optional: Snackbars disappear automatically\n`furo-banner`    | Prominent, medium priority  |Optional: Banners remain until dismissed by the user, or if the state that caused the banner is resolved\n`furo-dialog`    | Highest priority |Required: Dialogs block app usage until the user takes a dialog action or exits the dialog (if available)",
          "name": "FuroBanner",
          "members": [
            {
              "kind": "method",
              "name": "setIcon",
              "parameters": [
                {
                  "name": "i"
                }
              ],
              "description": "set icon of the snackbar"
            },
            {
              "kind": "method",
              "name": "setText",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "description": "set the"
            },
            {
              "kind": "method",
              "name": "setConfirmButtonText",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "description": "set label text of confirm button"
            },
            {
              "kind": "method",
              "name": "setDismissButtonText",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "description": "set label text of dismiss button"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "p",
                  "description": "payload",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "show banner"
            },
            {
              "kind": "method",
              "name": "dismiss",
              "description": "event `dismissed` will be sent with payload"
            },
            {
              "kind": "method",
              "name": "confirm",
              "description": "event `confirmed` will be sent with payload"
            },
            {
              "kind": "method",
              "name": "_close",
              "description": "event `banner-closed` will be sent with payload which was set with show()"
            },
            {
              "kind": "method",
              "name": "parseGrpcStatus",
              "parameters": [
                {
                  "name": "status"
                },
                {
                  "name": "s"
                }
              ],
              "description": "parse grpc status object and set the label according to the LocalizedMessage in status\nhttps://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto"
            },
            {
              "kind": "field",
              "name": "dismissButtonText",
              "type": {
                "text": "string"
              },
              "default": "'dismiss'",
              "privacy": "public",
              "description": "label text of dismiss button",
              "attribute": "dismiss-button-text"
            },
            {
              "kind": "field",
              "name": "text",
              "privacy": "public",
              "description": "banner text content. Use *word* to mark as strong. Use \\n to insert a line break.\n\n*HTML tags will be stripped out.*",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "confirmButtonText",
              "privacy": "public",
              "description": "label text of confirm button",
              "attribute": "confirm-button-text"
            },
            {
              "kind": "field",
              "name": "icon",
              "privacy": "public",
              "description": "icon of the banner",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "payload",
              "privacy": "public",
              "description": "payload",
              "attribute": "payload"
            },
            {
              "kind": "field",
              "name": "danger",
              "privacy": "public",
              "description": "set this flag to display the icon in --danger color",
              "attribute": "danger"
            }
          ],
          "events": [
            {
              "type": {
                "text": "this"
              },
              "description": " Fired when value open banner is requested.",
              "name": "open-furo-banner-requested"
            },
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when dismiss button of banner is clicked.",
              "name": "dismissed"
            },
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when confirm button of banner is clicked.",
              "name": "confirmed"
            },
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when banner is closed.",
              "name": "banner-closed"
            }
          ],
          "attributes": [
            {
              "name": "text",
              "description": "banner text content. Use *word* to mark as strong. Use \\n to insert a line break.\n\n*HTML tags will be stripped out.*",
              "fieldName": "text"
            },
            {
              "name": "dismiss-button-text",
              "description": "label text of dismiss button",
              "fieldName": "dismissButtonText"
            },
            {
              "name": "confirm-button-text",
              "description": "label text of confirm button",
              "fieldName": "confirmButtonText"
            },
            {
              "name": "icon",
              "description": "icon of the banner",
              "fieldName": "icon"
            },
            {
              "name": "payload",
              "description": "payload",
              "fieldName": "payload"
            },
            {
              "name": "danger",
              "description": "set this flag to display the icon in --danger color",
              "fieldName": "danger"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "a banner",
          "tagName": "furo-banner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-banner",
          "declaration": {
            "name": "FuroBanner",
            "module": "src/furo-banner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-snackbar-display.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-snackbar-display`\nLit element\n\n furo-snackbar-display should be used together witch furo-snackbar. you can place those two components into different places.\n best place the furo-snackbar-display on the main site. then you only need one furo-snackbar-display. it can work with n furo-snackbar.\n\n### When to use\n\nSnackbars communicate messages that are minimally interruptive and don’t require user action.\n\nComponent | Priority | User action\n----------------|------------------|----------\n`furo-snackbar`  | Low priority |Optional: Snackbars disappear automatically\n`furo-banner`    | Prominent, medium priority  |Optional: Banners remain until dismissed by the user, or if the state that caused the banner is resolved\n`furo-dialog`    | Highest priority |Required: Dialogs block app usage until the user takes a dialog action or exits the dialog (if available)\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default  | Fallback\n----------------|-------------|----------|----------\n`--snackbar-background-color` | Color of background |`--on-primary` |  #212121\n`--snackbar-label-color` | Color of label in snackbar| `--primary-variant,,` | #dedede\n`--snackbar-button-text-color` | Color of button text | `--secondary` | #bb86fc\n`--snackbar-border-distance` | Distance to the border of the parent element | `--spacing` | 24px",
          "name": "FuroSnackbarDisplay",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_isWiredWithShow",
              "description": "check if the display element is wired with show method \"ƒ-show=\"--xxx\"",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "s"
                }
              ],
              "description": "show",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_pushToStack",
              "parameters": [
                {
                  "name": "s",
                  "description": "snackbar",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_close",
              "description": "close the CURRENT snackbar"
            },
            {
              "kind": "method",
              "name": "_fadeIn",
              "static": true,
              "parameters": [
                {
                  "name": "element"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stack",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "privacy": "public",
              "attribute": "_stack"
            },
            {
              "kind": "field",
              "name": "displayObj",
              "type": {
                "text": "object"
              },
              "default": "{ labelText: '', actonButtonText: '', snackbar: {} }",
              "privacy": "public",
              "attribute": "displayObj"
            },
            {
              "kind": "field",
              "name": "_snackbar",
              "privacy": "public",
              "description": "virsule element snackbar",
              "attribute": "_snackbar"
            },
            {
              "kind": "field",
              "name": "_timer",
              "privacy": "public",
              "attribute": "_timer"
            }
          ],
          "attributes": [
            {
              "name": "displayObj",
              "fieldName": "displayObj"
            },
            {
              "name": "_stack",
              "fieldName": "_stack"
            },
            {
              "name": "_snackbar",
              "description": "virsule element snackbar",
              "fieldName": "_snackbar"
            },
            {
              "name": "_timer",
              "fieldName": "_timer"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "helper component to show a snackbar",
          "tagName": "furo-snackbar-display",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-snackbar-display",
          "declaration": {
            "name": "FuroSnackbarDisplay",
            "module": "src/furo-snackbar-display.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-snackbar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-snackbar`\nLit element\n\n furo-snackbar should be used together witch furo-snackbar-display. you can place those two components into different places.\n best place the furo-snackbar-display on the main site. then you only need one furo-snackbar-display. it can work with n furo-snackbar.\n\n### When to use\n\nSnackbars communicate messages that are minimally interruptive and don’t require user action.\n\nComponent | Priority | User action\n----------------|------------------|----------\n`furo-snackbar`  | Low priority |Optional: Snackbars disappear automatically\n`furo-banner`    | Prominent, medium priority  |Optional: Banners remain until dismissed by the user, or if the state that caused the banner is resolved\n`furo-dialog`    | Highest priority |Required: Dialogs block app usage until the user takes a dialog action or exits the dialog (if available)",
          "name": "FuroSnackbar",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "p",
                  "description": "payload",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "show slackbar"
            },
            {
              "kind": "method",
              "name": "_action",
              "description": "trigger the action of snackbar. event `snackbar-action-clicked` will be sent with payload"
            },
            {
              "kind": "method",
              "name": "_dismiss",
              "description": "Send event `snackbar-dismiss-clicked` will be sent with payload which was set with show()"
            },
            {
              "kind": "method",
              "name": "_close",
              "description": "Send event `snackbar-closed` will be sent with payload which was set with show()"
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "description": "set the label text o"
            },
            {
              "kind": "method",
              "name": "setActionButtonText",
              "parameters": [
                {
                  "name": "t"
                }
              ],
              "description": "set the action button text"
            },
            {
              "kind": "method",
              "name": "parseGrpcStatus",
              "parameters": [
                {
                  "name": "s"
                }
              ],
              "description": "parse grpc status object and set the label according to the message in status"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "privacy": "public",
              "description": "label text",
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "actionButtonText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "privacy": "public",
              "description": "text of button",
              "attribute": "action-button-text"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "'done'",
              "privacy": "public",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "isOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "attribute": "isOpen"
            },
            {
              "kind": "field",
              "name": "timeoutInMs",
              "privacy": "public",
              "attribute": "timeout-in-ms"
            },
            {
              "kind": "field",
              "name": "closeOnEscape",
              "privacy": "public",
              "attribute": "close-on-escape"
            },
            {
              "kind": "field",
              "name": "maxSize",
              "privacy": "public",
              "description": "max size of snackbar",
              "attribute": "max-size"
            },
            {
              "kind": "field",
              "name": "size",
              "privacy": "public",
              "description": "size of the snackbar",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "positionLeft",
              "privacy": "public",
              "attribute": "position-left"
            },
            {
              "kind": "field",
              "name": "positionRight",
              "privacy": "public",
              "attribute": "position-right"
            },
            {
              "kind": "field",
              "name": "stacked",
              "privacy": "public",
              "attribute": "stacked"
            },
            {
              "kind": "field",
              "name": "payload",
              "privacy": "public",
              "attribute": "payload"
            }
          ],
          "events": [
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when snackbar is closed.",
              "name": "snackbar-closed"
            },
            {
              "type": {
                "text": "this"
              },
              "description": " Fired when value open snackbar is requested.",
              "name": "open-furo-snackbar-requested"
            },
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when action button of snackbar is clicked.",
              "name": "snackbar-action-clicked"
            },
            {
              "type": {
                "text": "payload"
              },
              "description": " Fired when dismiss icon in snackbar-display is clicked.",
              "name": "snackbar-dismiss-clicked"
            }
          ],
          "attributes": [
            {
              "name": "action-button-text",
              "description": "text of button",
              "fieldName": "actionButtonText"
            },
            {
              "name": "label-text",
              "description": "label text",
              "fieldName": "labelText"
            },
            {
              "name": "timeout-in-ms",
              "fieldName": "timeoutInMs"
            },
            {
              "name": "close-on-escape",
              "fieldName": "closeOnEscape"
            },
            {
              "name": "icon",
              "fieldName": "icon"
            },
            {
              "name": "max-size",
              "description": "max size of snackbar",
              "fieldName": "maxSize"
            },
            {
              "name": "size",
              "description": "size of the snackbar",
              "fieldName": "size"
            },
            {
              "name": "isOpen",
              "fieldName": "isOpen"
            },
            {
              "name": "position-left",
              "fieldName": "positionLeft"
            },
            {
              "name": "position-right",
              "fieldName": "positionRight"
            },
            {
              "name": "stacked",
              "fieldName": "stacked"
            },
            {
              "name": "payload",
              "fieldName": "payload"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "a snackbar",
          "tagName": "furo-snackbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-snackbar",
          "declaration": {
            "name": "FuroSnackbar",
            "module": "src/furo-snackbar.js"
          }
        }
      ]
    }
  ]
}
