{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/empty-fbp-node.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EmptyFBPNode",
          "mixins": [
            {
              "name": "FBP",
              "module": "/src/fbp.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "empty-fbp-node",
          "customElement": true,
          "members": [
            {
              "kind": "method",
              "name": "firstUpdated",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "empty-fbp-node",
          "declaration": {
            "name": "EmptyFBPNode",
            "module": "src/empty-fbp-node.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/fbp.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "furo-fbp base class\n\n[read the guide](/guide/md/fbp-wires/)\n\n## Tracing all wires in a component\n\nLog all triggered wires for this component. This function may help you at debugging.\n**Attention** This works only with wires with at least 1 receiver.\n\nSelect your element in the dev console and call `$0._FBPTraceWires()`\n\nTo trace your element immediately after fbp is ready, use this snippet\n\n```\n_FBPReady(){\n  super._FBPReady();\n  this._FBPTraceWires()\n}\n```\n## Debuging a wire\n\nGet information for the triggered wire. This function may help you at debugging.\n\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
          "name": "FBP",
          "members": [
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete"
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ]
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ],
          "summary": "Please read the guide for a better understanding"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FBP",
          "declaration": {
            "name": "FBP",
            "module": "src/fbp.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/flow-bind.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`flow-bind`\n\n Custom element to allow using furo-fbp's template features in a html document.\n It comes very handy, when you want write tests or make some demos.\n\n```\n<test-fixture id=\"basic\">\n  <template>\n   <flow-bind id=\"elem\">\n     <template>\n       <div id=\"sender\" @-click=\"--data-received\">sender</div>\n       <div id=\"receiver\" ƒ-render=\"--data-received\">receiver</div>\n     </template>\n   </flow-bind>\n  </template>\n</test-fixture>\n```",
          "name": "FlowBind",
          "members": [
            {
              "kind": "field",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "_host",
              "default": "elem"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "module": "/src/fbp.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "summary": "Custom element to allow using furo-fbp's template features in a html document.",
          "tagName": "flow-bind",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "flow-bind",
          "declaration": {
            "name": "FlowBind",
            "module": "src/flow-bind.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/flow-repeat.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`flow-repeat`\n\nCustom element to repeat Arrays",
          "name": "FlowRepeat",
          "members": [
            {
              "kind": "method",
              "name": "clear",
              "description": "Clear the list"
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "index"
                }
              ],
              "description": "Triggers the wire --itemSelected on selected item and --itemDeSelected on last selected Item"
            },
            {
              "kind": "method",
              "name": "selectIdentity",
              "parameters": [
                {
                  "name": "identifier"
                }
              ],
              "description": "Select item by its identity.\n\nUsing this method only makes sense when you have set the identity-path.\nIf you already work with indexes, use select(index).\n\nTODO: consider to return a promise"
            },
            {
              "kind": "method",
              "name": "selectNextIndex",
              "description": "select Next index"
            },
            {
              "kind": "method",
              "name": "selectPreviousIndex"
            },
            {
              "kind": "method",
              "name": "triggerSelected",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "triggerAll",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "description": "Triggers the wire --itemDeSelected on last selected item"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "description": "Triggers the wire --itemDeSelected on all items"
            },
            {
              "kind": "method",
              "name": "_findFirstHost",
              "parameters": [
                {
                  "name": "parent"
                }
              ]
            },
            {
              "kind": "method",
              "name": "injectItems",
              "parameters": [
                {
                  "name": "items"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buildDomNode",
              "parameters": [
                {
                  "name": "identity"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "kind": "method",
              "name": "triggerFirst",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "triggerLast",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "triggerIndex",
              "parameters": [
                {
                  "name": "i"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "field",
              "name": "template",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_insertedItems",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "index of the element"
              },
              "description": " Fired when the last element is selected. Use this to trigger a load next.",
              "name": "last-element-selected"
            },
            {
              "type": {
                "text": "Number"
              },
              "description": " Fired when items are attached to the dom, with Number of items.",
              "name": "items-in-dom"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "module": "/src/fbp.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "summary": "Custom element to allow using FBPs template features in repeated template",
          "tagName": "flow-repeat",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FlowRepeat",
          "declaration": {
            "name": "FlowRepeat",
            "module": "src/flow-repeat.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "flow-repeat",
          "declaration": {
            "name": "FlowRepeat",
            "module": "src/flow-repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vizConnector.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/testhelper/test-bind.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`flow-bind`\n\n Custom element to allow using furo-fbp's template features in a html document.\n It comes very handy, when you want write tests or make some demos.\n\n```\n<test-fixture id=\"basic\">\n  <template>\n   <flow-bind id=\"elem\">\n     <template>\n       <div id=\"sender\" @-click=\"--data-received\">sender</div>\n       <div id=\"receiver\" ƒ-render=\"--data-received\">receiver</div>\n     </template>\n   </flow-bind>\n  </template>\n</test-fixture>\n```",
          "name": "TestBind",
          "members": [
            {
              "kind": "field",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "_host",
              "default": "elem"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "module": "/src/fbp.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "summary": "Custom element to allow using furo-fbp's template features in a html document.",
          "tagName": "test-bind",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "EmptyTestFBPNode",
          "mixins": [
            {
              "name": "FBP",
              "module": "/src/fbp.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "empty-test-fbp-node",
          "customElement": true,
          "members": [
            {
              "kind": "method",
              "name": "firstUpdated",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTriggerWire",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire like --buttonClicked"
                },
                {
                  "name": "detailData",
                  "description": "(*) data to pass"
                }
              ],
              "description": "Triggers a wire",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPAddWireHook",
              "parameters": [
                {
                  "name": "wire",
                  "description": "(String) Name of the wire"
                },
                {
                  "name": "cb",
                  "description": "(function) Callback function cb(detailData)"
                },
                {
                  "name": "before",
                  "description": "(Boolean) append before the components are triggered, default is false",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPTraceWires",
              "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPDebug",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "openDebugger",
                  "description": "opens the debugger console, so you can inspect your component."
                }
              ],
              "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__toCamelCase",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_appendFBP",
              "parameters": [
                {
                  "name": "dom",
                  "description": "dom node"
                }
              ],
              "description": "parses the dom for flowbased programming tags",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "Livecycle method\nThis method is called, when the wires are ready.\nAnd triggers the --FBPready wire. This does *not* respect a lit updateComplete",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__enqueueTrigger",
              "parameters": [
                {
                  "name": "wire"
                },
                {
                  "name": "detailData"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "__resolveWireAndPath",
              "parameters": [
                {
                  "name": "w"
                }
              ],
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathGet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to read",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
              "return": {
                "type": {
                  "text": "*"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_pathSet",
              "parameters": [
                {
                  "name": "root",
                  "description": "Object from which to dereference path from",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "path",
                  "description": "Path to set",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                },
                {
                  "name": "value",
                  "description": "Value to set to path",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "method",
              "name": "_split",
              "parameters": [
                {
                  "name": "path",
                  "description": "Input path",
                  "type": {
                    "text": "string | !Array<string|number>"
                  }
                }
              ],
              "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
              "return": {
                "type": {
                  "text": "!Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__FBPEventlistener",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wirebundle",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            },
            {
              "kind": "field",
              "name": "__wireQueue",
              "type": {
                "text": "array"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "FBP",
                "module": "src/fbp.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "test-bind",
          "declaration": {
            "name": "TestBind",
            "module": "src/testhelper/test-bind.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "empty-test-fbp-node",
          "declaration": {
            "name": "EmptyTestFBPNode",
            "module": "src/testhelper/test-bind.js"
          }
        }
      ]
    }
  ]
}
