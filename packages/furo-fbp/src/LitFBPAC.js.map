{"version":3,"file":"LitFBPAC.js","sourceRoot":"./src/","sources":["LitFBPAC.ts"],"names":[],"mappings":"","sourcesContent":["import { PropertyValues } from 'lit';\n\nexport declare abstract class LitFBPAC {\n  /**\n   * Log all triggered wires for this component. This function may help you at debugging.\n   * Select your element in the dev console and call `$0._FBPTraceWires()`\n   *\n   */\n  protected _FBPTraceWires(): void;\n\n  protected _FBPTriggerWire(wire: string, detailData: any): void;\n\n  protected firstUpdated(_changedProperties: PropertyValues): void;\n\n  protected _FBPAddWireHook(\n    wire: string,\n    cb: Function,\n    before: boolean\n  ): number;\n\n  protected _FBPDebug(wire: string, openDebugger: boolean): void;\n\n  protected _FBPReady(): void;\n\n  protected _pathGet(root: any, path: string): any;\n\n  protected _pathSet(root: any, path: string, value: any): string | false;\n\n  /**\n   * Splits a path into an array of property names. Accepts either arrays\n   * of path parts or strings.\n   *\n   * Example:\n   *\n   * ```\n   * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n   * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n   * ```\n   *\n   * @param {string | !Array<string|number>} path Input path\n   * @return {!Array<string>} Array of path parts\n   * @suppress {checkTypes}\n   */\n  protected _split(path: string): string[];\n}\n"]}