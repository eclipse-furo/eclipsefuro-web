// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  FieldNode,
  RECURSION,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';
import {
  IOther as IFuroTypeOther,
  Other as FuroTypeOther,
  TOther as TFuroTypeOther,
} from './Other';

/**
 * @interface IDeepRecursion
 */
export interface IDeepRecursion {
  displayName?: string;
  field?: IFuroTypeOther;
}

/**
 * @interface TDeepRecursion
 */
export interface TDeepRecursion {
  display_name?: string;
  field?: TFuroTypeOther;
}

/**
 * DeepRecursion
 */
export class DeepRecursion extends FieldNode {
  private _displayName: STRING;

  private _field: RECURSION<FuroTypeOther, IFuroTypeOther>;

  public __defaultValues: IDeepRecursion;

  constructor(
    initData?: IDeepRecursion,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.type.DeepRecursion';

    this.__meta.nodeFields = [
      {
        fieldName: 'displayName',
        protoName: 'display_name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'field',
        protoName: 'field',
        FieldConstructor: FuroTypeOther,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._displayName = new STRING(undefined, this, 'displayName');

    this._field = new RECURSION<FuroTypeOther, IFuroTypeOther>(
      undefined,
      this,
      'field',
    );

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof DeepRecursion] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof DeepRecursion] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get displayName(): STRING {
    return this._displayName;
  }

  public set displayName(v: string) {
    this.__PrimitivesSetter(this._displayName, v);
  }

  public get field(): RECURSION<FuroTypeOther, IFuroTypeOther> {
    return this._field;
  }

  public set field(v: IFuroTypeOther) {
    this.__TypeSetter(this._field, v);
  }

  fromLiteral(data: IDeepRecursion) {
    super.__fromLiteral(data);
  }

  toLiteral(): IDeepRecursion {
    return super.__toLiteral();
  }
}

Registry.register('furo.type.DeepRecursion', DeepRecursion);
