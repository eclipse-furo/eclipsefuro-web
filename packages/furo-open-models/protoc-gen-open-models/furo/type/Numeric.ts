// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  INT32,
  Registry,
} from '@furo/open-models/dist/index';

/**
 * @interface INumeric
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export interface INumeric {
  /**
   *  Value is set as a quoted number, use your numeric parser of choice
   */
  primitiveInt32?: number;
  repeatedPrimitiveInt32?: number[];
}

/**
 * @interface TNumeric
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export interface TNumeric {
  /**
   *  Value is set as a quoted number, use your numeric parser of choice
   */
  primitive_int32?: number;
  repeated_primitive_int32?: number[];
}

/**
 * Numeric
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export class Numeric extends FieldNode {
  //  Value is set as a quoted number, use your numeric parser of choice
  private _primitiveInt32: INT32;

  private _repeatedPrimitiveInt32: ARRAY<INT32, number>;

  public __defaultValues: INumeric;

  constructor(
    initData?: INumeric,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.type.Numeric';

    this.__meta.nodeFields = [
      {
        fieldName: 'primitiveInt32',
        protoName: 'primitive_int32',
        FieldConstructor: INT32,
        constraints: {
          maximum: 1000,
          minimum: 5,
          exclusive_maximum: true,
          exclusive_minimum: true,
          multiple_of: 5,
        },
      },
      {
        fieldName: 'repeatedPrimitiveInt32',
        protoName: 'repeated_primitive_int32',
        FieldConstructor: INT32,
        constraints: {},
      },
    ];

    // Initialize the fields
    //  Value is set as a quoted number, use your numeric parser of choice
    this._primitiveInt32 = new INT32(undefined, this, 'primitiveInt32');

    this._repeatedPrimitiveInt32 = new ARRAY<INT32, number>(
      undefined,
      this,
      'repeatedPrimitiveInt32',
    );

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Numeric] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Numeric] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  Value is set as a quoted number, use your numeric parser of choice
  public get primitiveInt32(): INT32 {
    return this._primitiveInt32;
  }

  public set primitiveInt32(v: number) {
    this.__PrimitivesSetter(this._primitiveInt32, v);
  }

  public get repeatedPrimitiveInt32(): ARRAY<INT32, number> {
    return this._repeatedPrimitiveInt32;
  }

  public set repeatedPrimitiveInt32(v: number[]) {
    this.__TypeSetter(this._repeatedPrimitiveInt32, v);
  }

  fromLiteral(data: INumeric) {
    super.__fromLiteral(data);
  }

  toLiteral(): INumeric {
    return super.__toLiteral();
  }
}

Registry.register('furo.type.Numeric', Numeric);
