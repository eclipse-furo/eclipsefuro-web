// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  FieldNode,
  Registry,
  UINT32,
  UINT64,
} from '@furo/open-models/dist/index';

/**
 * @interface IUints
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export interface IUints {
  /**
   *  Value is set as a quoted number, use your numeric parser of choice
   */
  uint64?: string;
  uint32?: number;
  uint64Excl?: string;
  uint32Excl?: number;
}

/**
 * @interface TUints
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export interface TUints {
  /**
   *  Value is set as a quoted number, use your numeric parser of choice
   */
  uint64?: string;
  uint32?: number;
  uint64Excl?: string;
  uint32Excl?: number;
}

/**
 * Uints
 *  Decimal numbers
 *   Regex pattern: ^[&#43;-]?(\d*\.)?\d&#43;$
 */
export class Uints extends FieldNode {
  //  Value is set as a quoted number, use your numeric parser of choice
  private _uint64: UINT64;

  private _uint32: UINT32;

  private _uint64Excl: UINT64;

  private _uint32Excl: UINT32;

  public __defaultValues: IUints;

  constructor(
    initData?: IUints,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.type.Uints';

    this.__meta.nodeFields = [
      {
        fieldName: 'uint64',
        protoName: 'uint64',
        FieldConstructor: UINT64,
        constraints: { maximum: 1000, minimum: 5, multiple_of: 5 },
      },
      {
        fieldName: 'uint32',
        protoName: 'uint32',
        FieldConstructor: UINT32,
        constraints: { maximum: 1000, minimum: 5, multiple_of: 5 },
      },
      {
        fieldName: 'uint64Excl',
        protoName: 'uint64Excl',
        FieldConstructor: UINT64,
        constraints: {
          maximum: 1000,
          minimum: 5,
          exclusive_maximum: true,
          exclusive_minimum: true,
          multiple_of: 5,
        },
      },
      {
        fieldName: 'uint32Excl',
        protoName: 'uint32Excl',
        FieldConstructor: UINT32,
        constraints: {
          maximum: 1000,
          minimum: 5,
          exclusive_maximum: true,
          exclusive_minimum: true,
          multiple_of: 5,
        },
      },
    ];

    // Initialize the fields
    //  Value is set as a quoted number, use your numeric parser of choice
    this._uint64 = new UINT64(undefined, this, 'uint64');

    this._uint32 = new UINT32(undefined, this, 'uint32');

    this._uint64Excl = new UINT64(undefined, this, 'uint64Excl');

    this._uint32Excl = new UINT32(undefined, this, 'uint32Excl');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Uints] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Uints] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  Value is set as a quoted number, use your numeric parser of choice
  public get uint64(): UINT64 {
    return this._uint64;
  }

  public set uint64(v: bigint) {
    this.__PrimitivesSetter(this._uint64, v);
  }

  public get uint32(): UINT32 {
    return this._uint32;
  }

  public set uint32(v: number) {
    this.__PrimitivesSetter(this._uint32, v);
  }

  public get uint64Excl(): UINT64 {
    return this._uint64Excl;
  }

  public set uint64Excl(v: bigint) {
    this.__PrimitivesSetter(this._uint64Excl, v);
  }

  public get uint32Excl(): UINT32 {
    return this._uint32Excl;
  }

  public set uint32Excl(v: number) {
    this.__PrimitivesSetter(this._uint32Excl, v);
  }

  fromLiteral(data: IUints) {
    super.__fromLiteral(data);
  }

  toLiteral(): IUints {
    return super.__toLiteral();
  }
}

Registry.register('furo.type.Uints', Uints);
