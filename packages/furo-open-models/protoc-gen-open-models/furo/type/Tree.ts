// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  RECURSION,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';

/**
 * @interface ITree
 * *
 *  Tree is for checking recursive types
 */
export interface ITree {
  displayName?: string;
  /**
   *  Array recursion
   */
  nodes?: ITree[];
  /**
   *  direct recursion
   */
  recursion?: ITree;
}

/**
 * @interface TTree
 * *
 *  Tree is for checking recursive types
 */
export interface TTree {
  display_name?: string;
  /**
   *  Array recursion
   */
  nodes?: TTree[];
  /**
   *  direct recursion
   */
  recursion?: TTree;
}

/**
 * Tree
 * *
 *  Tree is for checking recursive types
 */
export class Tree extends FieldNode {
  private _displayName: STRING;

  //  Array recursion
  private _nodes: ARRAY<Tree, ITree>;

  //  direct recursion
  private _recursion: RECURSION<Tree, ITree>;

  public __defaultValues: ITree;

  constructor(
    initData?: ITree,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.type.Tree';

    this.__meta.nodeFields = [
      {
        fieldName: 'displayName',
        protoName: 'display_name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'nodes',
        protoName: 'nodes',
        FieldConstructor: Tree,
        constraints: {},
      },
      {
        fieldName: 'recursion',
        protoName: 'recursion',
        FieldConstructor: Tree,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._displayName = new STRING(undefined, this, 'displayName');

    //  Array recursion
    this._nodes = new ARRAY<Tree, ITree>(undefined, this, 'nodes');

    //  direct recursion
    this._recursion = new RECURSION<Tree, ITree>(undefined, this, 'recursion');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Tree] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Tree] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get displayName(): STRING {
    return this._displayName;
  }

  public set displayName(v: string) {
    this.__PrimitivesSetter(this._displayName, v);
  }

  //  Array recursion
  public get nodes(): ARRAY<Tree, ITree> {
    return this._nodes;
  }

  public set nodes(v: ITree[]) {
    this.__TypeSetter(this._nodes, v);
  }

  //  direct recursion
  public get recursion(): RECURSION<Tree, ITree> {
    return this._recursion;
  }

  public set recursion(v: ITree) {
    this.__TypeSetter(this._recursion, v);
  }

  fromLiteral(data: ITree) {
    super.__fromLiteral(data);
  }

  toLiteral(): ITree {
    return super.__toLiteral();
  }
}

Registry.register('furo.type.Tree', Tree);
