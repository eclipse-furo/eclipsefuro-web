// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, RECURSION, Registry } from '@furo/open-models/dist/index';
import {
  DeepRecursion as FuroTypeDeepRecursion,
  IDeepRecursion as IFuroTypeDeepRecursion,
  TDeepRecursion as TFuroTypeDeepRecursion,
} from './DeepRecursion';

/**
 * @interface IOther
 */
export interface IOther {
  recursion?: IFuroTypeDeepRecursion;
}

/**
 * @interface TOther
 */
export interface TOther {
  recursion?: TFuroTypeDeepRecursion;
}

/**
 * Other
 */
export class Other extends FieldNode {
  private _recursion: RECURSION<FuroTypeDeepRecursion, IFuroTypeDeepRecursion>;

  public __defaultValues: IOther;

  constructor(
    initData?: IOther,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.type.Other';

    this.__meta.nodeFields = [
      {
        fieldName: 'recursion',
        protoName: 'recursion',
        FieldConstructor: FuroTypeDeepRecursion,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._recursion = new RECURSION<
      FuroTypeDeepRecursion,
      IFuroTypeDeepRecursion
    >(undefined, this, 'recursion');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Other] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Other] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get recursion(): RECURSION<
    FuroTypeDeepRecursion,
    IFuroTypeDeepRecursion
  > {
    return this._recursion;
  }

  public set recursion(v: IFuroTypeDeepRecursion) {
    this.__TypeSetter(this._recursion, v);
  }

  fromLiteral(data: IOther) {
    super.__fromLiteral(data);
  }

  toLiteral(): IOther {
    return super.__toLiteral();
  }
}

Registry.register('furo.type.Other', Other);
