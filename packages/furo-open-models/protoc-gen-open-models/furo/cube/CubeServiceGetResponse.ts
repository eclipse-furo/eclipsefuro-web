// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  CubeEntity as FuroCubeCubeEntity,
  ICubeEntity as IFuroCubeCubeEntity,
  TCubeEntity as TFuroCubeCubeEntity,
} from './CubeEntity';

/**
 * @interface ICubeServiceGetResponse
 */
export interface ICubeServiceGetResponse {
  entity?: IFuroCubeCubeEntity;
}

/**
 * @interface TCubeServiceGetResponse
 */
export interface TCubeServiceGetResponse {
  entity?: TFuroCubeCubeEntity;
}

/**
 * CubeServiceGetResponse
 */
export class CubeServiceGetResponse extends FieldNode {
  private _entity: FuroCubeCubeEntity;

  public __defaultValues: ICubeServiceGetResponse;

  constructor(
    initData?: ICubeServiceGetResponse,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'furo.cube.CubeServiceGetResponse';

    this.__meta.nodeFields = [
      {
        fieldName: 'entity',
        protoName: 'entity',
        FieldConstructor: FuroCubeCubeEntity,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._entity = new FuroCubeCubeEntity(undefined, this, 'entity');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof CubeServiceGetResponse] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (
        this[fieldName as keyof CubeServiceGetResponse] as FieldNode
      ).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get entity(): FuroCubeCubeEntity {
    return this._entity;
  }

  public set entity(v: IFuroCubeCubeEntity) {
    this.__TypeSetter(this._entity, v);
  }

  fromLiteral(data: ICubeServiceGetResponse) {
    super.__fromLiteral(data);
  }

  toLiteral(): ICubeServiceGetResponse {
    return super.__toLiteral();
  }
}

Registry.register('furo.cube.CubeServiceGetResponse', CubeServiceGetResponse);
