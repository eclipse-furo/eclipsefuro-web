// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  BOOLEAN,
  FieldNode,
  Registry,
} from '@furo/open-models/dist/index';
import {
  FeatureSet as GoogleProtobufFeatureSet,
  IFeatureSet as IGoogleProtobufFeatureSet,
  TFeatureSet as TGoogleProtobufFeatureSet,
} from './FeatureSet';

import {
  IUninterpretedOption as IGoogleProtobufUninterpretedOption,
  TUninterpretedOption as TGoogleProtobufUninterpretedOption,
  UninterpretedOption as GoogleProtobufUninterpretedOption,
} from './UninterpretedOption';

/**
 * @interface IMessageOptions
 */
export interface IMessageOptions {
  /**
   *  Set true to use the old proto1 MessageSet wire format for extensions.
   *  This is provided for backwards-compatibility with the MessageSet wire
   *  format.  You should not use this for any other reason:  It's less
   *  efficient, has fewer features, and is more complicated.
   *
   *  The message must be defined exactly as follows:
   *    message Foo {
   *      option message_set_wire_format = true;
   *      extensions 4 to max;
   *    }
   *  Note that the message cannot have any defined fields; MessageSets only
   *  have extensions.
   *
   *  All extensions of your type must be singular messages; e.g. they cannot
   *  be int32s, enums, or repeated messages.
   *
   *  Because this is an option, the above two restrictions are not enforced by
   *  the protocol compiler.
   */
  messageSetWireFormat?: boolean;
  /**
   *  Disables the generation of the standard "descriptor()" accessor, which can
   *  conflict with a field of the same name.  This is meant to make migration
   *  from proto1 easier; new code should avoid fields named "descriptor".
   */
  noStandardDescriptorAccessor?: boolean;
  /**
   *  Is this message deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the message, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating messages.
   */
  deprecated?: boolean;
  /**
   *  NOTE: Do not set the option in .proto files. Always use the maps syntax
   *  instead. The option should only be implicitly set by the proto compiler
   *  parser.
   *
   *  Whether the message is an automatically generated map entry type for the
   *  maps field.
   *
   *  For maps fields:
   *      map<KeyType, ValueType> map_field = 1;
   *  The parsed descriptor looks like:
   *      message MapFieldEntry {
   *          option map_entry = true;
   *          optional KeyType key = 1;
   *          optional ValueType value = 2;
   *      }
   *      repeated MapFieldEntry map_field = 1;
   *
   *  Implementations may choose not to generate the map_entry=true message, but
   *  use a native map in the target language to hold the keys and values.
   *  The reflection APIs in such implementations still need to work as
   *  if the field is a repeated message field.
   */
  mapEntry?: boolean;
  /**
   *  Enable the legacy handling of JSON field name conflicts.  This lowercases
   *  and strips underscored from the fields before comparison in proto3 only.
   *  The new behavior takes `json_name` into account and applies to proto2 as
   *  well.
   *
   *  This should only be used as a temporary measure against broken builds due
   *  to the change in behavior for JSON field name conflicts.
   *
   *  TODO This is legacy behavior we plan to remove once downstream
   *  teams have had time to migrate.
   */
  deprecatedLegacyJsonFieldConflicts?: boolean;
  /**
   *  Any features defined in the specific edition.
   */
  features?: IGoogleProtobufFeatureSet;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   */
  uninterpretedOption?: IGoogleProtobufUninterpretedOption[];
}

/**
 * @interface TMessageOptions
 */
export interface TMessageOptions {
  /**
   *  Set true to use the old proto1 MessageSet wire format for extensions.
   *  This is provided for backwards-compatibility with the MessageSet wire
   *  format.  You should not use this for any other reason:  It's less
   *  efficient, has fewer features, and is more complicated.
   *
   *  The message must be defined exactly as follows:
   *    message Foo {
   *      option message_set_wire_format = true;
   *      extensions 4 to max;
   *    }
   *  Note that the message cannot have any defined fields; MessageSets only
   *  have extensions.
   *
   *  All extensions of your type must be singular messages; e.g. they cannot
   *  be int32s, enums, or repeated messages.
   *
   *  Because this is an option, the above two restrictions are not enforced by
   *  the protocol compiler.
   */
  message_set_wire_format?: boolean;
  /**
   *  Disables the generation of the standard "descriptor()" accessor, which can
   *  conflict with a field of the same name.  This is meant to make migration
   *  from proto1 easier; new code should avoid fields named "descriptor".
   */
  no_standard_descriptor_accessor?: boolean;
  /**
   *  Is this message deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for the message, or it will be completely ignored; in the very least,
   *  this is a formalization for deprecating messages.
   */
  deprecated?: boolean;
  /**
   *  NOTE: Do not set the option in .proto files. Always use the maps syntax
   *  instead. The option should only be implicitly set by the proto compiler
   *  parser.
   *
   *  Whether the message is an automatically generated map entry type for the
   *  maps field.
   *
   *  For maps fields:
   *      map<KeyType, ValueType> map_field = 1;
   *  The parsed descriptor looks like:
   *      message MapFieldEntry {
   *          option map_entry = true;
   *          optional KeyType key = 1;
   *          optional ValueType value = 2;
   *      }
   *      repeated MapFieldEntry map_field = 1;
   *
   *  Implementations may choose not to generate the map_entry=true message, but
   *  use a native map in the target language to hold the keys and values.
   *  The reflection APIs in such implementations still need to work as
   *  if the field is a repeated message field.
   */
  map_entry?: boolean;
  /**
   *  Enable the legacy handling of JSON field name conflicts.  This lowercases
   *  and strips underscored from the fields before comparison in proto3 only.
   *  The new behavior takes `json_name` into account and applies to proto2 as
   *  well.
   *
   *  This should only be used as a temporary measure against broken builds due
   *  to the change in behavior for JSON field name conflicts.
   *
   *  TODO This is legacy behavior we plan to remove once downstream
   *  teams have had time to migrate.
   */
  deprecated_legacy_json_field_conflicts?: boolean;
  /**
   *  Any features defined in the specific edition.
   */
  features?: TGoogleProtobufFeatureSet;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   */
  uninterpreted_option?: TGoogleProtobufUninterpretedOption[];
}

/**
 * MessageOptions
 */
export class MessageOptions extends FieldNode {
  //  Set true to use the old proto1 MessageSet wire format for extensions.
  //  This is provided for backwards-compatibility with the MessageSet wire
  //  format.  You should not use this for any other reason:  It's less
  //  efficient, has fewer features, and is more complicated.
  //
  //  The message must be defined exactly as follows:
  //    message Foo {
  //      option message_set_wire_format = true;
  //      extensions 4 to max;
  //    }
  //  Note that the message cannot have any defined fields; MessageSets only
  //  have extensions.
  //
  //  All extensions of your type must be singular messages; e.g. they cannot
  //  be int32s, enums, or repeated messages.
  //
  //  Because this is an option, the above two restrictions are not enforced by
  //  the protocol compiler.
  private _messageSetWireFormat: BOOLEAN;

  //  Disables the generation of the standard "descriptor()" accessor, which can
  //  conflict with a field of the same name.  This is meant to make migration
  //  from proto1 easier; new code should avoid fields named "descriptor".
  private _noStandardDescriptorAccessor: BOOLEAN;

  //  Is this message deprecated?
  //  Depending on the target platform, this can emit Deprecated annotations
  //  for the message, or it will be completely ignored; in the very least,
  //  this is a formalization for deprecating messages.
  private _deprecated: BOOLEAN;

  //  NOTE: Do not set the option in .proto files. Always use the maps syntax
  //  instead. The option should only be implicitly set by the proto compiler
  //  parser.
  //
  //  Whether the message is an automatically generated map entry type for the
  //  maps field.
  //
  //  For maps fields:
  //      map<KeyType, ValueType> map_field = 1;
  //  The parsed descriptor looks like:
  //      message MapFieldEntry {
  //          option map_entry = true;
  //          optional KeyType key = 1;
  //          optional ValueType value = 2;
  //      }
  //      repeated MapFieldEntry map_field = 1;
  //
  //  Implementations may choose not to generate the map_entry=true message, but
  //  use a native map in the target language to hold the keys and values.
  //  The reflection APIs in such implementations still need to work as
  //  if the field is a repeated message field.
  private _mapEntry: BOOLEAN;

  //  Enable the legacy handling of JSON field name conflicts.  This lowercases
  //  and strips underscored from the fields before comparison in proto3 only.
  //  The new behavior takes `json_name` into account and applies to proto2 as
  //  well.
  //
  //  This should only be used as a temporary measure against broken builds due
  //  to the change in behavior for JSON field name conflicts.
  //
  //  TODO This is legacy behavior we plan to remove once downstream
  //  teams have had time to migrate.
  private _deprecatedLegacyJsonFieldConflicts: BOOLEAN;

  //  Any features defined in the specific edition.
  private _features: GoogleProtobufFeatureSet;

  //  The parser stores options it doesn't recognize here. See above.
  private _uninterpretedOption: ARRAY<
    GoogleProtobufUninterpretedOption,
    IGoogleProtobufUninterpretedOption
  >;

  public __defaultValues: IMessageOptions;

  constructor(
    initData?: IMessageOptions,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.MessageOptions';

    this.__meta.nodeFields = [
      {
        fieldName: 'messageSetWireFormat',
        protoName: 'message_set_wire_format',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'noStandardDescriptorAccessor',
        protoName: 'no_standard_descriptor_accessor',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'deprecated',
        protoName: 'deprecated',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'mapEntry',
        protoName: 'map_entry',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'deprecatedLegacyJsonFieldConflicts',
        protoName: 'deprecated_legacy_json_field_conflicts',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'features',
        protoName: 'features',
        FieldConstructor: GoogleProtobufFeatureSet,
        constraints: {},
      },
      {
        fieldName: 'uninterpretedOption',
        protoName: 'uninterpreted_option',
        FieldConstructor: GoogleProtobufUninterpretedOption,
        constraints: {},
      },
    ];

    // Initialize the fields
    //  Set true to use the old proto1 MessageSet wire format for extensions.
    //  This is provided for backwards-compatibility with the MessageSet wire
    //  format.  You should not use this for any other reason:  It's less
    //  efficient, has fewer features, and is more complicated.
    //
    //  The message must be defined exactly as follows:
    //    message Foo {
    //      option message_set_wire_format = true;
    //      extensions 4 to max;
    //    }
    //  Note that the message cannot have any defined fields; MessageSets only
    //  have extensions.
    //
    //  All extensions of your type must be singular messages; e.g. they cannot
    //  be int32s, enums, or repeated messages.
    //
    //  Because this is an option, the above two restrictions are not enforced by
    //  the protocol compiler.
    this._messageSetWireFormat = new BOOLEAN(
      undefined,
      this,
      'messageSetWireFormat',
    );

    //  Disables the generation of the standard "descriptor()" accessor, which can
    //  conflict with a field of the same name.  This is meant to make migration
    //  from proto1 easier; new code should avoid fields named "descriptor".
    this._noStandardDescriptorAccessor = new BOOLEAN(
      undefined,
      this,
      'noStandardDescriptorAccessor',
    );

    //  Is this message deprecated?
    //  Depending on the target platform, this can emit Deprecated annotations
    //  for the message, or it will be completely ignored; in the very least,
    //  this is a formalization for deprecating messages.
    this._deprecated = new BOOLEAN(undefined, this, 'deprecated');

    //  NOTE: Do not set the option in .proto files. Always use the maps syntax
    //  instead. The option should only be implicitly set by the proto compiler
    //  parser.
    //
    //  Whether the message is an automatically generated map entry type for the
    //  maps field.
    //
    //  For maps fields:
    //      map<KeyType, ValueType> map_field = 1;
    //  The parsed descriptor looks like:
    //      message MapFieldEntry {
    //          option map_entry = true;
    //          optional KeyType key = 1;
    //          optional ValueType value = 2;
    //      }
    //      repeated MapFieldEntry map_field = 1;
    //
    //  Implementations may choose not to generate the map_entry=true message, but
    //  use a native map in the target language to hold the keys and values.
    //  The reflection APIs in such implementations still need to work as
    //  if the field is a repeated message field.
    this._mapEntry = new BOOLEAN(undefined, this, 'mapEntry');

    //  Enable the legacy handling of JSON field name conflicts.  This lowercases
    //  and strips underscored from the fields before comparison in proto3 only.
    //  The new behavior takes `json_name` into account and applies to proto2 as
    //  well.
    //
    //  This should only be used as a temporary measure against broken builds due
    //  to the change in behavior for JSON field name conflicts.
    //
    //  TODO This is legacy behavior we plan to remove once downstream
    //  teams have had time to migrate.
    this._deprecatedLegacyJsonFieldConflicts = new BOOLEAN(
      undefined,
      this,
      'deprecatedLegacyJsonFieldConflicts',
    );

    //  Any features defined in the specific edition.
    this._features = new GoogleProtobufFeatureSet(undefined, this, 'features');

    //  The parser stores options it doesn't recognize here. See above.
    this._uninterpretedOption = new ARRAY<
      GoogleProtobufUninterpretedOption,
      IGoogleProtobufUninterpretedOption
    >(undefined, this, 'uninterpretedOption');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof MessageOptions] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof MessageOptions] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  Set true to use the old proto1 MessageSet wire format for extensions.
  //  This is provided for backwards-compatibility with the MessageSet wire
  //  format.  You should not use this for any other reason:  It's less
  //  efficient, has fewer features, and is more complicated.
  //
  //  The message must be defined exactly as follows:
  //    message Foo {
  //      option message_set_wire_format = true;
  //      extensions 4 to max;
  //    }
  //  Note that the message cannot have any defined fields; MessageSets only
  //  have extensions.
  //
  //  All extensions of your type must be singular messages; e.g. they cannot
  //  be int32s, enums, or repeated messages.
  //
  //  Because this is an option, the above two restrictions are not enforced by
  //  the protocol compiler.
  public get messageSetWireFormat(): BOOLEAN {
    return this._messageSetWireFormat;
  }

  public set messageSetWireFormat(v: boolean) {
    this.__PrimitivesSetter(this._messageSetWireFormat, v);
  }

  //  Disables the generation of the standard "descriptor()" accessor, which can
  //  conflict with a field of the same name.  This is meant to make migration
  //  from proto1 easier; new code should avoid fields named "descriptor".
  public get noStandardDescriptorAccessor(): BOOLEAN {
    return this._noStandardDescriptorAccessor;
  }

  public set noStandardDescriptorAccessor(v: boolean) {
    this.__PrimitivesSetter(this._noStandardDescriptorAccessor, v);
  }

  //  Is this message deprecated?
  //  Depending on the target platform, this can emit Deprecated annotations
  //  for the message, or it will be completely ignored; in the very least,
  //  this is a formalization for deprecating messages.
  public get deprecated(): BOOLEAN {
    return this._deprecated;
  }

  public set deprecated(v: boolean) {
    this.__PrimitivesSetter(this._deprecated, v);
  }

  //  NOTE: Do not set the option in .proto files. Always use the maps syntax
  //  instead. The option should only be implicitly set by the proto compiler
  //  parser.
  //
  //  Whether the message is an automatically generated map entry type for the
  //  maps field.
  //
  //  For maps fields:
  //      map<KeyType, ValueType> map_field = 1;
  //  The parsed descriptor looks like:
  //      message MapFieldEntry {
  //          option map_entry = true;
  //          optional KeyType key = 1;
  //          optional ValueType value = 2;
  //      }
  //      repeated MapFieldEntry map_field = 1;
  //
  //  Implementations may choose not to generate the map_entry=true message, but
  //  use a native map in the target language to hold the keys and values.
  //  The reflection APIs in such implementations still need to work as
  //  if the field is a repeated message field.
  public get mapEntry(): BOOLEAN {
    return this._mapEntry;
  }

  public set mapEntry(v: boolean) {
    this.__PrimitivesSetter(this._mapEntry, v);
  }

  //  Enable the legacy handling of JSON field name conflicts.  This lowercases
  //  and strips underscored from the fields before comparison in proto3 only.
  //  The new behavior takes `json_name` into account and applies to proto2 as
  //  well.
  //
  //  This should only be used as a temporary measure against broken builds due
  //  to the change in behavior for JSON field name conflicts.
  //
  //  TODO This is legacy behavior we plan to remove once downstream
  //  teams have had time to migrate.
  public get deprecatedLegacyJsonFieldConflicts(): BOOLEAN {
    return this._deprecatedLegacyJsonFieldConflicts;
  }

  public set deprecatedLegacyJsonFieldConflicts(v: boolean) {
    this.__PrimitivesSetter(this._deprecatedLegacyJsonFieldConflicts, v);
  }

  //  Any features defined in the specific edition.
  public get features(): GoogleProtobufFeatureSet {
    return this._features;
  }

  public set features(v: IGoogleProtobufFeatureSet) {
    this.__TypeSetter(this._features, v);
  }

  //  The parser stores options it doesn't recognize here. See above.
  public get uninterpretedOption(): ARRAY<
    GoogleProtobufUninterpretedOption,
    IGoogleProtobufUninterpretedOption
  > {
    return this._uninterpretedOption;
  }

  public set uninterpretedOption(v: IGoogleProtobufUninterpretedOption[]) {
    this.__TypeSetter(this._uninterpretedOption, v);
  }

  fromLiteral(data: IMessageOptions) {
    super.__fromLiteral(data);
  }

  toLiteral(): IMessageOptions {
    return super.__toLiteral();
  }
}

Registry.register('google.protobuf.MessageOptions', MessageOptions);
