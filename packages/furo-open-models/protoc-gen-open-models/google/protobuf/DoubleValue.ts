// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { DOUBLE, FieldNode, Registry } from '@furo/open-models/dist/index';

/**
 * @interface IDoubleValue
 *  Wrapper message for `double`.
 *
 *  The JSON representation for `DoubleValue` is JSON number.
 */
export interface IDoubleValue {
  /**
   *  The double value.
   */
  value?: number;
}

/**
 * @interface TDoubleValue
 *  Wrapper message for `double`.
 *
 *  The JSON representation for `DoubleValue` is JSON number.
 */
export interface TDoubleValue {
  /**
   *  The double value.
   */
  value?: number;
}

/**
 * DoubleValue
 *  Wrapper message for `double`.
 *
 *  The JSON representation for `DoubleValue` is JSON number.
 */
export class DoubleValue extends FieldNode {
  //  The double value.
  private _value: DOUBLE;

  public __defaultValues: IDoubleValue;

  constructor(
    initData?: IDoubleValue,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.DoubleValue';

    this.__meta.nodeFields = [
      {
        fieldName: 'value',
        protoName: 'value',
        FieldConstructor: DOUBLE,
        constraints: {},
      },
    ];

    // Initialize the fields
    //  The double value.
    this._value = new DOUBLE(undefined, this, 'value');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof DoubleValue] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof DoubleValue] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  The double value.
  public get value(): DOUBLE {
    return this._value;
  }

  public set value(v: number) {
    this.__PrimitivesSetter(this._value, v);
  }

  fromLiteral(data: IDoubleValue) {
    super.__fromLiteral(data);
  }

  toLiteral(): IDoubleValue {
    return super.__toLiteral();
  }
}

Registry.register('google.protobuf.DoubleValue', DoubleValue);
