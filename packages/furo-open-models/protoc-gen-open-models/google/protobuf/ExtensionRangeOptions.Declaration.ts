// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  BOOLEAN,
  FieldNode,
  INT32,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';

/**
 * @interface IExtensionRangeOptionsDeclaration
 */
export interface IExtensionRangeOptionsDeclaration {
  number?: number;
  /**
   *  The fully-qualified name of the extension field. There must be a leading
   *  dot in front of the full name.
   */
  fullName?: string;
  /**
   *  The fully-qualified type name of the extension field. Unlike
   *  Metadata.type, Declaration.type must have a leading dot for messages
   *  and enums.
   */
  type?: string;
  /**
   *  If true, indicates that the number is reserved in the extension range,
   *  and any extension field with the number will fail to compile. Set this
   *  when a declared extension field is deleted.
   */
  reserved?: boolean;
  /**
   *  If true, indicates that the extension must be defined as repeated.
   *  Otherwise the extension must be defined as optional.
   */
  repeated?: boolean;
}

/**
 * @interface TExtensionRangeOptionsDeclaration
 */
export interface TExtensionRangeOptionsDeclaration {
  number?: number;
  /**
   *  The fully-qualified name of the extension field. There must be a leading
   *  dot in front of the full name.
   */
  full_name?: string;
  /**
   *  The fully-qualified type name of the extension field. Unlike
   *  Metadata.type, Declaration.type must have a leading dot for messages
   *  and enums.
   */
  type?: string;
  /**
   *  If true, indicates that the number is reserved in the extension range,
   *  and any extension field with the number will fail to compile. Set this
   *  when a declared extension field is deleted.
   */
  reserved?: boolean;
  /**
   *  If true, indicates that the extension must be defined as repeated.
   *  Otherwise the extension must be defined as optional.
   */
  repeated?: boolean;
}

/**
 * ExtensionRangeOptionsDeclaration
 */
export class ExtensionRangeOptionsDeclaration extends FieldNode {
  private _number: INT32;

  //  The fully-qualified name of the extension field. There must be a leading
  //  dot in front of the full name.
  private _fullName: STRING;

  //  The fully-qualified type name of the extension field. Unlike
  //  Metadata.type, Declaration.type must have a leading dot for messages
  //  and enums.
  private _type: STRING;

  //  If true, indicates that the number is reserved in the extension range,
  //  and any extension field with the number will fail to compile. Set this
  //  when a declared extension field is deleted.
  private _reserved: BOOLEAN;

  //  If true, indicates that the extension must be defined as repeated.
  //  Otherwise the extension must be defined as optional.
  private _repeated: BOOLEAN;

  public __defaultValues: IExtensionRangeOptionsDeclaration;

  constructor(
    initData?: IExtensionRangeOptionsDeclaration,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.ExtensionRangeOptions.Declaration';

    this.__meta.nodeFields = [
      {
        fieldName: 'number',
        protoName: 'number',
        FieldConstructor: INT32,
        constraints: {},
      },
      {
        fieldName: 'fullName',
        protoName: 'full_name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'type',
        protoName: 'type',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'reserved',
        protoName: 'reserved',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'repeated',
        protoName: 'repeated',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._number = new INT32(undefined, this, 'number');

    //  The fully-qualified name of the extension field. There must be a leading
    //  dot in front of the full name.
    this._fullName = new STRING(undefined, this, 'fullName');

    //  The fully-qualified type name of the extension field. Unlike
    //  Metadata.type, Declaration.type must have a leading dot for messages
    //  and enums.
    this._type = new STRING(undefined, this, 'type');

    //  If true, indicates that the number is reserved in the extension range,
    //  and any extension field with the number will fail to compile. Set this
    //  when a declared extension field is deleted.
    this._reserved = new BOOLEAN(undefined, this, 'reserved');

    //  If true, indicates that the extension must be defined as repeated.
    //  Otherwise the extension must be defined as optional.
    this._repeated = new BOOLEAN(undefined, this, 'repeated');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof ExtensionRangeOptionsDeclaration] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (
        this[fieldName as keyof ExtensionRangeOptionsDeclaration] as FieldNode
      ).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get number(): INT32 {
    return this._number;
  }

  public set number(v: number) {
    this.__PrimitivesSetter(this._number, v);
  }

  //  The fully-qualified name of the extension field. There must be a leading
  //  dot in front of the full name.
  public get fullName(): STRING {
    return this._fullName;
  }

  public set fullName(v: string) {
    this.__PrimitivesSetter(this._fullName, v);
  }

  //  The fully-qualified type name of the extension field. Unlike
  //  Metadata.type, Declaration.type must have a leading dot for messages
  //  and enums.
  public get type(): STRING {
    return this._type;
  }

  public set type(v: string) {
    this.__PrimitivesSetter(this._type, v);
  }

  //  If true, indicates that the number is reserved in the extension range,
  //  and any extension field with the number will fail to compile. Set this
  //  when a declared extension field is deleted.
  public get reserved(): BOOLEAN {
    return this._reserved;
  }

  public set reserved(v: boolean) {
    this.__PrimitivesSetter(this._reserved, v);
  }

  //  If true, indicates that the extension must be defined as repeated.
  //  Otherwise the extension must be defined as optional.
  public get repeated(): BOOLEAN {
    return this._repeated;
  }

  public set repeated(v: boolean) {
    this.__PrimitivesSetter(this._repeated, v);
  }

  fromLiteral(data: IExtensionRangeOptionsDeclaration) {
    super.__fromLiteral(data);
  }

  toLiteral(): IExtensionRangeOptionsDeclaration {
    return super.__toLiteral();
  }
}

Registry.register(
  'google.protobuf.ExtensionRangeOptions.Declaration',
  ExtensionRangeOptionsDeclaration,
);
