// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  INT32,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';

/**
 * @interface ISourceCodeInfoLocation
 */
export interface ISourceCodeInfoLocation {
  /**
   *  Identifies which part of the FileDescriptorProto was defined at this
   *  location.
   *
   *  Each element is a field number or an index.  They form a path from
   *  the root FileDescriptorProto to the place where the definition occurs.
   *  For example, this path:
   *    [ 4, 3, 2, 7, 1 ]
   *  refers to:
   *    file.message_type(3)  // 4, 3
   *        .field(7)         // 2, 7
   *        .name()           // 1
   *  This is because FileDescriptorProto.message_type has field number 4:
   *    repeated DescriptorProto message_type = 4;
   *  and DescriptorProto.field has field number 2:
   *    repeated FieldDescriptorProto field = 2;
   *  and FieldDescriptorProto.name has field number 1:
   *    optional string name = 1;
   *
   *  Thus, the above path gives the location of a field name.  If we removed
   *  the last element:
   *    [ 4, 3, 2, 7 ]
   *  this path refers to the whole field declaration (from the beginning
   *  of the label to the terminating semicolon).
   */
  path?: number[];
  /**
   *  Always has exactly three or four elements: start line, start column,
   *  end line (optional, otherwise assumed same as start line), end column.
   *  These are packed into a single field for efficiency.  Note that line
   *  and column numbers are zero-based -- typically you will want to add
   *  1 to each before displaying to a user.
   */
  span?: number[];
  /**
   *  If this SourceCodeInfo represents a complete declaration, these are any
   *  comments appearing before and after the declaration which appear to be
   *  attached to the declaration.
   *
   *  A series of line comments appearing on consecutive lines, with no other
   *  tokens appearing on those lines, will be treated as a single comment.
   *
   *  leading_detached_comments will keep paragraphs of comments that appear
   *  before (but not connected to) the current element. Each paragraph,
   *  separated by empty lines, will be one comment element in the repeated
   *  field.
   *
   *  Only the comment content is provided; comment markers (e.g. //) are
   *  stripped out.  For block comments, leading whitespace and an asterisk
   *  will be stripped from the beginning of each line other than the first.
   *  Newlines are included in the output.
   *
   *  Examples:
   *
   *    optional int32 foo = 1;  // Comment attached to foo.
   *    // Comment attached to bar.
   *    optional int32 bar = 2;
   *
   *    optional string baz = 3;
   *    // Comment attached to baz.
   *    // Another line attached to baz.
   *
   *    // Comment attached to moo.
   *    //
   *    // Another line attached to moo.
   *    optional double moo = 4;
   *
   *    // Detached comment for corge. This is not leading or trailing comments
   *    // to moo or corge because there are blank lines separating it from
   *    // both.
   *
   *    // Detached comment for corge paragraph 2.
   *
   *    optional string corge = 5;
   *    /* Block comment attached
   *     * to corge.  Leading asterisks
   *     * will be removed. *\/
   *    /* Block comment attached to
   *     * grault. *\/
   *    optional int32 grault = 6;
   *
   *    // ignored detached comments.
   */
  leadingComments?: string;
  trailingComments?: string;
  leadingDetachedComments?: string[];
}

/**
 * @interface TSourceCodeInfoLocation
 */
export interface TSourceCodeInfoLocation {
  /**
   *  Identifies which part of the FileDescriptorProto was defined at this
   *  location.
   *
   *  Each element is a field number or an index.  They form a path from
   *  the root FileDescriptorProto to the place where the definition occurs.
   *  For example, this path:
   *    [ 4, 3, 2, 7, 1 ]
   *  refers to:
   *    file.message_type(3)  // 4, 3
   *        .field(7)         // 2, 7
   *        .name()           // 1
   *  This is because FileDescriptorProto.message_type has field number 4:
   *    repeated DescriptorProto message_type = 4;
   *  and DescriptorProto.field has field number 2:
   *    repeated FieldDescriptorProto field = 2;
   *  and FieldDescriptorProto.name has field number 1:
   *    optional string name = 1;
   *
   *  Thus, the above path gives the location of a field name.  If we removed
   *  the last element:
   *    [ 4, 3, 2, 7 ]
   *  this path refers to the whole field declaration (from the beginning
   *  of the label to the terminating semicolon).
   */
  path?: number[];
  /**
   *  Always has exactly three or four elements: start line, start column,
   *  end line (optional, otherwise assumed same as start line), end column.
   *  These are packed into a single field for efficiency.  Note that line
   *  and column numbers are zero-based -- typically you will want to add
   *  1 to each before displaying to a user.
   */
  span?: number[];
  /**
   *  If this SourceCodeInfo represents a complete declaration, these are any
   *  comments appearing before and after the declaration which appear to be
   *  attached to the declaration.
   *
   *  A series of line comments appearing on consecutive lines, with no other
   *  tokens appearing on those lines, will be treated as a single comment.
   *
   *  leading_detached_comments will keep paragraphs of comments that appear
   *  before (but not connected to) the current element. Each paragraph,
   *  separated by empty lines, will be one comment element in the repeated
   *  field.
   *
   *  Only the comment content is provided; comment markers (e.g. //) are
   *  stripped out.  For block comments, leading whitespace and an asterisk
   *  will be stripped from the beginning of each line other than the first.
   *  Newlines are included in the output.
   *
   *  Examples:
   *
   *    optional int32 foo = 1;  // Comment attached to foo.
   *    // Comment attached to bar.
   *    optional int32 bar = 2;
   *
   *    optional string baz = 3;
   *    // Comment attached to baz.
   *    // Another line attached to baz.
   *
   *    // Comment attached to moo.
   *    //
   *    // Another line attached to moo.
   *    optional double moo = 4;
   *
   *    // Detached comment for corge. This is not leading or trailing comments
   *    // to moo or corge because there are blank lines separating it from
   *    // both.
   *
   *    // Detached comment for corge paragraph 2.
   *
   *    optional string corge = 5;
   *    /* Block comment attached
   *     * to corge.  Leading asterisks
   *     * will be removed. *\/
   *    /* Block comment attached to
   *     * grault. *\/
   *    optional int32 grault = 6;
   *
   *    // ignored detached comments.
   */
  leading_comments?: string;
  trailing_comments?: string;
  leading_detached_comments?: string[];
}

/**
 * SourceCodeInfoLocation
 */
export class SourceCodeInfoLocation extends FieldNode {
  //  Identifies which part of the FileDescriptorProto was defined at this
  //  location.
  //
  //  Each element is a field number or an index.  They form a path from
  //  the root FileDescriptorProto to the place where the definition occurs.
  //  For example, this path:
  //    [ 4, 3, 2, 7, 1 ]
  //  refers to:
  //    file.message_type(3)  // 4, 3
  //        .field(7)         // 2, 7
  //        .name()           // 1
  //  This is because FileDescriptorProto.message_type has field number 4:
  //    repeated DescriptorProto message_type = 4;
  //  and DescriptorProto.field has field number 2:
  //    repeated FieldDescriptorProto field = 2;
  //  and FieldDescriptorProto.name has field number 1:
  //    optional string name = 1;
  //
  //  Thus, the above path gives the location of a field name.  If we removed
  //  the last element:
  //    [ 4, 3, 2, 7 ]
  //  this path refers to the whole field declaration (from the beginning
  //  of the label to the terminating semicolon).
  private _path: ARRAY<INT32, number>;

  //  Always has exactly three or four elements: start line, start column,
  //  end line (optional, otherwise assumed same as start line), end column.
  //  These are packed into a single field for efficiency.  Note that line
  //  and column numbers are zero-based -- typically you will want to add
  //  1 to each before displaying to a user.
  private _span: ARRAY<INT32, number>;

  //  If this SourceCodeInfo represents a complete declaration, these are any
  //  comments appearing before and after the declaration which appear to be
  //  attached to the declaration.
  //
  //  A series of line comments appearing on consecutive lines, with no other
  //  tokens appearing on those lines, will be treated as a single comment.
  //
  //  leading_detached_comments will keep paragraphs of comments that appear
  //  before (but not connected to) the current element. Each paragraph,
  //  separated by empty lines, will be one comment element in the repeated
  //  field.
  //
  //  Only the comment content is provided; comment markers (e.g. //) are
  //  stripped out.  For block comments, leading whitespace and an asterisk
  //  will be stripped from the beginning of each line other than the first.
  //  Newlines are included in the output.
  //
  //  Examples:
  //
  //    optional int32 foo = 1;  // Comment attached to foo.
  //    // Comment attached to bar.
  //    optional int32 bar = 2;
  //
  //    optional string baz = 3;
  //    // Comment attached to baz.
  //    // Another line attached to baz.
  //
  //    // Comment attached to moo.
  //    //
  //    // Another line attached to moo.
  //    optional double moo = 4;
  //
  //    // Detached comment for corge. This is not leading or trailing comments
  //    // to moo or corge because there are blank lines separating it from
  //    // both.
  //
  //    // Detached comment for corge paragraph 2.
  //
  //    optional string corge = 5;
  //    /* Block comment attached
  //     * to corge.  Leading asterisks
  //     * will be removed. *\/
  //    /* Block comment attached to
  //     * grault. *\/
  //    optional int32 grault = 6;
  //
  //    // ignored detached comments.
  private _leadingComments: STRING;

  private _trailingComments: STRING;

  private _leadingDetachedComments: ARRAY<STRING, string>;

  public __defaultValues: ISourceCodeInfoLocation;

  constructor(
    initData?: ISourceCodeInfoLocation,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.SourceCodeInfo.Location';

    this.__meta.nodeFields = [
      {
        fieldName: 'path',
        protoName: 'path',
        FieldConstructor: INT32,
        constraints: {},
      },
      {
        fieldName: 'span',
        protoName: 'span',
        FieldConstructor: INT32,
        constraints: {},
      },
      {
        fieldName: 'leadingComments',
        protoName: 'leading_comments',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'trailingComments',
        protoName: 'trailing_comments',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'leadingDetachedComments',
        protoName: 'leading_detached_comments',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    //  Identifies which part of the FileDescriptorProto was defined at this
    //  location.
    //
    //  Each element is a field number or an index.  They form a path from
    //  the root FileDescriptorProto to the place where the definition occurs.
    //  For example, this path:
    //    [ 4, 3, 2, 7, 1 ]
    //  refers to:
    //    file.message_type(3)  // 4, 3
    //        .field(7)         // 2, 7
    //        .name()           // 1
    //  This is because FileDescriptorProto.message_type has field number 4:
    //    repeated DescriptorProto message_type = 4;
    //  and DescriptorProto.field has field number 2:
    //    repeated FieldDescriptorProto field = 2;
    //  and FieldDescriptorProto.name has field number 1:
    //    optional string name = 1;
    //
    //  Thus, the above path gives the location of a field name.  If we removed
    //  the last element:
    //    [ 4, 3, 2, 7 ]
    //  this path refers to the whole field declaration (from the beginning
    //  of the label to the terminating semicolon).
    this._path = new ARRAY<INT32, number>(undefined, this, 'path');

    //  Always has exactly three or four elements: start line, start column,
    //  end line (optional, otherwise assumed same as start line), end column.
    //  These are packed into a single field for efficiency.  Note that line
    //  and column numbers are zero-based -- typically you will want to add
    //  1 to each before displaying to a user.
    this._span = new ARRAY<INT32, number>(undefined, this, 'span');

    //  If this SourceCodeInfo represents a complete declaration, these are any
    //  comments appearing before and after the declaration which appear to be
    //  attached to the declaration.
    //
    //  A series of line comments appearing on consecutive lines, with no other
    //  tokens appearing on those lines, will be treated as a single comment.
    //
    //  leading_detached_comments will keep paragraphs of comments that appear
    //  before (but not connected to) the current element. Each paragraph,
    //  separated by empty lines, will be one comment element in the repeated
    //  field.
    //
    //  Only the comment content is provided; comment markers (e.g. //) are
    //  stripped out.  For block comments, leading whitespace and an asterisk
    //  will be stripped from the beginning of each line other than the first.
    //  Newlines are included in the output.
    //
    //  Examples:
    //
    //    optional int32 foo = 1;  // Comment attached to foo.
    //    // Comment attached to bar.
    //    optional int32 bar = 2;
    //
    //    optional string baz = 3;
    //    // Comment attached to baz.
    //    // Another line attached to baz.
    //
    //    // Comment attached to moo.
    //    //
    //    // Another line attached to moo.
    //    optional double moo = 4;
    //
    //    // Detached comment for corge. This is not leading or trailing comments
    //    // to moo or corge because there are blank lines separating it from
    //    // both.
    //
    //    // Detached comment for corge paragraph 2.
    //
    //    optional string corge = 5;
    //    /* Block comment attached
    //     * to corge.  Leading asterisks
    //     * will be removed. *\/
    //    /* Block comment attached to
    //     * grault. *\/
    //    optional int32 grault = 6;
    //
    //    // ignored detached comments.
    this._leadingComments = new STRING(undefined, this, 'leadingComments');

    this._trailingComments = new STRING(undefined, this, 'trailingComments');

    this._leadingDetachedComments = new ARRAY<STRING, string>(
      undefined,
      this,
      'leadingDetachedComments',
    );

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof SourceCodeInfoLocation] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (
        this[fieldName as keyof SourceCodeInfoLocation] as FieldNode
      ).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  Identifies which part of the FileDescriptorProto was defined at this
  //  location.
  //
  //  Each element is a field number or an index.  They form a path from
  //  the root FileDescriptorProto to the place where the definition occurs.
  //  For example, this path:
  //    [ 4, 3, 2, 7, 1 ]
  //  refers to:
  //    file.message_type(3)  // 4, 3
  //        .field(7)         // 2, 7
  //        .name()           // 1
  //  This is because FileDescriptorProto.message_type has field number 4:
  //    repeated DescriptorProto message_type = 4;
  //  and DescriptorProto.field has field number 2:
  //    repeated FieldDescriptorProto field = 2;
  //  and FieldDescriptorProto.name has field number 1:
  //    optional string name = 1;
  //
  //  Thus, the above path gives the location of a field name.  If we removed
  //  the last element:
  //    [ 4, 3, 2, 7 ]
  //  this path refers to the whole field declaration (from the beginning
  //  of the label to the terminating semicolon).
  public get path(): ARRAY<INT32, number> {
    return this._path;
  }

  public set path(v: number[]) {
    this.__TypeSetter(this._path, v);
  }

  //  Always has exactly three or four elements: start line, start column,
  //  end line (optional, otherwise assumed same as start line), end column.
  //  These are packed into a single field for efficiency.  Note that line
  //  and column numbers are zero-based -- typically you will want to add
  //  1 to each before displaying to a user.
  public get span(): ARRAY<INT32, number> {
    return this._span;
  }

  public set span(v: number[]) {
    this.__TypeSetter(this._span, v);
  }

  //  If this SourceCodeInfo represents a complete declaration, these are any
  //  comments appearing before and after the declaration which appear to be
  //  attached to the declaration.
  //
  //  A series of line comments appearing on consecutive lines, with no other
  //  tokens appearing on those lines, will be treated as a single comment.
  //
  //  leading_detached_comments will keep paragraphs of comments that appear
  //  before (but not connected to) the current element. Each paragraph,
  //  separated by empty lines, will be one comment element in the repeated
  //  field.
  //
  //  Only the comment content is provided; comment markers (e.g. //) are
  //  stripped out.  For block comments, leading whitespace and an asterisk
  //  will be stripped from the beginning of each line other than the first.
  //  Newlines are included in the output.
  //
  //  Examples:
  //
  //    optional int32 foo = 1;  // Comment attached to foo.
  //    // Comment attached to bar.
  //    optional int32 bar = 2;
  //
  //    optional string baz = 3;
  //    // Comment attached to baz.
  //    // Another line attached to baz.
  //
  //    // Comment attached to moo.
  //    //
  //    // Another line attached to moo.
  //    optional double moo = 4;
  //
  //    // Detached comment for corge. This is not leading or trailing comments
  //    // to moo or corge because there are blank lines separating it from
  //    // both.
  //
  //    // Detached comment for corge paragraph 2.
  //
  //    optional string corge = 5;
  //    /* Block comment attached
  //     * to corge.  Leading asterisks
  //     * will be removed. *\/
  //    /* Block comment attached to
  //     * grault. *\/
  //    optional int32 grault = 6;
  //
  //    // ignored detached comments.
  public get leadingComments(): STRING {
    return this._leadingComments;
  }

  public set leadingComments(v: string) {
    this.__PrimitivesSetter(this._leadingComments, v);
  }

  public get trailingComments(): STRING {
    return this._trailingComments;
  }

  public set trailingComments(v: string) {
    this.__PrimitivesSetter(this._trailingComments, v);
  }

  public get leadingDetachedComments(): ARRAY<STRING, string> {
    return this._leadingDetachedComments;
  }

  public set leadingDetachedComments(v: string[]) {
    this.__TypeSetter(this._leadingDetachedComments, v);
  }

  fromLiteral(data: ISourceCodeInfoLocation) {
    super.__fromLiteral(data);
  }

  toLiteral(): ISourceCodeInfoLocation {
    return super.__toLiteral();
  }
}

Registry.register(
  'google.protobuf.SourceCodeInfo.Location',
  SourceCodeInfoLocation,
);
