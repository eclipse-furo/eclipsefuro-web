// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  BOOLEAN,
  ENUM,
  FieldNode,
  Registry,
} from '@furo/open-models/dist/index';
import {
  FeatureSet as GoogleProtobufFeatureSet,
  IFeatureSet as IGoogleProtobufFeatureSet,
  TFeatureSet as TGoogleProtobufFeatureSet,
} from './FeatureSet';

import { FieldOptionsCType as GoogleProtobufFieldOptionsCType } from './FieldOptions.CType';

import {
  FieldOptionsEditionDefault as GoogleProtobufFieldOptionsEditionDefault,
  IFieldOptionsEditionDefault as IGoogleProtobufFieldOptionsEditionDefault,
  TFieldOptionsEditionDefault as TGoogleProtobufFieldOptionsEditionDefault,
} from './FieldOptions.EditionDefault';

import { FieldOptionsJSType as GoogleProtobufFieldOptionsJSType } from './FieldOptions.JSType';

import { FieldOptionsOptionRetention as GoogleProtobufFieldOptionsOptionRetention } from './FieldOptions.OptionRetention';

import { FieldOptionsOptionTargetType as GoogleProtobufFieldOptionsOptionTargetType } from './FieldOptions.OptionTargetType';

import {
  IUninterpretedOption as IGoogleProtobufUninterpretedOption,
  TUninterpretedOption as TGoogleProtobufUninterpretedOption,
  UninterpretedOption as GoogleProtobufUninterpretedOption,
} from './UninterpretedOption';

/**
 * @interface IFieldOptions
 */
export interface IFieldOptions {
  /**
   *  The ctype option instructs the C++ code generator to use a different
   *  representation of the field than it normally would.  See the specific
   *  options below.  This option is only implemented to support use of
   *  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
   *  type "bytes" in the open source release -- sorry, we'll try to include
   *  other types in a future version!
   */
  ctype?: GoogleProtobufFieldOptionsCType | string;
  /**
   *  The packed option can be enabled for repeated primitive fields to enable
   *  a more efficient representation on the wire. Rather than repeatedly
   *  writing the tag and type for each element, the entire array is encoded as
   *  a single length-delimited blob. In proto3, only explicit setting it to
   *  false will avoid using packed encoding.  This option is prohibited in
   *  Editions, but the `repeated_field_encoding` feature can be used to control
   *  the behavior.
   */
  packed?: boolean;
  /**
   *  The jstype option determines the JavaScript type used for values of the
   *  field.  The option is permitted only for 64 bit integral and fixed types
   *  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   *  is represented as JavaScript string, which avoids loss of precision that
   *  can happen when a large value is converted to a floating point JavaScript.
   *  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   *  use the JavaScript "number" type.  The behavior of the default option
   *  JS_NORMAL is implementation dependent.
   *
   *  This option is an enum to permit additional types to be added, e.g.
   *  goog.math.Integer.
   */
  jstype?: GoogleProtobufFieldOptionsJSType | string;
  /**
   *  Should this field be parsed lazily?  Lazy applies only to message-type
   *  fields.  It means that when the outer message is initially parsed, the
   *  inner message's contents will not be parsed but instead stored in encoded
   *  form.  The inner message will actually be parsed when it is first accessed.
   *
   *  This is only a hint.  Implementations are free to choose whether to use
   *  eager or lazy parsing regardless of the value of this option.  However,
   *  setting this option true suggests that the protocol author believes that
   *  using lazy parsing on this field is worth the additional bookkeeping
   *  overhead typically needed to implement it.
   *
   *  This option does not affect the public interface of any generated code;
   *  all method signatures remain the same.  Furthermore, thread-safety of the
   *  interface is not affected by this option; const methods remain safe to
   *  call from multiple threads concurrently, while non-const methods continue
   *  to require exclusive access.
   *
   *  Note that implementations may choose not to check required fields within
   *  a lazy sub-message.  That is, calling IsInitialized() on the outer message
   *  may return true even if the inner message has missing required fields.
   *  This is necessary because otherwise the inner message would have to be
   *  parsed in order to perform the check, defeating the purpose of lazy
   *  parsing.  An implementation which chooses not to check required fields
   *  must be consistent about it.  That is, for any particular sub-message, the
   *  implementation must either *always* check its required fields, or *never*
   *  check its required fields, regardless of whether or not the message has
   *  been parsed.
   *
   *  As of May 2022, lazy verifies the contents of the byte stream during
   *  parsing.  An invalid byte stream will cause the overall parsing to fail.
   */
  lazy?: boolean;
  /**
   *  unverified_lazy does no correctness checks on the byte stream. This should
   *  only be used where lazy with verification is prohibitive for performance
   *  reasons.
   */
  unverifiedLazy?: boolean;
  /**
   *  Is this field deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for accessors, or it will be completely ignored; in the very least, this
   *  is a formalization for deprecating fields.
   */
  deprecated?: boolean;
  /**
   *  For Google-internal migration only. Do not use.
   */
  weak?: boolean;
  /**
   *  Indicate that the field value should not be printed out when using debug
   *  formats, e.g. when the field contains sensitive credentials.
   */
  debugRedact?: boolean;
  retention?: GoogleProtobufFieldOptionsOptionRetention | string;
  targets?: GoogleProtobufFieldOptionsOptionTargetType[];
  editionDefaults?: IGoogleProtobufFieldOptionsEditionDefault[];
  /**
   *  Any features defined in the specific edition.
   */
  features?: IGoogleProtobufFeatureSet;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   */
  uninterpretedOption?: IGoogleProtobufUninterpretedOption[];
}

/**
 * @interface TFieldOptions
 */
export interface TFieldOptions {
  /**
   *  The ctype option instructs the C++ code generator to use a different
   *  representation of the field than it normally would.  See the specific
   *  options below.  This option is only implemented to support use of
   *  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
   *  type "bytes" in the open source release -- sorry, we'll try to include
   *  other types in a future version!
   */
  ctype?: GoogleProtobufFieldOptionsCType | string;
  /**
   *  The packed option can be enabled for repeated primitive fields to enable
   *  a more efficient representation on the wire. Rather than repeatedly
   *  writing the tag and type for each element, the entire array is encoded as
   *  a single length-delimited blob. In proto3, only explicit setting it to
   *  false will avoid using packed encoding.  This option is prohibited in
   *  Editions, but the `repeated_field_encoding` feature can be used to control
   *  the behavior.
   */
  packed?: boolean;
  /**
   *  The jstype option determines the JavaScript type used for values of the
   *  field.  The option is permitted only for 64 bit integral and fixed types
   *  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
   *  is represented as JavaScript string, which avoids loss of precision that
   *  can happen when a large value is converted to a floating point JavaScript.
   *  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
   *  use the JavaScript "number" type.  The behavior of the default option
   *  JS_NORMAL is implementation dependent.
   *
   *  This option is an enum to permit additional types to be added, e.g.
   *  goog.math.Integer.
   */
  jstype?: GoogleProtobufFieldOptionsJSType | string;
  /**
   *  Should this field be parsed lazily?  Lazy applies only to message-type
   *  fields.  It means that when the outer message is initially parsed, the
   *  inner message's contents will not be parsed but instead stored in encoded
   *  form.  The inner message will actually be parsed when it is first accessed.
   *
   *  This is only a hint.  Implementations are free to choose whether to use
   *  eager or lazy parsing regardless of the value of this option.  However,
   *  setting this option true suggests that the protocol author believes that
   *  using lazy parsing on this field is worth the additional bookkeeping
   *  overhead typically needed to implement it.
   *
   *  This option does not affect the public interface of any generated code;
   *  all method signatures remain the same.  Furthermore, thread-safety of the
   *  interface is not affected by this option; const methods remain safe to
   *  call from multiple threads concurrently, while non-const methods continue
   *  to require exclusive access.
   *
   *  Note that implementations may choose not to check required fields within
   *  a lazy sub-message.  That is, calling IsInitialized() on the outer message
   *  may return true even if the inner message has missing required fields.
   *  This is necessary because otherwise the inner message would have to be
   *  parsed in order to perform the check, defeating the purpose of lazy
   *  parsing.  An implementation which chooses not to check required fields
   *  must be consistent about it.  That is, for any particular sub-message, the
   *  implementation must either *always* check its required fields, or *never*
   *  check its required fields, regardless of whether or not the message has
   *  been parsed.
   *
   *  As of May 2022, lazy verifies the contents of the byte stream during
   *  parsing.  An invalid byte stream will cause the overall parsing to fail.
   */
  lazy?: boolean;
  /**
   *  unverified_lazy does no correctness checks on the byte stream. This should
   *  only be used where lazy with verification is prohibitive for performance
   *  reasons.
   */
  unverified_lazy?: boolean;
  /**
   *  Is this field deprecated?
   *  Depending on the target platform, this can emit Deprecated annotations
   *  for accessors, or it will be completely ignored; in the very least, this
   *  is a formalization for deprecating fields.
   */
  deprecated?: boolean;
  /**
   *  For Google-internal migration only. Do not use.
   */
  weak?: boolean;
  /**
   *  Indicate that the field value should not be printed out when using debug
   *  formats, e.g. when the field contains sensitive credentials.
   */
  debug_redact?: boolean;
  retention?: GoogleProtobufFieldOptionsOptionRetention | string;
  targets?: GoogleProtobufFieldOptionsOptionTargetType[];
  edition_defaults?: TGoogleProtobufFieldOptionsEditionDefault[];
  /**
   *  Any features defined in the specific edition.
   */
  features?: TGoogleProtobufFeatureSet;
  /**
   *  The parser stores options it doesn't recognize here. See above.
   */
  uninterpreted_option?: TGoogleProtobufUninterpretedOption[];
}

/**
 * FieldOptions
 */
export class FieldOptions extends FieldNode {
  //  The ctype option instructs the C++ code generator to use a different
  //  representation of the field than it normally would.  See the specific
  //  options below.  This option is only implemented to support use of
  //  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
  //  type "bytes" in the open source release -- sorry, we'll try to include
  //  other types in a future version!
  private _ctype: ENUM<GoogleProtobufFieldOptionsCType>;

  //  The packed option can be enabled for repeated primitive fields to enable
  //  a more efficient representation on the wire. Rather than repeatedly
  //  writing the tag and type for each element, the entire array is encoded as
  //  a single length-delimited blob. In proto3, only explicit setting it to
  //  false will avoid using packed encoding.  This option is prohibited in
  //  Editions, but the `repeated_field_encoding` feature can be used to control
  //  the behavior.
  private _packed: BOOLEAN;

  //  The jstype option determines the JavaScript type used for values of the
  //  field.  The option is permitted only for 64 bit integral and fixed types
  //  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  //  is represented as JavaScript string, which avoids loss of precision that
  //  can happen when a large value is converted to a floating point JavaScript.
  //  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  //  use the JavaScript "number" type.  The behavior of the default option
  //  JS_NORMAL is implementation dependent.
  //
  //  This option is an enum to permit additional types to be added, e.g.
  //  goog.math.Integer.
  private _jstype: ENUM<GoogleProtobufFieldOptionsJSType>;

  //  Should this field be parsed lazily?  Lazy applies only to message-type
  //  fields.  It means that when the outer message is initially parsed, the
  //  inner message's contents will not be parsed but instead stored in encoded
  //  form.  The inner message will actually be parsed when it is first accessed.
  //
  //  This is only a hint.  Implementations are free to choose whether to use
  //  eager or lazy parsing regardless of the value of this option.  However,
  //  setting this option true suggests that the protocol author believes that
  //  using lazy parsing on this field is worth the additional bookkeeping
  //  overhead typically needed to implement it.
  //
  //  This option does not affect the public interface of any generated code;
  //  all method signatures remain the same.  Furthermore, thread-safety of the
  //  interface is not affected by this option; const methods remain safe to
  //  call from multiple threads concurrently, while non-const methods continue
  //  to require exclusive access.
  //
  //  Note that implementations may choose not to check required fields within
  //  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  //  may return true even if the inner message has missing required fields.
  //  This is necessary because otherwise the inner message would have to be
  //  parsed in order to perform the check, defeating the purpose of lazy
  //  parsing.  An implementation which chooses not to check required fields
  //  must be consistent about it.  That is, for any particular sub-message, the
  //  implementation must either *always* check its required fields, or *never*
  //  check its required fields, regardless of whether or not the message has
  //  been parsed.
  //
  //  As of May 2022, lazy verifies the contents of the byte stream during
  //  parsing.  An invalid byte stream will cause the overall parsing to fail.
  private _lazy: BOOLEAN;

  //  unverified_lazy does no correctness checks on the byte stream. This should
  //  only be used where lazy with verification is prohibitive for performance
  //  reasons.
  private _unverifiedLazy: BOOLEAN;

  //  Is this field deprecated?
  //  Depending on the target platform, this can emit Deprecated annotations
  //  for accessors, or it will be completely ignored; in the very least, this
  //  is a formalization for deprecating fields.
  private _deprecated: BOOLEAN;

  //  For Google-internal migration only. Do not use.
  private _weak: BOOLEAN;

  //  Indicate that the field value should not be printed out when using debug
  //  formats, e.g. when the field contains sensitive credentials.
  private _debugRedact: BOOLEAN;

  private _retention: ENUM<GoogleProtobufFieldOptionsOptionRetention>;

  private _targets: ENUM<GoogleProtobufFieldOptionsOptionTargetType>;

  private _editionDefaults: ARRAY<
    GoogleProtobufFieldOptionsEditionDefault,
    IGoogleProtobufFieldOptionsEditionDefault
  >;

  //  Any features defined in the specific edition.
  private _features: GoogleProtobufFeatureSet;

  //  The parser stores options it doesn't recognize here. See above.
  private _uninterpretedOption: ARRAY<
    GoogleProtobufUninterpretedOption,
    IGoogleProtobufUninterpretedOption
  >;

  public __defaultValues: IFieldOptions;

  constructor(
    initData?: IFieldOptions,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.FieldOptions';

    this.__meta.nodeFields = [
      {
        fieldName: 'ctype',
        protoName: 'ctype',
        FieldConstructor: ENUM<GoogleProtobufFieldOptionsCType>,
        constraints: {},
      },
      {
        fieldName: 'packed',
        protoName: 'packed',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'jstype',
        protoName: 'jstype',
        FieldConstructor: ENUM<GoogleProtobufFieldOptionsJSType>,
        constraints: {},
      },
      {
        fieldName: 'lazy',
        protoName: 'lazy',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'unverifiedLazy',
        protoName: 'unverified_lazy',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'deprecated',
        protoName: 'deprecated',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'weak',
        protoName: 'weak',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'debugRedact',
        protoName: 'debug_redact',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'retention',
        protoName: 'retention',
        FieldConstructor: ENUM<GoogleProtobufFieldOptionsOptionRetention>,
        constraints: {},
      },
      {
        fieldName: 'targets',
        protoName: 'targets',
        FieldConstructor: ENUM<GoogleProtobufFieldOptionsOptionTargetType>,
        constraints: {},
      },
      {
        fieldName: 'editionDefaults',
        protoName: 'edition_defaults',
        FieldConstructor: GoogleProtobufFieldOptionsEditionDefault,
        constraints: {},
      },
      {
        fieldName: 'features',
        protoName: 'features',
        FieldConstructor: GoogleProtobufFeatureSet,
        constraints: {},
      },
      {
        fieldName: 'uninterpretedOption',
        protoName: 'uninterpreted_option',
        FieldConstructor: GoogleProtobufUninterpretedOption,
        constraints: {},
      },
    ];

    // Initialize the fields
    //  The ctype option instructs the C++ code generator to use a different
    //  representation of the field than it normally would.  See the specific
    //  options below.  This option is only implemented to support use of
    //  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
    //  type "bytes" in the open source release -- sorry, we'll try to include
    //  other types in a future version!
    this._ctype = new ENUM<GoogleProtobufFieldOptionsCType>(
      undefined,
      GoogleProtobufFieldOptionsCType,
      GoogleProtobufFieldOptionsCType.STRING,
      this,
      'ctype',
    );

    //  The packed option can be enabled for repeated primitive fields to enable
    //  a more efficient representation on the wire. Rather than repeatedly
    //  writing the tag and type for each element, the entire array is encoded as
    //  a single length-delimited blob. In proto3, only explicit setting it to
    //  false will avoid using packed encoding.  This option is prohibited in
    //  Editions, but the `repeated_field_encoding` feature can be used to control
    //  the behavior.
    this._packed = new BOOLEAN(undefined, this, 'packed');

    //  The jstype option determines the JavaScript type used for values of the
    //  field.  The option is permitted only for 64 bit integral and fixed types
    //  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
    //  is represented as JavaScript string, which avoids loss of precision that
    //  can happen when a large value is converted to a floating point JavaScript.
    //  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
    //  use the JavaScript "number" type.  The behavior of the default option
    //  JS_NORMAL is implementation dependent.
    //
    //  This option is an enum to permit additional types to be added, e.g.
    //  goog.math.Integer.
    this._jstype = new ENUM<GoogleProtobufFieldOptionsJSType>(
      undefined,
      GoogleProtobufFieldOptionsJSType,
      GoogleProtobufFieldOptionsJSType.JS_NORMAL,
      this,
      'jstype',
    );

    //  Should this field be parsed lazily?  Lazy applies only to message-type
    //  fields.  It means that when the outer message is initially parsed, the
    //  inner message's contents will not be parsed but instead stored in encoded
    //  form.  The inner message will actually be parsed when it is first accessed.
    //
    //  This is only a hint.  Implementations are free to choose whether to use
    //  eager or lazy parsing regardless of the value of this option.  However,
    //  setting this option true suggests that the protocol author believes that
    //  using lazy parsing on this field is worth the additional bookkeeping
    //  overhead typically needed to implement it.
    //
    //  This option does not affect the public interface of any generated code;
    //  all method signatures remain the same.  Furthermore, thread-safety of the
    //  interface is not affected by this option; const methods remain safe to
    //  call from multiple threads concurrently, while non-const methods continue
    //  to require exclusive access.
    //
    //  Note that implementations may choose not to check required fields within
    //  a lazy sub-message.  That is, calling IsInitialized() on the outer message
    //  may return true even if the inner message has missing required fields.
    //  This is necessary because otherwise the inner message would have to be
    //  parsed in order to perform the check, defeating the purpose of lazy
    //  parsing.  An implementation which chooses not to check required fields
    //  must be consistent about it.  That is, for any particular sub-message, the
    //  implementation must either *always* check its required fields, or *never*
    //  check its required fields, regardless of whether or not the message has
    //  been parsed.
    //
    //  As of May 2022, lazy verifies the contents of the byte stream during
    //  parsing.  An invalid byte stream will cause the overall parsing to fail.
    this._lazy = new BOOLEAN(undefined, this, 'lazy');

    //  unverified_lazy does no correctness checks on the byte stream. This should
    //  only be used where lazy with verification is prohibitive for performance
    //  reasons.
    this._unverifiedLazy = new BOOLEAN(undefined, this, 'unverifiedLazy');

    //  Is this field deprecated?
    //  Depending on the target platform, this can emit Deprecated annotations
    //  for accessors, or it will be completely ignored; in the very least, this
    //  is a formalization for deprecating fields.
    this._deprecated = new BOOLEAN(undefined, this, 'deprecated');

    //  For Google-internal migration only. Do not use.
    this._weak = new BOOLEAN(undefined, this, 'weak');

    //  Indicate that the field value should not be printed out when using debug
    //  formats, e.g. when the field contains sensitive credentials.
    this._debugRedact = new BOOLEAN(undefined, this, 'debugRedact');

    this._retention = new ENUM<GoogleProtobufFieldOptionsOptionRetention>(
      undefined,
      GoogleProtobufFieldOptionsOptionRetention,
      GoogleProtobufFieldOptionsOptionRetention.RETENTION_UNKNOWN,
      this,
      'retention',
    );

    this._targets = new ENUM<GoogleProtobufFieldOptionsOptionTargetType>(
      undefined,
      GoogleProtobufFieldOptionsOptionTargetType,
      GoogleProtobufFieldOptionsOptionTargetType.TARGET_TYPE_UNKNOWN,
      this,
      'targets',
    );

    this._editionDefaults = new ARRAY<
      GoogleProtobufFieldOptionsEditionDefault,
      IGoogleProtobufFieldOptionsEditionDefault
    >(undefined, this, 'editionDefaults');

    //  Any features defined in the specific edition.
    this._features = new GoogleProtobufFeatureSet(undefined, this, 'features');

    //  The parser stores options it doesn't recognize here. See above.
    this._uninterpretedOption = new ARRAY<
      GoogleProtobufUninterpretedOption,
      IGoogleProtobufUninterpretedOption
    >(undefined, this, 'uninterpretedOption');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof FieldOptions] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof FieldOptions] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  //  The ctype option instructs the C++ code generator to use a different
  //  representation of the field than it normally would.  See the specific
  //  options below.  This option is only implemented to support use of
  //  [ctype=CORD] and [ctype=STRING] (the default) on non-repeated fields of
  //  type "bytes" in the open source release -- sorry, we'll try to include
  //  other types in a future version!
  public get ctype(): ENUM<GoogleProtobufFieldOptionsCType> {
    return this._ctype;
  }

  public set ctype(v: GoogleProtobufFieldOptionsCType) {
    this.__TypeSetter(this._ctype, v);
  }

  //  The packed option can be enabled for repeated primitive fields to enable
  //  a more efficient representation on the wire. Rather than repeatedly
  //  writing the tag and type for each element, the entire array is encoded as
  //  a single length-delimited blob. In proto3, only explicit setting it to
  //  false will avoid using packed encoding.  This option is prohibited in
  //  Editions, but the `repeated_field_encoding` feature can be used to control
  //  the behavior.
  public get packed(): BOOLEAN {
    return this._packed;
  }

  public set packed(v: boolean) {
    this.__PrimitivesSetter(this._packed, v);
  }

  //  The jstype option determines the JavaScript type used for values of the
  //  field.  The option is permitted only for 64 bit integral and fixed types
  //  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  //  is represented as JavaScript string, which avoids loss of precision that
  //  can happen when a large value is converted to a floating point JavaScript.
  //  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  //  use the JavaScript "number" type.  The behavior of the default option
  //  JS_NORMAL is implementation dependent.
  //
  //  This option is an enum to permit additional types to be added, e.g.
  //  goog.math.Integer.
  public get jstype(): ENUM<GoogleProtobufFieldOptionsJSType> {
    return this._jstype;
  }

  public set jstype(v: GoogleProtobufFieldOptionsJSType) {
    this.__TypeSetter(this._jstype, v);
  }

  //  Should this field be parsed lazily?  Lazy applies only to message-type
  //  fields.  It means that when the outer message is initially parsed, the
  //  inner message's contents will not be parsed but instead stored in encoded
  //  form.  The inner message will actually be parsed when it is first accessed.
  //
  //  This is only a hint.  Implementations are free to choose whether to use
  //  eager or lazy parsing regardless of the value of this option.  However,
  //  setting this option true suggests that the protocol author believes that
  //  using lazy parsing on this field is worth the additional bookkeeping
  //  overhead typically needed to implement it.
  //
  //  This option does not affect the public interface of any generated code;
  //  all method signatures remain the same.  Furthermore, thread-safety of the
  //  interface is not affected by this option; const methods remain safe to
  //  call from multiple threads concurrently, while non-const methods continue
  //  to require exclusive access.
  //
  //  Note that implementations may choose not to check required fields within
  //  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  //  may return true even if the inner message has missing required fields.
  //  This is necessary because otherwise the inner message would have to be
  //  parsed in order to perform the check, defeating the purpose of lazy
  //  parsing.  An implementation which chooses not to check required fields
  //  must be consistent about it.  That is, for any particular sub-message, the
  //  implementation must either *always* check its required fields, or *never*
  //  check its required fields, regardless of whether or not the message has
  //  been parsed.
  //
  //  As of May 2022, lazy verifies the contents of the byte stream during
  //  parsing.  An invalid byte stream will cause the overall parsing to fail.
  public get lazy(): BOOLEAN {
    return this._lazy;
  }

  public set lazy(v: boolean) {
    this.__PrimitivesSetter(this._lazy, v);
  }

  //  unverified_lazy does no correctness checks on the byte stream. This should
  //  only be used where lazy with verification is prohibitive for performance
  //  reasons.
  public get unverifiedLazy(): BOOLEAN {
    return this._unverifiedLazy;
  }

  public set unverifiedLazy(v: boolean) {
    this.__PrimitivesSetter(this._unverifiedLazy, v);
  }

  //  Is this field deprecated?
  //  Depending on the target platform, this can emit Deprecated annotations
  //  for accessors, or it will be completely ignored; in the very least, this
  //  is a formalization for deprecating fields.
  public get deprecated(): BOOLEAN {
    return this._deprecated;
  }

  public set deprecated(v: boolean) {
    this.__PrimitivesSetter(this._deprecated, v);
  }

  //  For Google-internal migration only. Do not use.
  public get weak(): BOOLEAN {
    return this._weak;
  }

  public set weak(v: boolean) {
    this.__PrimitivesSetter(this._weak, v);
  }

  //  Indicate that the field value should not be printed out when using debug
  //  formats, e.g. when the field contains sensitive credentials.
  public get debugRedact(): BOOLEAN {
    return this._debugRedact;
  }

  public set debugRedact(v: boolean) {
    this.__PrimitivesSetter(this._debugRedact, v);
  }

  public get retention(): ENUM<GoogleProtobufFieldOptionsOptionRetention> {
    return this._retention;
  }

  public set retention(v: GoogleProtobufFieldOptionsOptionRetention) {
    this.__TypeSetter(this._retention, v);
  }

  public get targets(): ENUM<GoogleProtobufFieldOptionsOptionTargetType> {
    return this._targets;
  }

  public set targets(v: GoogleProtobufFieldOptionsOptionTargetType) {
    this.__TypeSetter(this._targets, v);
  }

  public get editionDefaults(): ARRAY<
    GoogleProtobufFieldOptionsEditionDefault,
    IGoogleProtobufFieldOptionsEditionDefault
  > {
    return this._editionDefaults;
  }

  public set editionDefaults(v: IGoogleProtobufFieldOptionsEditionDefault[]) {
    this.__TypeSetter(this._editionDefaults, v);
  }

  //  Any features defined in the specific edition.
  public get features(): GoogleProtobufFeatureSet {
    return this._features;
  }

  public set features(v: IGoogleProtobufFeatureSet) {
    this.__TypeSetter(this._features, v);
  }

  //  The parser stores options it doesn't recognize here. See above.
  public get uninterpretedOption(): ARRAY<
    GoogleProtobufUninterpretedOption,
    IGoogleProtobufUninterpretedOption
  > {
    return this._uninterpretedOption;
  }

  public set uninterpretedOption(v: IGoogleProtobufUninterpretedOption[]) {
    this.__TypeSetter(this._uninterpretedOption, v);
  }

  fromLiteral(data: IFieldOptions) {
    super.__fromLiteral(data);
  }

  toLiteral(): IFieldOptions {
    return super.__toLiteral();
  }
}

Registry.register('google.protobuf.FieldOptions', FieldOptions);
