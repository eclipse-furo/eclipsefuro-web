// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, Registry, STRING } from '@furo/open-models/dist/index';
import {
  IOneofOptions as IGoogleProtobufOneofOptions,
  OneofOptions as GoogleProtobufOneofOptions,
  TOneofOptions as TGoogleProtobufOneofOptions,
} from './OneofOptions';

/**
 * @interface IOneofDescriptorProto
 *  Describes a oneof.
 */
export interface IOneofDescriptorProto {
  name?: string;
  options?: IGoogleProtobufOneofOptions;
}

/**
 * @interface TOneofDescriptorProto
 *  Describes a oneof.
 */
export interface TOneofDescriptorProto {
  name?: string;
  options?: TGoogleProtobufOneofOptions;
}

/**
 * OneofDescriptorProto
 *  Describes a oneof.
 */
export class OneofDescriptorProto extends FieldNode {
  private _name: STRING;

  private _options: GoogleProtobufOneofOptions;

  public __defaultValues: IOneofDescriptorProto;

  constructor(
    initData?: IOneofDescriptorProto,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'google.protobuf.OneofDescriptorProto';

    this.__meta.nodeFields = [
      {
        fieldName: 'name',
        protoName: 'name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'options',
        protoName: 'options',
        FieldConstructor: GoogleProtobufOneofOptions,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._name = new STRING(undefined, this, 'name');

    this._options = new GoogleProtobufOneofOptions(undefined, this, 'options');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof OneofDescriptorProto] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof OneofDescriptorProto] as FieldNode).__readonly =
        true;
    });

    this.__meta.isPristine = true;
  }

  public get name(): STRING {
    return this._name;
  }

  public set name(v: string) {
    this.__PrimitivesSetter(this._name, v);
  }

  public get options(): GoogleProtobufOneofOptions {
    return this._options;
  }

  public set options(v: IGoogleProtobufOneofOptions) {
    this.__TypeSetter(this._options, v);
  }

  fromLiteral(data: IOneofDescriptorProto) {
    super.__fromLiteral(data);
  }

  toLiteral(): IOneofDescriptorProto {
    return super.__toLiteral();
  }
}

Registry.register('google.protobuf.OneofDescriptorProto', OneofDescriptorProto);
