// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { ARRAY, FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

import {
  IOauthFlow as IOpenapiV3OauthFlow,
  OauthFlow as OpenapiV3OauthFlow,
  TOauthFlow as TOpenapiV3OauthFlow,
} from './OauthFlow';

/**
 * @interface IOauthFlows
 *  Allows configuration of the supported OAuth Flows.
 */
export interface IOauthFlows {
  implicit?: IOpenapiV3OauthFlow;
  password?: IOpenapiV3OauthFlow;
  clientCredentials?: IOpenapiV3OauthFlow;
  authorizationCode?: IOpenapiV3OauthFlow;
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TOauthFlows
 *  Allows configuration of the supported OAuth Flows.
 */
export interface TOauthFlows {
  implicit?: TOpenapiV3OauthFlow;
  password?: TOpenapiV3OauthFlow;
  client_credentials?: TOpenapiV3OauthFlow;
  authorization_code?: TOpenapiV3OauthFlow;
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * OauthFlows
 *  Allows configuration of the supported OAuth Flows.
 */
export class OauthFlows extends FieldNode {
  private _implicit: OpenapiV3OauthFlow;

  private _password: OpenapiV3OauthFlow;

  private _clientCredentials: OpenapiV3OauthFlow;

  private _authorizationCode: OpenapiV3OauthFlow;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: IOauthFlows;

  constructor(
    initData?: IOauthFlows,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.OauthFlows';

    this.__meta.nodeFields = [
      {
        fieldName: 'implicit',
        protoName: 'implicit',
        FieldConstructor: OpenapiV3OauthFlow,
        constraints: {},
      },
      {
        fieldName: 'password',
        protoName: 'password',
        FieldConstructor: OpenapiV3OauthFlow,
        constraints: {},
      },
      {
        fieldName: 'clientCredentials',
        protoName: 'client_credentials',
        FieldConstructor: OpenapiV3OauthFlow,
        constraints: {},
      },
      {
        fieldName: 'authorizationCode',
        protoName: 'authorization_code',
        FieldConstructor: OpenapiV3OauthFlow,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._implicit = new OpenapiV3OauthFlow(undefined, this, 'implicit');

    this._password = new OpenapiV3OauthFlow(undefined, this, 'password');

    this._clientCredentials = new OpenapiV3OauthFlow(
      undefined,
      this,
      'clientCredentials',
    );

    this._authorizationCode = new OpenapiV3OauthFlow(
      undefined,
      this,
      'authorizationCode',
    );

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof OauthFlows] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof OauthFlows] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get implicit(): OpenapiV3OauthFlow {
    return this._implicit;
  }

  public set implicit(v: IOpenapiV3OauthFlow) {
    this.__TypeSetter(this._implicit, v);
  }

  public get password(): OpenapiV3OauthFlow {
    return this._password;
  }

  public set password(v: IOpenapiV3OauthFlow) {
    this.__TypeSetter(this._password, v);
  }

  public get clientCredentials(): OpenapiV3OauthFlow {
    return this._clientCredentials;
  }

  public set clientCredentials(v: IOpenapiV3OauthFlow) {
    this.__TypeSetter(this._clientCredentials, v);
  }

  public get authorizationCode(): OpenapiV3OauthFlow {
    return this._authorizationCode;
  }

  public set authorizationCode(v: IOpenapiV3OauthFlow) {
    this.__TypeSetter(this._authorizationCode, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: IOauthFlows) {
    super.__fromLiteral(data);
  }

  toLiteral(): IOauthFlows {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.OauthFlows', OauthFlows);
