// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';

/**
 * @interface IStringArray
 */
export interface IStringArray {
  value?: string[];
}

/**
 * @interface TStringArray
 */
export interface TStringArray {
  value?: string[];
}

/**
 * StringArray
 */
export class StringArray extends FieldNode {
  private _value: ARRAY<STRING, string>;

  public __defaultValues: IStringArray;

  constructor(
    initData?: IStringArray,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.StringArray';

    this.__meta.nodeFields = [
      {
        fieldName: 'value',
        protoName: 'value',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._value = new ARRAY<STRING, string>(undefined, this, 'value');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof StringArray] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof StringArray] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get value(): ARRAY<STRING, string> {
    return this._value;
  }

  public set value(v: string[]) {
    this.__TypeSetter(this._value, v);
  }

  fromLiteral(data: IStringArray) {
    super.__fromLiteral(data);
  }

  toLiteral(): IStringArray {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.StringArray', StringArray);
