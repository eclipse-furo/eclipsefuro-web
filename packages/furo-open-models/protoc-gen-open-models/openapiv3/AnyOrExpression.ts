// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  IXAny as IOpenapiV3Any,
  TXAny as TOpenapiV3Any,
  XAny as OpenapiV3Any,
} from './Any';

import {
  Expression as OpenapiV3Expression,
  IExpression as IOpenapiV3Expression,
  TExpression as TOpenapiV3Expression,
} from './Expression';

/**
 * @interface IAnyOrExpression
 */
export interface IAnyOrExpression {
  any?: IOpenapiV3Any;
  expression?: IOpenapiV3Expression;
}

/**
 * @interface TAnyOrExpression
 */
export interface TAnyOrExpression {
  any?: TOpenapiV3Any;
  expression?: TOpenapiV3Expression;
}

/**
 * AnyOrExpression
 */
export class AnyOrExpression extends FieldNode {
  private _any: OpenapiV3Any;

  private _expression: OpenapiV3Expression;

  public __defaultValues: IAnyOrExpression;

  constructor(
    initData?: IAnyOrExpression,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.AnyOrExpression';

    this.__meta.nodeFields = [
      {
        fieldName: 'any',
        protoName: 'any',
        FieldConstructor: OpenapiV3Any,
        constraints: {},
      },
      {
        fieldName: 'expression',
        protoName: 'expression',
        FieldConstructor: OpenapiV3Expression,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._any = new OpenapiV3Any(undefined, this, 'any');

    this._expression = new OpenapiV3Expression(undefined, this, 'expression');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof AnyOrExpression] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof AnyOrExpression] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get any(): OpenapiV3Any {
    return this._any;
  }

  public set any(v: IOpenapiV3Any) {
    this.__TypeSetter(this._any, v);
  }

  public get expression(): OpenapiV3Expression {
    return this._expression;
  }

  public set expression(v: IOpenapiV3Expression) {
    this.__TypeSetter(this._expression, v);
  }

  fromLiteral(data: IAnyOrExpression) {
    super.__fromLiteral(data);
  }

  toLiteral(): IAnyOrExpression {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.AnyOrExpression', AnyOrExpression);
