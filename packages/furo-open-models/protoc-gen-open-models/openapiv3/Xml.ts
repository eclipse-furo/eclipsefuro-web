// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  BOOLEAN,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';
import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

/**
 * @interface IXml
 *  A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export interface IXml {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TXml
 *  A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export interface TXml {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * Xml
 *  A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export class Xml extends FieldNode {
  private _name: STRING;

  private _namespace: STRING;

  private _prefix: STRING;

  private _attribute: BOOLEAN;

  private _wrapped: BOOLEAN;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: IXml;

  constructor(
    initData?: IXml,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.Xml';

    this.__meta.nodeFields = [
      {
        fieldName: 'name',
        protoName: 'name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'namespace',
        protoName: 'namespace',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'prefix',
        protoName: 'prefix',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'attribute',
        protoName: 'attribute',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'wrapped',
        protoName: 'wrapped',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._name = new STRING(undefined, this, 'name');

    this._namespace = new STRING(undefined, this, 'namespace');

    this._prefix = new STRING(undefined, this, 'prefix');

    this._attribute = new BOOLEAN(undefined, this, 'attribute');

    this._wrapped = new BOOLEAN(undefined, this, 'wrapped');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Xml] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Xml] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get name(): STRING {
    return this._name;
  }

  public set name(v: string) {
    this.__PrimitivesSetter(this._name, v);
  }

  public get namespace(): STRING {
    return this._namespace;
  }

  public set namespace(v: string) {
    this.__PrimitivesSetter(this._namespace, v);
  }

  public get prefix(): STRING {
    return this._prefix;
  }

  public set prefix(v: string) {
    this.__PrimitivesSetter(this._prefix, v);
  }

  public get attribute(): BOOLEAN {
    return this._attribute;
  }

  public set attribute(v: boolean) {
    this.__PrimitivesSetter(this._attribute, v);
  }

  public get wrapped(): BOOLEAN {
    return this._wrapped;
  }

  public set wrapped(v: boolean) {
    this.__PrimitivesSetter(this._wrapped, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: IXml) {
    super.__fromLiteral(data);
  }

  toLiteral(): IXml {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.Xml', Xml);
