// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';
import {
  Contact as OpenapiV3Contact,
  IContact as IOpenapiV3Contact,
  TContact as TOpenapiV3Contact,
} from './Contact';

import {
  ILicense as IOpenapiV3License,
  License as OpenapiV3License,
  TLicense as TOpenapiV3License,
} from './License';

import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

/**
 * @interface IInfo
 *  The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.
 */
export interface IInfo {
  title?: string;
  description?: string;
  termsOfService?: string;
  contact?: IOpenapiV3Contact;
  license?: IOpenapiV3License;
  version?: string;
  specificationExtension?: IOpenapiV3NamedAny[];
  summary?: string;
}

/**
 * @interface TInfo
 *  The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.
 */
export interface TInfo {
  title?: string;
  description?: string;
  terms_of_service?: string;
  contact?: TOpenapiV3Contact;
  license?: TOpenapiV3License;
  version?: string;
  specification_extension?: TOpenapiV3NamedAny[];
  summary?: string;
}

/**
 * Info
 *  The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.
 */
export class Info extends FieldNode {
  private _title: STRING;

  private _description: STRING;

  private _termsOfService: STRING;

  private _contact: OpenapiV3Contact;

  private _license: OpenapiV3License;

  private _version: STRING;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  private _summary: STRING;

  public __defaultValues: IInfo;

  constructor(
    initData?: IInfo,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.Info';

    this.__meta.nodeFields = [
      {
        fieldName: 'title',
        protoName: 'title',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'description',
        protoName: 'description',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'termsOfService',
        protoName: 'terms_of_service',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'contact',
        protoName: 'contact',
        FieldConstructor: OpenapiV3Contact,
        constraints: {},
      },
      {
        fieldName: 'license',
        protoName: 'license',
        FieldConstructor: OpenapiV3License,
        constraints: {},
      },
      {
        fieldName: 'version',
        protoName: 'version',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
      {
        fieldName: 'summary',
        protoName: 'summary',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._title = new STRING(undefined, this, 'title');

    this._description = new STRING(undefined, this, 'description');

    this._termsOfService = new STRING(undefined, this, 'termsOfService');

    this._contact = new OpenapiV3Contact(undefined, this, 'contact');

    this._license = new OpenapiV3License(undefined, this, 'license');

    this._version = new STRING(undefined, this, 'version');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    this._summary = new STRING(undefined, this, 'summary');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Info] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Info] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get title(): STRING {
    return this._title;
  }

  public set title(v: string) {
    this.__PrimitivesSetter(this._title, v);
  }

  public get description(): STRING {
    return this._description;
  }

  public set description(v: string) {
    this.__PrimitivesSetter(this._description, v);
  }

  public get termsOfService(): STRING {
    return this._termsOfService;
  }

  public set termsOfService(v: string) {
    this.__PrimitivesSetter(this._termsOfService, v);
  }

  public get contact(): OpenapiV3Contact {
    return this._contact;
  }

  public set contact(v: IOpenapiV3Contact) {
    this.__TypeSetter(this._contact, v);
  }

  public get license(): OpenapiV3License {
    return this._license;
  }

  public set license(v: IOpenapiV3License) {
    this.__TypeSetter(this._license, v);
  }

  public get version(): STRING {
    return this._version;
  }

  public set version(v: string) {
    this.__PrimitivesSetter(this._version, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  public get summary(): STRING {
    return this._summary;
  }

  public set summary(v: string) {
    this.__PrimitivesSetter(this._summary, v);
  }

  fromLiteral(data: IInfo) {
    super.__fromLiteral(data);
  }

  toLiteral(): IInfo {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.Info', Info);
