// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ANY,
  FieldNode,
  Registry,
  STRING,
  type IAny,
} from '@furo/open-models/dist/index';

/**
 * @interface IXAny
 */
export interface IXAny {
  value?: IAny;
  yaml?: string;
}

/**
 * @interface TXAny
 */
export interface TXAny {
  value?: IAny;
  yaml?: string;
}

/**
 * XAny
 */
export class XAny extends FieldNode {
  private _value: ANY;

  private _yaml: STRING;

  public __defaultValues: IXAny;

  constructor(
    initData?: IXAny,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.Any';

    this.__meta.nodeFields = [
      {
        fieldName: 'value',
        protoName: 'value',
        FieldConstructor: ANY,
        constraints: {},
      },
      {
        fieldName: 'yaml',
        protoName: 'yaml',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._value = new ANY(undefined, this, 'value');

    this._yaml = new STRING(undefined, this, 'yaml');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof XAny] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof XAny] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get value(): ANY {
    return this._value;
  }

  public set value(v: IAny) {
    this.__TypeSetter(this._value, v);
  }

  public get yaml(): STRING {
    return this._yaml;
  }

  public set yaml(v: string) {
    this.__PrimitivesSetter(this._yaml, v);
  }

  fromLiteral(data: IXAny) {
    super.__fromLiteral(data);
  }

  toLiteral(): IXAny {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.Any', XAny);
