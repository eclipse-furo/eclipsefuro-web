// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';
import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

import {
  IStrings as IOpenapiV3Strings,
  Strings as OpenapiV3Strings,
  TStrings as TOpenapiV3Strings,
} from './Strings';

/**
 * @interface IOauthFlow
 *  Configuration details for a supported OAuth Flow
 */
export interface IOauthFlow {
  authorizationUrl?: string;
  tokenUrl?: string;
  refreshUrl?: string;
  scopes?: IOpenapiV3Strings;
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TOauthFlow
 *  Configuration details for a supported OAuth Flow
 */
export interface TOauthFlow {
  authorization_url?: string;
  token_url?: string;
  refresh_url?: string;
  scopes?: TOpenapiV3Strings;
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * OauthFlow
 *  Configuration details for a supported OAuth Flow
 */
export class OauthFlow extends FieldNode {
  private _authorizationUrl: STRING;

  private _tokenUrl: STRING;

  private _refreshUrl: STRING;

  private _scopes: OpenapiV3Strings;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: IOauthFlow;

  constructor(
    initData?: IOauthFlow,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.OauthFlow';

    this.__meta.nodeFields = [
      {
        fieldName: 'authorizationUrl',
        protoName: 'authorization_url',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'tokenUrl',
        protoName: 'token_url',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'refreshUrl',
        protoName: 'refresh_url',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'scopes',
        protoName: 'scopes',
        FieldConstructor: OpenapiV3Strings,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._authorizationUrl = new STRING(undefined, this, 'authorizationUrl');

    this._tokenUrl = new STRING(undefined, this, 'tokenUrl');

    this._refreshUrl = new STRING(undefined, this, 'refreshUrl');

    this._scopes = new OpenapiV3Strings(undefined, this, 'scopes');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof OauthFlow] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof OauthFlow] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get authorizationUrl(): STRING {
    return this._authorizationUrl;
  }

  public set authorizationUrl(v: string) {
    this.__PrimitivesSetter(this._authorizationUrl, v);
  }

  public get tokenUrl(): STRING {
    return this._tokenUrl;
  }

  public set tokenUrl(v: string) {
    this.__PrimitivesSetter(this._tokenUrl, v);
  }

  public get refreshUrl(): STRING {
    return this._refreshUrl;
  }

  public set refreshUrl(v: string) {
    this.__PrimitivesSetter(this._refreshUrl, v);
  }

  public get scopes(): OpenapiV3Strings {
    return this._scopes;
  }

  public set scopes(v: IOpenapiV3Strings) {
    this.__TypeSetter(this._scopes, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: IOauthFlow) {
    super.__fromLiteral(data);
  }

  toLiteral(): IOauthFlow {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.OauthFlow', OauthFlow);
