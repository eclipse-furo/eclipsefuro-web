// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  ARRAY,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';
import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

import {
  IOauthFlows as IOpenapiV3OauthFlows,
  OauthFlows as OpenapiV3OauthFlows,
  TOauthFlows as TOpenapiV3OauthFlows,
} from './OauthFlows';

/**
 * @interface ISecurityScheme
 *  Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect.   Please note that currently (2019) the implicit flow is about to be deprecated OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.
 */
export interface ISecurityScheme {
  type?: string;
  description?: string;
  name?: string;
  in?: string;
  scheme?: string;
  bearerFormat?: string;
  flows?: IOpenapiV3OauthFlows;
  openIdConnectUrl?: string;
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TSecurityScheme
 *  Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect.   Please note that currently (2019) the implicit flow is about to be deprecated OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.
 */
export interface TSecurityScheme {
  type?: string;
  description?: string;
  name?: string;
  in?: string;
  scheme?: string;
  bearer_format?: string;
  flows?: TOpenapiV3OauthFlows;
  open_id_connect_url?: string;
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * SecurityScheme
 *  Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect.   Please note that currently (2019) the implicit flow is about to be deprecated OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.
 */
export class SecurityScheme extends FieldNode {
  private _type: STRING;

  private _description: STRING;

  private _name: STRING;

  private _in: STRING;

  private _scheme: STRING;

  private _bearerFormat: STRING;

  private _flows: OpenapiV3OauthFlows;

  private _openIdConnectUrl: STRING;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: ISecurityScheme;

  constructor(
    initData?: ISecurityScheme,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.SecurityScheme';

    this.__meta.nodeFields = [
      {
        fieldName: 'type',
        protoName: 'type',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'description',
        protoName: 'description',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'name',
        protoName: 'name',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'in',
        protoName: 'in',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'scheme',
        protoName: 'scheme',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'bearerFormat',
        protoName: 'bearer_format',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'flows',
        protoName: 'flows',
        FieldConstructor: OpenapiV3OauthFlows,
        constraints: {},
      },
      {
        fieldName: 'openIdConnectUrl',
        protoName: 'open_id_connect_url',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._type = new STRING(undefined, this, 'type');

    this._description = new STRING(undefined, this, 'description');

    this._name = new STRING(undefined, this, 'name');

    this._in = new STRING(undefined, this, 'in');

    this._scheme = new STRING(undefined, this, 'scheme');

    this._bearerFormat = new STRING(undefined, this, 'bearerFormat');

    this._flows = new OpenapiV3OauthFlows(undefined, this, 'flows');

    this._openIdConnectUrl = new STRING(undefined, this, 'openIdConnectUrl');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof SecurityScheme] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof SecurityScheme] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get type(): STRING {
    return this._type;
  }

  public set type(v: string) {
    this.__PrimitivesSetter(this._type, v);
  }

  public get description(): STRING {
    return this._description;
  }

  public set description(v: string) {
    this.__PrimitivesSetter(this._description, v);
  }

  public get name(): STRING {
    return this._name;
  }

  public set name(v: string) {
    this.__PrimitivesSetter(this._name, v);
  }

  public get in(): STRING {
    return this._in;
  }

  public set in(v: string) {
    this.__PrimitivesSetter(this._in, v);
  }

  public get scheme(): STRING {
    return this._scheme;
  }

  public set scheme(v: string) {
    this.__PrimitivesSetter(this._scheme, v);
  }

  public get bearerFormat(): STRING {
    return this._bearerFormat;
  }

  public set bearerFormat(v: string) {
    this.__PrimitivesSetter(this._bearerFormat, v);
  }

  public get flows(): OpenapiV3OauthFlows {
    return this._flows;
  }

  public set flows(v: IOpenapiV3OauthFlows) {
    this.__TypeSetter(this._flows, v);
  }

  public get openIdConnectUrl(): STRING {
    return this._openIdConnectUrl;
  }

  public set openIdConnectUrl(v: string) {
    this.__PrimitivesSetter(this._openIdConnectUrl, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: ISecurityScheme) {
    super.__fromLiteral(data);
  }

  toLiteral(): ISecurityScheme {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.SecurityScheme', SecurityScheme);
