// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { ARRAY, FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  INamedSchemaOrReference as IOpenapiV3NamedSchemaOrReference,
  NamedSchemaOrReference as OpenapiV3NamedSchemaOrReference,
  TNamedSchemaOrReference as TOpenapiV3NamedSchemaOrReference,
} from './NamedSchemaOrReference';

/**
 * @interface ISchemasOrReferences
 */
export interface ISchemasOrReferences {
  additionalProperties?: IOpenapiV3NamedSchemaOrReference[];
}

/**
 * @interface TSchemasOrReferences
 */
export interface TSchemasOrReferences {
  additional_properties?: TOpenapiV3NamedSchemaOrReference[];
}

/**
 * SchemasOrReferences
 */
export class SchemasOrReferences extends FieldNode {
  private _additionalProperties: ARRAY<
    OpenapiV3NamedSchemaOrReference,
    IOpenapiV3NamedSchemaOrReference
  >;

  public __defaultValues: ISchemasOrReferences;

  constructor(
    initData?: ISchemasOrReferences,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.SchemasOrReferences';

    this.__meta.nodeFields = [
      {
        fieldName: 'additionalProperties',
        protoName: 'additional_properties',
        FieldConstructor: OpenapiV3NamedSchemaOrReference,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._additionalProperties = new ARRAY<
      OpenapiV3NamedSchemaOrReference,
      IOpenapiV3NamedSchemaOrReference
    >(undefined, this, 'additionalProperties');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof SchemasOrReferences] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof SchemasOrReferences] as FieldNode).__readonly =
        true;
    });

    this.__meta.isPristine = true;
  }

  public get additionalProperties(): ARRAY<
    OpenapiV3NamedSchemaOrReference,
    IOpenapiV3NamedSchemaOrReference
  > {
    return this._additionalProperties;
  }

  public set additionalProperties(v: IOpenapiV3NamedSchemaOrReference[]) {
    this.__TypeSetter(this._additionalProperties, v);
  }

  fromLiteral(data: ISchemasOrReferences) {
    super.__fromLiteral(data);
  }

  toLiteral(): ISchemasOrReferences {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.SchemasOrReferences', SchemasOrReferences);
