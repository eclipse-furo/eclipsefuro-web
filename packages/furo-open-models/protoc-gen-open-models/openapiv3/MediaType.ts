// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { ARRAY, FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  IXAny as IOpenapiV3Any,
  TXAny as TOpenapiV3Any,
  XAny as OpenapiV3Any,
} from './Any';

import {
  Encodings as OpenapiV3Encodings,
  IEncodings as IOpenapiV3Encodings,
  TEncodings as TOpenapiV3Encodings,
} from './Encodings';

import {
  ExamplesOrReferences as OpenapiV3ExamplesOrReferences,
  IExamplesOrReferences as IOpenapiV3ExamplesOrReferences,
  TExamplesOrReferences as TOpenapiV3ExamplesOrReferences,
} from './ExamplesOrReferences';

import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

import {
  ISchemaOrReference as IOpenapiV3SchemaOrReference,
  SchemaOrReference as OpenapiV3SchemaOrReference,
  TSchemaOrReference as TOpenapiV3SchemaOrReference,
} from './SchemaOrReference';

/**
 * @interface IMediaType
 *  Each Media Type Object provides schema and examples for the media type identified by its key.
 */
export interface IMediaType {
  schema?: IOpenapiV3SchemaOrReference;
  example?: IOpenapiV3Any;
  examples?: IOpenapiV3ExamplesOrReferences;
  encoding?: IOpenapiV3Encodings;
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TMediaType
 *  Each Media Type Object provides schema and examples for the media type identified by its key.
 */
export interface TMediaType {
  schema?: TOpenapiV3SchemaOrReference;
  example?: TOpenapiV3Any;
  examples?: TOpenapiV3ExamplesOrReferences;
  encoding?: TOpenapiV3Encodings;
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * MediaType
 *  Each Media Type Object provides schema and examples for the media type identified by its key.
 */
export class MediaType extends FieldNode {
  private _schema: OpenapiV3SchemaOrReference;

  private _example: OpenapiV3Any;

  private _examples: OpenapiV3ExamplesOrReferences;

  private _encoding: OpenapiV3Encodings;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: IMediaType;

  constructor(
    initData?: IMediaType,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.MediaType';

    this.__meta.nodeFields = [
      {
        fieldName: 'schema',
        protoName: 'schema',
        FieldConstructor: OpenapiV3SchemaOrReference,
        constraints: {},
      },
      {
        fieldName: 'example',
        protoName: 'example',
        FieldConstructor: OpenapiV3Any,
        constraints: {},
      },
      {
        fieldName: 'examples',
        protoName: 'examples',
        FieldConstructor: OpenapiV3ExamplesOrReferences,
        constraints: {},
      },
      {
        fieldName: 'encoding',
        protoName: 'encoding',
        FieldConstructor: OpenapiV3Encodings,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._schema = new OpenapiV3SchemaOrReference(undefined, this, 'schema');

    this._example = new OpenapiV3Any(undefined, this, 'example');

    this._examples = new OpenapiV3ExamplesOrReferences(
      undefined,
      this,
      'examples',
    );

    this._encoding = new OpenapiV3Encodings(undefined, this, 'encoding');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof MediaType] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof MediaType] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get schema(): OpenapiV3SchemaOrReference {
    return this._schema;
  }

  public set schema(v: IOpenapiV3SchemaOrReference) {
    this.__TypeSetter(this._schema, v);
  }

  public get example(): OpenapiV3Any {
    return this._example;
  }

  public set example(v: IOpenapiV3Any) {
    this.__TypeSetter(this._example, v);
  }

  public get examples(): OpenapiV3ExamplesOrReferences {
    return this._examples;
  }

  public set examples(v: IOpenapiV3ExamplesOrReferences) {
    this.__TypeSetter(this._examples, v);
  }

  public get encoding(): OpenapiV3Encodings {
    return this._encoding;
  }

  public set encoding(v: IOpenapiV3Encodings) {
    this.__TypeSetter(this._encoding, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: IMediaType) {
    super.__fromLiteral(data);
  }

  toLiteral(): IMediaType {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.MediaType', MediaType);
