// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { ARRAY, FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  INamedAny as IOpenapiV3NamedAny,
  NamedAny as OpenapiV3NamedAny,
  TNamedAny as TOpenapiV3NamedAny,
} from './NamedAny';

import {
  INamedResponseOrReference as IOpenapiV3NamedResponseOrReference,
  NamedResponseOrReference as OpenapiV3NamedResponseOrReference,
  TNamedResponseOrReference as TOpenapiV3NamedResponseOrReference,
} from './NamedResponseOrReference';

import {
  IResponseOrReference as IOpenapiV3ResponseOrReference,
  ResponseOrReference as OpenapiV3ResponseOrReference,
  TResponseOrReference as TOpenapiV3ResponseOrReference,
} from './ResponseOrReference';

/**
 * @interface IResponses
 *  A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export interface IResponses {
  default?: IOpenapiV3ResponseOrReference;
  responseOrReference?: IOpenapiV3NamedResponseOrReference[];
  specificationExtension?: IOpenapiV3NamedAny[];
}

/**
 * @interface TResponses
 *  A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export interface TResponses {
  default?: TOpenapiV3ResponseOrReference;
  response_or_reference?: TOpenapiV3NamedResponseOrReference[];
  specification_extension?: TOpenapiV3NamedAny[];
}

/**
 * Responses
 *  A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export class Responses extends FieldNode {
  private _default: OpenapiV3ResponseOrReference;

  private _responseOrReference: ARRAY<
    OpenapiV3NamedResponseOrReference,
    IOpenapiV3NamedResponseOrReference
  >;

  private _specificationExtension: ARRAY<OpenapiV3NamedAny, IOpenapiV3NamedAny>;

  public __defaultValues: IResponses;

  constructor(
    initData?: IResponses,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.Responses';

    this.__meta.nodeFields = [
      {
        fieldName: 'default',
        protoName: 'default',
        FieldConstructor: OpenapiV3ResponseOrReference,
        constraints: {},
      },
      {
        fieldName: 'responseOrReference',
        protoName: 'response_or_reference',
        FieldConstructor: OpenapiV3NamedResponseOrReference,
        constraints: {},
      },
      {
        fieldName: 'specificationExtension',
        protoName: 'specification_extension',
        FieldConstructor: OpenapiV3NamedAny,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._default = new OpenapiV3ResponseOrReference(
      undefined,
      this,
      'default',
    );

    this._responseOrReference = new ARRAY<
      OpenapiV3NamedResponseOrReference,
      IOpenapiV3NamedResponseOrReference
    >(undefined, this, 'responseOrReference');

    this._specificationExtension = new ARRAY<
      OpenapiV3NamedAny,
      IOpenapiV3NamedAny
    >(undefined, this, 'specificationExtension');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Responses] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Responses] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get default(): OpenapiV3ResponseOrReference {
    return this._default;
  }

  public set default(v: IOpenapiV3ResponseOrReference) {
    this.__TypeSetter(this._default, v);
  }

  public get responseOrReference(): ARRAY<
    OpenapiV3NamedResponseOrReference,
    IOpenapiV3NamedResponseOrReference
  > {
    return this._responseOrReference;
  }

  public set responseOrReference(v: IOpenapiV3NamedResponseOrReference[]) {
    this.__TypeSetter(this._responseOrReference, v);
  }

  public get specificationExtension(): ARRAY<
    OpenapiV3NamedAny,
    IOpenapiV3NamedAny
  > {
    return this._specificationExtension;
  }

  public set specificationExtension(v: IOpenapiV3NamedAny[]) {
    this.__TypeSetter(this._specificationExtension, v);
  }

  fromLiteral(data: IResponses) {
    super.__fromLiteral(data);
  }

  toLiteral(): IResponses {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.Responses', Responses);
