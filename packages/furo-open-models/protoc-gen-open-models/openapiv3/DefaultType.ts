// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import {
  BOOLEAN,
  DOUBLE,
  FieldNode,
  Registry,
  STRING,
} from '@furo/open-models/dist/index';

/**
 * @interface IDefaultType
 */
export interface IDefaultType {
  number?: number;
  boolean?: boolean;
  string?: string;
}

/**
 * @interface TDefaultType
 */
export interface TDefaultType {
  number?: number;
  boolean?: boolean;
  string?: string;
}

/**
 * DefaultType
 */
export class DefaultType extends FieldNode {
  private _number: DOUBLE;

  private _boolean: BOOLEAN;

  private _string: STRING;

  public __defaultValues: IDefaultType;

  constructor(
    initData?: IDefaultType,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.DefaultType';

    this.__meta.nodeFields = [
      {
        fieldName: 'number',
        protoName: 'number',
        FieldConstructor: DOUBLE,
        constraints: {},
      },
      {
        fieldName: 'boolean',
        protoName: 'boolean',
        FieldConstructor: BOOLEAN,
        constraints: {},
      },
      {
        fieldName: 'string',
        protoName: 'string',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._number = new DOUBLE(undefined, this, 'number');

    this._boolean = new BOOLEAN(undefined, this, 'boolean');

    this._string = new STRING(undefined, this, 'string');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof DefaultType] as FieldNode).__meta.required =
        true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof DefaultType] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get number(): DOUBLE {
    return this._number;
  }

  public set number(v: number) {
    this.__PrimitivesSetter(this._number, v);
  }

  public get boolean(): BOOLEAN {
    return this._boolean;
  }

  public set boolean(v: boolean) {
    this.__PrimitivesSetter(this._boolean, v);
  }

  public get string(): STRING {
    return this._string;
  }

  public set string(v: string) {
    this.__PrimitivesSetter(this._string, v);
  }

  fromLiteral(data: IDefaultType) {
    super.__fromLiteral(data);
  }

  toLiteral(): IDefaultType {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.DefaultType', DefaultType);
