// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { ARRAY, FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  INamedStringArray as IOpenapiV3NamedStringArray,
  NamedStringArray as OpenapiV3NamedStringArray,
  TNamedStringArray as TOpenapiV3NamedStringArray,
} from './NamedStringArray';

/**
 * @interface ISecurityRequirement
 *  Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 */
export interface ISecurityRequirement {
  additionalProperties?: IOpenapiV3NamedStringArray[];
}

/**
 * @interface TSecurityRequirement
 *  Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 */
export interface TSecurityRequirement {
  additional_properties?: TOpenapiV3NamedStringArray[];
}

/**
 * SecurityRequirement
 *  Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 */
export class SecurityRequirement extends FieldNode {
  private _additionalProperties: ARRAY<
    OpenapiV3NamedStringArray,
    IOpenapiV3NamedStringArray
  >;

  public __defaultValues: ISecurityRequirement;

  constructor(
    initData?: ISecurityRequirement,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.SecurityRequirement';

    this.__meta.nodeFields = [
      {
        fieldName: 'additionalProperties',
        protoName: 'additional_properties',
        FieldConstructor: OpenapiV3NamedStringArray,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._additionalProperties = new ARRAY<
      OpenapiV3NamedStringArray,
      IOpenapiV3NamedStringArray
    >(undefined, this, 'additionalProperties');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof SecurityRequirement] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof SecurityRequirement] as FieldNode).__readonly =
        true;
    });

    this.__meta.isPristine = true;
  }

  public get additionalProperties(): ARRAY<
    OpenapiV3NamedStringArray,
    IOpenapiV3NamedStringArray
  > {
    return this._additionalProperties;
  }

  public set additionalProperties(v: IOpenapiV3NamedStringArray[]) {
    this.__TypeSetter(this._additionalProperties, v);
  }

  fromLiteral(data: ISecurityRequirement) {
    super.__fromLiteral(data);
  }

  toLiteral(): ISecurityRequirement {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.SecurityRequirement', SecurityRequirement);
