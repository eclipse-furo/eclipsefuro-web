// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, Registry, STRING } from '@furo/open-models/dist/index';

/**
 * @interface IReference
 *  A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export interface IReference {
  Ref?: string;
  summary?: string;
  description?: string;
}

/**
 * @interface TReference
 *  A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export interface TReference {
  _ref?: string;
  summary?: string;
  description?: string;
}

/**
 * Reference
 *  A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export class Reference extends FieldNode {
  private _Ref: STRING;

  private _summary: STRING;

  private _description: STRING;

  public __defaultValues: IReference;

  constructor(
    initData?: IReference,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.Reference';

    this.__meta.nodeFields = [
      {
        fieldName: 'Ref',
        protoName: '_ref',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'summary',
        protoName: 'summary',
        FieldConstructor: STRING,
        constraints: {},
      },
      {
        fieldName: 'description',
        protoName: 'description',
        FieldConstructor: STRING,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._Ref = new STRING(undefined, this, 'Ref');

    this._summary = new STRING(undefined, this, 'summary');

    this._description = new STRING(undefined, this, 'description');

    // Set required fields
    [].forEach(fieldName => {
      (this[fieldName as keyof Reference] as FieldNode).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof Reference] as FieldNode).__readonly = true;
    });

    this.__meta.isPristine = true;
  }

  public get Ref(): STRING {
    return this._Ref;
  }

  public set Ref(v: string) {
    this.__PrimitivesSetter(this._Ref, v);
  }

  public get summary(): STRING {
    return this._summary;
  }

  public set summary(v: string) {
    this.__PrimitivesSetter(this._summary, v);
  }

  public get description(): STRING {
    return this._description;
  }

  public set description(v: string) {
    this.__PrimitivesSetter(this._description, v);
  }

  fromLiteral(data: IReference) {
    super.__fromLiteral(data);
  }

  toLiteral(): IReference {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.Reference', Reference);
