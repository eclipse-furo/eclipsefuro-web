// Code generated by furo protoc-gen-open-models. DO NOT EDIT.
// protoc-gen-open-models version: ????

import { FieldNode, Registry } from '@furo/open-models/dist/index';
import {
  IReference as IOpenapiV3Reference,
  Reference as OpenapiV3Reference,
  TReference as TOpenapiV3Reference,
} from './Reference';

import {
  ISchema as IOpenapiV3Schema,
  Schema as OpenapiV3Schema,
  TSchema as TOpenapiV3Schema,
} from './Schema';

/**
 * @interface ISchemaOrReference
 */
export interface ISchemaOrReference {
  schema?: IOpenapiV3Schema;
  reference?: IOpenapiV3Reference;
}

/**
 * @interface TSchemaOrReference
 */
export interface TSchemaOrReference {
  schema?: TOpenapiV3Schema;
  reference?: TOpenapiV3Reference;
}

/**
 * SchemaOrReference
 */
export class SchemaOrReference extends FieldNode {
  private _schema: OpenapiV3Schema;

  private _reference: OpenapiV3Reference;

  public __defaultValues: ISchemaOrReference;

  constructor(
    initData?: ISchemaOrReference,
    parent?: FieldNode,
    parentAttributeName?: string,
  ) {
    super(undefined, parent, parentAttributeName);
    this.__meta.typeName = 'openapi.v3.SchemaOrReference';

    this.__meta.nodeFields = [
      {
        fieldName: 'schema',
        protoName: 'schema',
        FieldConstructor: OpenapiV3Schema,
        constraints: {},
      },
      {
        fieldName: 'reference',
        protoName: 'reference',
        FieldConstructor: OpenapiV3Reference,
        constraints: {},
      },
    ];

    // Initialize the fields
    this._schema = new OpenapiV3Schema(undefined, this, 'schema');

    this._reference = new OpenapiV3Reference(undefined, this, 'reference');

    // Set required fields
    [].forEach(fieldName => {
      (
        this[fieldName as keyof SchemaOrReference] as FieldNode
      ).__meta.required = true;
    });

    // Default values from openAPI annotations
    this.__defaultValues = {};

    // Initialize the fields with init data
    if (initData !== undefined) {
      this.__fromLiteral({ ...this.__defaultValues, ...initData });
    } else {
      this.__fromLiteral(this.__defaultValues);
    }

    // Set readonly fields after the init, so child nodes are readonly too
    [].forEach(fieldName => {
      (this[fieldName as keyof SchemaOrReference] as FieldNode).__readonly =
        true;
    });

    this.__meta.isPristine = true;
  }

  public get schema(): OpenapiV3Schema {
    return this._schema;
  }

  public set schema(v: IOpenapiV3Schema) {
    this.__TypeSetter(this._schema, v);
  }

  public get reference(): OpenapiV3Reference {
    return this._reference;
  }

  public set reference(v: IOpenapiV3Reference) {
    this.__TypeSetter(this._reference, v);
  }

  fromLiteral(data: ISchemaOrReference) {
    super.__fromLiteral(data);
  }

  toLiteral(): ISchemaOrReference {
    return super.__toLiteral();
  }
}

Registry.register('openapi.v3.SchemaOrReference', SchemaOrReference);
