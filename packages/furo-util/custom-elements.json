{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/furo-fetch-json.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-fetch-json`\n Fetches and parses json data from a source.\n\n ```html\n <furo-fetch-json src=\"/example.json\" ƒ-fetch=\"--FBPready\" @-data=\"--contentReceived\"></furo-fetch-json>\n ```",
          "name": "FuroFetchJson",
          "members": [
            {
              "kind": "method",
              "name": "fetch",
              "description": "fetch and parse the data from specified `src`.\n\nUse fetch-src if you want to pass the source url",
              "return": {
                "type": {
                  "text": "Promise<any>"
                }
              }
            },
            {
              "kind": "method",
              "name": "fetchSrc",
              "parameters": [
                {
                  "name": "source"
                },
                {
                  "description": "source",
                  "name": "String"
                }
              ],
              "description": "fetch json data from source",
              "return": {
                "type": {
                  "text": "Promise<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "src",
              "privacy": "public",
              "description": "the url you want to fetch",
              "attribute": "src"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Object} json data"
              },
              "description": " Fired when data received and json parsed",
              "name": "data"
            },
            {
              "type": {
                "text": "error"
              },
              "description": " Fired when json is not parseable",
              "name": "parse-error"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "description": "the url you want to fetch",
              "fieldName": "src"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "fetch json data",
          "tagName": "furo-fetch-json",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-fetch-json",
          "declaration": {
            "name": "FuroFetchJson",
            "module": "src/furo-fetch-json.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-get-clipboard.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-get-clipboard`\n get the clipboard content from the OS.\n\n```html\n\n<furo-get-clipboard ƒ-trigger=\"--clipboardContentRequested\" @-content=\"--contentReceived\">\n</furo-get-clipboard>\n\n```",
          "name": "FuroGetClipboard",
          "members": [
            {
              "kind": "method",
              "name": "trigger"
            },
            {
              "kind": "field",
              "name": "json",
              "privacy": "public",
              "description": "Convert clipboard content to json",
              "attribute": "json"
            }
          ],
          "events": [
            {
              "description": " Fired when clipboard content is received",
              "name": "content"
            }
          ],
          "attributes": [
            {
              "name": "json",
              "description": "Convert clipboard content to json",
              "fieldName": "json"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "get clipboard content",
          "tagName": "furo-get-clipboard",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-get-clipboard",
          "declaration": {
            "name": "FuroGetClipboard",
            "module": "src/furo-get-clipboard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-head-tail.js",
      "declarations": [
        {
          "kind": "class",
          "description": "\n`furo-head-tail`\n Splits an iterable (i.e. Array) in its head and tail part.\n\n```\n <furo-head-tail ƒ-split=\"--arrayData\" @-head=\"--firstElement\" @-tail=\"--restOfArray\"></furo-head-tail>\n```",
          "name": "FuroHeadTail",
          "members": [
            {
              "kind": "method",
              "name": "split",
              "parameters": [
                {
                  "name": "iterable"
                }
              ],
              "description": "Splits an iterable to its head (first item) and its tail (the rest) parts.\n\n```\n[\"a\", \"b\", \"c\", \"d\"]\n |_|  |___________|\n  ^      ^\n  |      |\n  |     TAIL   => [\"b\", \"c\", \"d\"]\n HEAD          => \"a\"\n```"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Any}"
              },
              "description": " Fired when Array was splitted, contains the first element of array.",
              "name": "head"
            },
            {
              "type": {
                "text": "Array | Any"
              },
              "description": " Fired when Array was splitted. {Array || Any} is the tail from the injected array (e1 - 1n)",
              "name": "tail"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "summary": "split an array",
          "tagName": "furo-head-tail",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-head-tail",
          "declaration": {
            "name": "FuroHeadTail",
            "module": "src/furo-head-tail.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-key-filter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-key-filter`\nAllows only defined keyboard events to pass through\n\n```\n<!-- note the asterisk on other-component keydown. Because filter needs the keyboard event. -->\n<other-component @-keydown=\"--keydown(*)\"></other-component>\n<furo-key-filter ƒ-filter=\"--keydown\" @-matched=\"--escapePressed\" keys=\"Escape\"></furo-key-filter>\n```",
          "name": "FuroKeyFilter",
          "members": [
            {
              "kind": "method",
              "name": "filter",
              "parameters": [
                {
                  "name": "keyboardEvent"
                }
              ],
              "description": "Check the event and dispatch matched when the conditions are fulfilled."
            },
            {
              "kind": "field",
              "name": "keys",
              "privacy": "public",
              "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
              "attribute": "keys"
            },
            {
              "kind": "field",
              "name": "shift",
              "privacy": "public",
              "description": "Modifier key **shift** must be pressed too to match",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "alt",
              "privacy": "public",
              "description": "Modifier key **alt** must be pressed too to match",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "command",
              "privacy": "public",
              "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
              "attribute": "command"
            },
            {
              "kind": "field",
              "name": "meta",
              "privacy": "public",
              "description": "Modifier key **meta** must be pressed too to match",
              "attribute": "meta"
            },
            {
              "kind": "field",
              "name": "control",
              "privacy": "public",
              "description": "Modifier key **control** must be pressed too to match",
              "attribute": "control"
            }
          ],
          "events": [
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when key matches the options",
              "name": "matched"
            }
          ],
          "attributes": [
            {
              "name": "keys",
              "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
              "fieldName": "keys"
            },
            {
              "name": "shift",
              "description": "Modifier key **shift** must be pressed too to match",
              "fieldName": "shift"
            },
            {
              "name": "alt",
              "description": "Modifier key **alt** must be pressed too to match",
              "fieldName": "alt"
            },
            {
              "name": "command",
              "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
              "fieldName": "command"
            },
            {
              "name": "meta",
              "description": "Modifier key **meta** must be pressed too to match",
              "fieldName": "meta"
            },
            {
              "name": "control",
              "description": "Modifier key **control** must be pressed too to match",
              "fieldName": "control"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "keyboard event filter",
          "tagName": "furo-key-filter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-key-filter",
          "declaration": {
            "name": "FuroKeyFilter",
            "module": "src/furo-key-filter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-keydown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-key-press`\n Listen to keypress events on parent element\n\n [more about keydown](https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event)",
          "name": "FuroKeydown",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "key",
              "privacy": "public",
              "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
              "attribute": "key"
            },
            {
              "kind": "field",
              "name": "global",
              "privacy": "public",
              "description": "Set this attribute to listen to the keydown event global (window).",
              "attribute": "global"
            },
            {
              "kind": "field",
              "name": "alt",
              "privacy": "public",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "ctrl",
              "privacy": "public",
              "attribute": "ctrl"
            },
            {
              "kind": "field",
              "name": "meta",
              "privacy": "public",
              "attribute": "meta"
            },
            {
              "kind": "field",
              "name": "shift",
              "privacy": "public",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "preventDefault",
              "privacy": "public",
              "attribute": "prevent-default"
            },
            {
              "kind": "field",
              "name": "stopPropagation",
              "privacy": "public",
              "attribute": "stop-propagation"
            }
          ],
          "events": [
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": "Fired when key was catched on target",
              "name": "key"
            }
          ],
          "attributes": [
            {
              "name": "key",
              "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
              "fieldName": "key"
            },
            {
              "name": "global",
              "description": "Set this attribute to listen to the keydown event global (window).",
              "fieldName": "global"
            },
            {
              "name": "alt",
              "fieldName": "alt"
            },
            {
              "name": "ctrl",
              "fieldName": "ctrl"
            },
            {
              "name": "meta",
              "fieldName": "meta"
            },
            {
              "name": "shift",
              "fieldName": "shift"
            },
            {
              "name": "prevent-default",
              "fieldName": "preventDefault"
            },
            {
              "name": "stop-propagation",
              "fieldName": "stopPropagation"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "keyboard event listener",
          "tagName": "furo-keydown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-keydown",
          "declaration": {
            "name": "FuroKeydown",
            "module": "src/furo-keydown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-markdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-markdown`\n Renders given md data with parseMarkdown or loads a md file with `mdsrc=\"source.md\"`",
          "name": "FuroMarkdown",
          "members": [
            {
              "kind": "field",
              "name": "mdsrc",
              "privacy": "public",
              "description": "source of the md",
              "attribute": "mdsrc"
            },
            {
              "kind": "field",
              "name": "markdown",
              "privacy": "public",
              "description": "markdown string",
              "attribute": "markdown"
            },
            {
              "kind": "method",
              "name": "fetchMd",
              "parameters": [
                {
                  "name": "src"
                }
              ],
              "description": "fetch markdown from a url or path",
              "return": {
                "type": {
                  "text": "Promise<string | never>"
                }
              }
            },
            {
              "kind": "method",
              "name": "parseMarkdown",
              "parameters": [
                {
                  "name": "markdown"
                }
              ],
              "description": "Parse markdown string to html content"
            },
            {
              "kind": "method",
              "name": "_parseMarkdown",
              "parameters": [
                {
                  "name": "markdown"
                }
              ],
              "description": "parse markdown string to html content",
              "return": {
                "type": {
                  "text": "TemplateResult | TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "markdownRendered",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "unsafe",
              "privacy": "public",
              "description": "allow unsafe md. (writing html, components,...)",
              "attribute": "unsafe"
            }
          ],
          "attributes": [
            {
              "name": "unsafe",
              "description": "allow unsafe md. (writing html, components,...)",
              "fieldName": "unsafe"
            },
            {
              "name": "mdsrc",
              "description": "source of the md",
              "fieldName": "mdsrc"
            },
            {
              "name": "markdown",
              "description": "markdown string",
              "fieldName": "markdown"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "renders markdown data",
          "tagName": "furo-markdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-markdown",
          "declaration": {
            "name": "FuroMarkdown",
            "module": "src/furo-markdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-navigation-pad.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-navigation-pad` listens to different keyboard navigation events like the arrow keys. It will attach the listeners\n to the parent node and cancel the default and stop the propagation of the events.\n\n The events are available as standalone events or as combined event in the `navigated` event.\n\n ```html\n <!-- forward all navigation events except the Escape  -->\n <furo-navigation-pad ignored-keys=\"Escape\" @-navigated=\"--navpad\"></furo-navigation-pad>\n\n ```",
          "name": "FuroNavigationPad",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "ignoredKeys",
              "privacy": "public",
              "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
              "attribute": "ignored-keys"
            }
          ],
          "events": [
            {
              "type": {
                "text": "String"
              },
              "description": "Generic navigation event, fired when one of the navigation keys was pressed, detail contains one of these: Escape | Enter | ArrowDown | ArrowUp |ArrowLeft|ArrowRight| PageUp | PageDown | Home | End",
              "name": "navigated"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when Enter key was pressed.",
              "name": "enter-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when ArrowDown key was pressed.",
              "name": "arrow-down-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when ArrowUp key was pressed.",
              "name": "arrow-up-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when ArrowLeft key was pressed.",
              "name": "arrow-left-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when ArrowRight key was pressed.",
              "name": "arrow-right-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when Escape key was pressed.",
              "name": "escape-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when PageUp key was pressed.",
              "name": "page-up-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when PageDown key was pressed.",
              "name": "page-down-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when Home key was pressed.",
              "name": "home-pressed"
            },
            {
              "type": {
                "text": "KeyboardEvent"
              },
              "description": " Fired when End key was pressed.",
              "name": "end-pressed"
            }
          ],
          "attributes": [
            {
              "name": "ignored-keys",
              "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
              "fieldName": "ignoredKeys"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "keyboard navigation helper",
          "tagName": "furo-navigation-pad",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-navigation-pad",
          "declaration": {
            "name": "FuroNavigationPad",
            "module": "src/furo-navigation-pad.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-pretty-json.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-pretty-json`\nPretty json with highlighting",
          "name": "FuroPrettyJson",
          "members": [
            {
              "kind": "method",
              "name": "injectData",
              "parameters": [
                {
                  "name": "json"
                }
              ],
              "description": "Inject JSON data"
            },
            {
              "kind": "method",
              "name": "_syntaxHighlight",
              "static": true,
              "parameters": [
                {
                  "name": "json"
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "pretty prints json data",
          "tagName": "furo-pretty-json",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-pretty-json",
          "declaration": {
            "name": "FuroPrettyJson",
            "module": "src/furo-pretty-json.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-put-clipboard.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-put-clipboard`\n put content to the clipboard of the OS.\n\n```html\n\n<furo-put-clipboard json ƒ-trigger=\"--putDataToClipboard\" @-content-putted=\"--contentInClipboard\">\n</furo-put-clipboard>\n\n```",
          "name": "FuroPutClipboard",
          "members": [
            {
              "kind": "method",
              "name": "setData",
              "parameters": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "kind": "method",
              "name": "trigger",
              "parameters": [
                {
                  "name": "data",
                  "description": "Serializable data",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Write data to the clipboard"
            },
            {
              "kind": "field",
              "name": "json",
              "privacy": "public",
              "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
              "attribute": "json"
            }
          ],
          "events": [
            {
              "type": {
                "text": "*"
              },
              "description": "Fired when content is written to clipboard",
              "name": ""
            }
          ],
          "attributes": [
            {
              "name": "json",
              "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
              "fieldName": "json"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "write content to clipboard",
          "tagName": "furo-put-clipboard",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-put-clipboard",
          "declaration": {
            "name": "FuroPutClipboard",
            "module": "src/furo-put-clipboard.js"
          }
        }
      ]
    }
  ]
}
