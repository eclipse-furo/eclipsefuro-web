{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`furo-de-bounce`\n is a component with a input-wire, that, as long as it continues to be triggered, will not\n be invoked. The wire will be triggered after it stops being called for\n N milliseconds. If `immediate` is passed as a attribute, it triggers the input-wire on the\n leading edge, instead of the trailing.",
      "summary": "event de bouncer",
      "path": "src/furo-de-bounce.js",
      "properties": [
        {
          "name": "immediate",
          "type": "boolean | null | undefined",
          "description": "If true, input-wire is triggered immediatley (leading edge instead of trailing)\nDefault value: false",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "wait",
          "type": "number | null | undefined",
          "description": "Debounce time in milliseconds\nDefault value: 250",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_FBPReady",
          "description": "flow is ready lifecycle method",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createHandler",
          "description": "Internal create of debounce handler function",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wait"
            },
            {
              "name": "immediate"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "inputWire",
          "description": "Debounce function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo-furo-de-bounce",
          "description": "Basic usage"
        },
        {
          "url": "demo-furo-de-bounce-immediately",
          "description": "Immediate usage"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 117,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroDeBounce",
      "attributes": [
        {
          "name": "immediate",
          "description": "If true, input-wire is triggered immediatley (leading edge instead of trailing)\nDefault value: false",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 72,
              "column": 3
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "wait",
          "description": "Debounce time in milliseconds\nDefault value: 250",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-de-bounce",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-fetch-json`\n Fetches and parses json data from a source.\n\n ```html\n <furo-fetch-json src=\"/example.json\" ƒ-fetch=\"--FBPready\" @-data=\"--contentReceived\"></furo-fetch-json>\n ```",
      "summary": "fetch json data",
      "path": "src/furo-fetch-json.js",
      "properties": [
        {
          "name": "src",
          "type": "string | null | undefined",
          "description": "the url you want to fetch",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "fetch",
          "description": "eslint-disable-next-line consistent-return",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "fetchSrc",
          "description": "fetch json data from source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            }
          ],
          "return": {
            "type": "Promise.<any>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 78,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroFetchJson",
      "attributes": [
        {
          "name": "src",
          "description": "the url you want to fetch",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-fetch-json",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-get-clipboard`\n get the clipboard content from the OS.\n\n```html\n\n<furo-get-clipboard ƒ-trigger=\"--clipboardContentRequested\" @-content=\"--contentReceived\">\n</furo-get-clipboard>\n\n```",
      "summary": "get clipboard content",
      "path": "src/furo-get-clipboard.js",
      "properties": [
        {
          "name": "json",
          "type": "boolean | null | undefined",
          "description": "Convert clipboard content to json",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trigger",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroGetClipboard",
      "attributes": [
        {
          "name": "json",
          "description": "Convert clipboard content to json",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-get-clipboard",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-head-tail`\n Splits an iterable (i.e. Array) in its head and tail part.\n\n```\n <furo-head-tail ƒ-split=\"--arrayData\" @-head=\"--firstElement\" @-tail=\"--restOfArray\"></furo-head-tail>\n```",
      "summary": "split an array",
      "path": "src/furo-head-tail.js",
      "properties": [],
      "methods": [
        {
          "name": "split",
          "description": "Splits an iterable to its head (first item) and its tail (the rest) parts.\n\n```\n[\"a\", \"b\", \"c\", \"d\"]\n |_|  |___________|\n  ^      ^\n  |      |\n  |     TAIL   => [\"b\", \"c\", \"d\"]\n HEAD          => \"a\"\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iterable"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroHeadTail",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-head-tail"
    },
    {
      "description": "`furo-forth-stack` is a declarative stack, inspired by the forth stack.\n\nhttps://hackaday.com/2017/01/27/forth-the-hackers-language/\nhttp://wiki.laptop.org/go/Forth_stack_operators\nhttp://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm#stacks",
      "summary": "forth like stack",
      "path": "src/furo-forth-stack.js",
      "properties": [
        {
          "name": "size",
          "type": "number",
          "description": "Current size of the stack",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "clearStack",
          "description": "Empties the stack and set the stack-size to 0",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "put",
          "description": "Add an element to the stack",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "desc": "Number The actual size of the stack"
          }
        },
        {
          "name": "swap",
          "description": "swap **( n1 n2 -- n2 n1 )**\n\nswap, as you may have guessed, swaps the top two elements of the stack. For example:\n\n1 2 3 4 swap\nwill give you:\n\n1 2 4 3 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drop",
          "description": "drop **( n -- )**\n\n drop simply drops the top element of the stack. Running:\n\n 1 2 3 drop\n gives you a stack of:\n\n 1 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "dup",
          "description": "dup **( n -- n n )**\n\n    dup is short for “duplicate” – it duplicates the top element of the stack. For example, try this out:\n\n    1 2 3 dup\n\n    You should end up with the following stack:\n\n    1 2 3 3 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "over",
          "description": "over **( n1 n2 -- n1 n2 n1 )**\n\n   over is a bit less obvious: it takes the second element from the top of the stack and duplicates it to the top of the stack. Running this:\n\n   1 2 3 over\n   will result in this:\n\n   1 2 3 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 141,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "rot",
          "description": "rot **( n1 n2 n3 -- n2 n3 n1 )**\n\n   Finally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n\n   1 2 3 rot\n   gives you:\n\n   2 3 1 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "rrot",
          "description": "rrot **( n1 n2 n3 -- n3 n1 n2 )**\n\n   Reverse rotation or right rotation rrot “rotates” the elements of the stack inverse to rot.\n   The top elemen the stack gets moved to the bottom of the stack.\n\n   1 2 3 rot\n   gives you:\n\n   3 1 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_move",
          "description": "moves element of an array from index to index*",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            },
            {
              "name": "fromIndex"
            },
            {
              "name": "toIndex"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_notifyStackChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 208,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 7
        },
        "end": {
          "line": 209,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroForthStack",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-forth-stack"
    },
    {
      "description": "`hp-35` is a declarative rpn calculator component.\n\nsee https://hansklav.home.xs4all.nl/rpn/\n\nhttp://h10032.www1.hp.com/ctg/Manual/c01579350",
      "summary": "calculator component",
      "path": "src/furo-hp-35.js",
      "properties": [
        {
          "name": "size",
          "type": "number",
          "description": "Current size of the stack",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "x",
          "type": "Number",
          "description": "current x",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "current y",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "z",
          "type": "number | null | undefined",
          "description": "current z",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "t",
          "type": "number | null | undefined",
          "description": "current t",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "stack",
          "type": "Array | null | undefined",
          "description": "the stack.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 58
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "radMode",
          "type": "boolean | null | undefined",
          "description": "Set to true to use rad, default is deg",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_PIdivby180",
          "type": "number | null | undefined",
          "description": "so we dont have to calculate Math.PI / 180  every time\nused to calculate rad from angle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "clearStack",
          "description": "Empties the stack and set the stack-size to 0",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "put",
          "description": "Add an element to the stack",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 59,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "desc": "Number The actual size of the stack"
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "swap",
          "description": "swap **( n1 n2 -- n2 n1 )**\n\nswap, as you may have guessed, swaps the top two elements of the stack. For example:\n\n1 2 3 4 swap\nwill give you:\n\n1 2 4 3 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 95,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drop",
          "description": "drop **( n -- )**\n\n drop simply drops the top element of the stack. Running:\n\n 1 2 3 drop\n gives you a stack of:\n\n 1 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "dup",
          "description": "dup **( n -- n n )**\n\n    dup is short for “duplicate” – it duplicates the top element of the stack. For example, try this out:\n\n    1 2 3 dup\n\n    You should end up with the following stack:\n\n    1 2 3 3 <- Top",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 120,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "over",
          "description": "over **( n1 n2 -- n1 n2 n1 )**\n\n   over is a bit less obvious: it takes the second element from the top of the stack and duplicates it to the top of the stack. Running this:\n\n   1 2 3 over\n   will result in this:\n\n   1 2 3 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 141,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "rot",
          "description": "rot **( n1 n2 n3 -- n2 n3 n1 )**\n\n   Finally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n\n   1 2 3 rot\n   gives you:\n\n   2 3 1 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "rrot",
          "description": "rrot **( n1 n2 n3 -- n3 n1 n2 )**\n\n   Reverse rotation or right rotation rrot “rotates” the elements of the stack inverse to rot.\n   The top elemen the stack gets moved to the bottom of the stack.\n\n   1 2 3 rot\n   gives you:\n\n   3 1 2 <- Top",
          "privacy": "public",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 188,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "_move",
          "description": "moves element of an array from index to index*",
          "privacy": "private",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            },
            {
              "name": "fromIndex"
            },
            {
              "name": "toIndex"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "_notifyStackChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "furo-forth-stack.js",
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 208,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FuroForthStack"
        },
        {
          "name": "enter",
          "description": "Enter a number",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateXYZT",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "roll",
          "description": "rot **( n1 n2 n3 -- n2 n3 n1 )**\n\n   Finally, rot “rotates” the top three elements of the stack. The third element from the top of the stack gets moved to the top of the stack, pushing the other two elements down.\n\n   1 2 3 rot\n   gives you:\n\n   2 3 1 <- Top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "add",
          "description": "Process an addition",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 2
            },
            "end": {
              "line": 147,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "substract",
          "description": "Process a substraction",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "sqrt",
          "description": "Perform square root operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 187,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "ln",
          "description": "Perform log operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "cos",
          "description": "Perform cos operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "sin",
          "description": "Perform sin operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 2
            },
            "end": {
              "line": 258,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "tan",
          "description": "Perform tan operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 2
            },
            "end": {
              "line": 284,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "abs",
          "description": "Perform abs operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "reciprocal",
          "description": "Perform reciprocal operation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 2
            },
            "end": {
              "line": 322,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "exp",
          "description": "Perform exp operation\n\nreturns e^x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 2
            },
            "end": {
              "line": 344,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "xroot",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 2
            },
            "end": {
              "line": 359,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ]
        },
        {
          "name": "multiply",
          "description": "Process a multiplication",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 2
            },
            "end": {
              "line": 379,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "pow",
          "description": "Process power",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 386,
              "column": 2
            },
            "end": {
              "line": 398,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "divide",
          "description": "Process a division",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 2
            },
            "end": {
              "line": 419,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "type": "Number"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "clear",
          "description": "clear the stack",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 427,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 428,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "FuroForthStack",
      "name": "FuroHp35",
      "attributes": [
        {
          "name": "x",
          "description": "current x",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 49
            }
          },
          "metadata": {},
          "type": "Number"
        },
        {
          "name": "y",
          "description": "current y",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 49
            }
          },
          "metadata": {},
          "type": "Number"
        },
        {
          "name": "z",
          "description": "current z",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 49
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "t",
          "description": "current t",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 49
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "stack",
          "description": "the stack.",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 58
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "rad-mode",
          "description": "Set to true to use rad, default is deg",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "z-changed",
          "description": "Fired when the `z` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "t-changed",
          "description": "Fired when the `t` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "stack-changed",
          "description": "Fired when the `stack` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-hp-35"
    },
    {
      "description": "`furo-interval-pulse`\n\nPulses a tick event every `interval` ms duration and every `takt` a tock event is also fired.",
      "summary": "trigger an event in intervals",
      "path": "src/furo-interval-pulse.js",
      "properties": [
        {
          "name": "interval",
          "type": "number | null | undefined",
          "description": "Duration of a tact in ms.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "takt",
          "type": "number | null | undefined",
          "description": "Number of ticks per tact.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "auto",
          "type": "boolean | null | undefined",
          "description": "Starts interval automatically",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "start",
          "description": "Starts the pulsing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "stop",
          "description": "Stops the pulsing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 79,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroIntervalPulse",
      "attributes": [
        {
          "name": "interval",
          "description": "Duration of a tact in ms.",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 32
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "takt",
          "description": "Number of ticks per tact.",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 28
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "auto",
          "description": "Starts interval automatically",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 19
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-interval-pulse",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-key-filter`\nAllows only defined keyboard events to pass through\n\n```\n<!-- note the asterisk on other-component keydown. Because filter needs the keyboard event. -->\n<other-component @-keydown=\"--keydown(*)\"></other-component>\n<furo-key-filter ƒ-filter=\"--keydown\" @-matched=\"--escapePressed\" keys=\"Escape\"></furo-key-filter>\n```",
      "summary": "keyboard event filter",
      "path": "src/furo-key-filter.js",
      "properties": [
        {
          "name": "keys",
          "type": "string | null | undefined",
          "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "shift",
          "type": "boolean | null | undefined",
          "description": "Modifier key **shift** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "alt",
          "type": "boolean | null | undefined",
          "description": "Modifier key **alt** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "command",
          "type": "boolean | null | undefined",
          "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "meta",
          "type": "boolean | null | undefined",
          "description": "Modifier key **meta** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "control",
          "type": "boolean | null | undefined",
          "description": "Modifier key **control** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "filter",
          "description": "Check the event and dispatch matched when the conditions are fulfilled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyboardEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 94,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroKeyFilter",
      "attributes": [
        {
          "name": "keys",
          "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "shift",
          "description": "Modifier key **shift** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "alt",
          "description": "Modifier key **alt** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "command",
          "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "meta",
          "description": "Modifier key **meta** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "control",
          "description": "Modifier key **control** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-key-filter",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-key-press`\n Listen to keypress events on parent element\n\n [more about keydown](https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event)",
      "summary": "keyboard event listener",
      "path": "src/furo-keydown.js",
      "properties": [
        {
          "name": "key",
          "type": "string | null | undefined",
          "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "global",
          "type": "boolean | null | undefined",
          "description": "Set this attribute to listen to the keydown event global (window).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "alt",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "ctrl",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "meta",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "shift",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "preventDefault",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "stopPropagation",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 71
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_FBPReady",
          "description": "flow is ready lifecycle method",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 88,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroKeydown",
      "attributes": [
        {
          "name": "key",
          "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "global",
          "description": "Set this attribute to listen to the keydown event global (window).",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 31
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "alt",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "ctrl",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "meta",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "shift",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "prevent-default",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "stop-propagation",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 71
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-keydown",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-markdown`\n Renders given md data with parseMarkdown or loads a md file with `mdsrc=\"source.md\"`",
      "summary": "renders markdown data",
      "path": "src/furo-markdown.js",
      "properties": [
        {
          "name": "mdsrc",
          "type": "string | null | undefined",
          "description": "source of the md",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "markdown",
          "type": "string | null | undefined",
          "description": "markdown string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "unsafe",
          "type": "boolean | null | undefined",
          "description": "allow unsafe md. (writing html, components,...)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "fetchMd",
          "description": "fetch markdown from a url or path",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "src"
            }
          ],
          "return": {
            "type": "Promise.<(string | never)>"
          }
        },
        {
          "name": "parseMarkdown",
          "description": "Parse markdown string to html content",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "markdown"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_parseMarkdown",
          "description": "parse markdown string to html content",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 97,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "markdown"
            }
          ],
          "return": {
            "type": "(TemplateResult | TemplateResult)"
          }
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo-furo-markdown",
          "description": "safe mode (default)"
        },
        {
          "url": "demo-furo-markdown-unsafe",
          "description": "unsafe enabled"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 304,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroMarkdown",
      "attributes": [
        {
          "name": "mdsrc",
          "description": "source of the md",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "markdown",
          "description": "markdown string",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "unsafe",
          "description": "allow unsafe md. (writing html, components,...)",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 31
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-markdown",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-navigation-pad` listens to different keyboard navigation events like the arrow keys. It will attach the listeners\n to the parent node and cancel the default and stop the propagation of the events.\n\n The events are available as standalone events or as combined event in the `navigated` event.\n\n ```html\n <!-- forward all navigation events except the Escape  -->\n <furo-navigation-pad ignored-keys=\"Escape\" @-navigated=\"--navpad\"></furo-navigation-pad>\n\n ```",
      "summary": "keyboard navigation helper",
      "path": "src/furo-navigation-pad.js",
      "properties": [
        {
          "name": "ignoredKeys",
          "type": "string | null | undefined",
          "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_FBPReady",
          "description": "flow is ready lifecycle method",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroNavigationPad",
      "attributes": [
        {
          "name": "ignored-keys",
          "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 62
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-navigation-pad",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-pretty-json`\nPretty json with highlighting",
      "summary": "pretty prints json data",
      "path": "src/furo-pretty-json.js",
      "properties": [],
      "methods": [
        {
          "name": "injectData",
          "description": "Inject JSON data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_syntaxHighlight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ]
        }
      ],
      "demos": [
        {
          "url": "demo-furo-pretty-json",
          "description": "Simple data display"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 106,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroPrettyJson",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-pretty-json"
    },
    {
      "description": "`furo-put-clipboard`\n put content to the clipboard of the OS.\n\n```html\n\n<furo-put-clipboard json ƒ-trigger=\"--putDataToClipboard\" @-content-putted=\"--contentInClipboard\">\n</furo-put-clipboard>\n\n```",
      "summary": "write content to clipboard",
      "path": "src/furo-put-clipboard.js",
      "properties": [
        {
          "name": "json",
          "type": "boolean | null | undefined",
          "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setData",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "trigger",
          "description": "Write data to the clipboard",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "Serializable data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroPutClipboard",
      "attributes": [
        {
          "name": "json",
          "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-put-clipboard"
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "src/lib/EmptyStackError.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 0,
          "column": 7
        },
        "end": {
          "line": 10,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Error",
      "name": "EmpptyStackError"
    }
  ]
}
