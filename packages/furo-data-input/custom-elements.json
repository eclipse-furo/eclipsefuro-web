{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/furo-data-bool-icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-bool-icon`\nDisplays a icon/symbol for a boolean value\n\nThis component uses utf-8 symbols for true and false at the moment.",
          "name": "FuroDataBoolIcon",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Toggles the icon."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "d",
                  "description": "of type bool",
                  "type": {
                    "text": "FieldNode"
                  }
                }
              ],
              "description": "Bind a fieldNode."
            },
            {
              "kind": "method",
              "name": "_updateSymbol"
            },
            {
              "kind": "field",
              "name": "symboltrue",
              "type": {
                "text": "string"
              },
              "default": "'▼'",
              "privacy": "public",
              "description": "Defines the symbol for the true state",
              "attribute": "symboltrue"
            },
            {
              "kind": "field",
              "name": "symbolfalse",
              "type": {
                "text": "string"
              },
              "default": "'▶'",
              "privacy": "public",
              "description": "Defines the symbol for the false state",
              "attribute": "symbolfalse"
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_ocSymbol",
              "description": "open close symbol",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "symboltrue",
              "description": "Defines the symbol for the true state",
              "fieldName": "symboltrue"
            },
            {
              "name": "symbolfalse",
              "description": "Defines the symbol for the false state",
              "fieldName": "symbolfalse"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "Displays a icon/symbol for a boolean value",
          "tagName": "furo-data-bool-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-bool-icon",
          "declaration": {
            "name": "FuroDataBoolIcon",
            "module": "src/furo-data-bool-icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-checkbox-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-checkbox-input` is a extension of furo-checkbox-input which enables you to\n bind a entityObject field.\n\nThe field can be of type bool, google.protobuf.BoolValue, furo.fat.Bool. It is also possible to bind string values, but the\nvalues will be handled as boolean true when the string is not empty.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of the furo.fat.Bool are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.Bool are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n### following constrains are mapped into the attributes of the furo.fat.Bool :\n\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-checkbox-input></sample-furo-data-checkbox-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-checkbox-input](/furo-input?t=FuroCheckboxInput)",
          "name": "FuroDataCheckboxInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "field",
              "name": "__value",
              "description": "pass the value to the underlieying component always as boolean",
              "parameters": [
                {
                  "name": "v"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the checkbox-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Boolean} the bool value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-checkbox-input. **bubbles**",
              "name": "value-changed"
            }
          ],
          "superclass": {
            "name": "FuroCheckboxInput",
            "package": "@furo/input/src/furo-checkbox-input.js"
          },
          "summary": "Bind a entityObject.field to a checkbox input",
          "tagName": "furo-data-checkbox-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataCheckboxInput",
          "declaration": {
            "name": "FuroDataCheckboxInput",
            "module": "src/furo-data-checkbox-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-checkbox-input",
          "declaration": {
            "name": "FuroDataCheckboxInput",
            "module": "src/furo-data-checkbox-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-collection-dropdown.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-collection-dropdown`\n\nThis component displays a dropdown. The options can be injected with injectList.\n\nIt is also possible to put a simple comma separated list of items on the `list` attribute. In this case the display\nand id are the same.\n\nIf the bounded field haves an `options` attribute in the metas, it will use these options.\n\nThe options must have a signature like this:\n```json\n[\n {\n  \"id\": 34,\n  \"display_name\":\"Option 34\"\n }\n]\n```\nIt is possible to put any other signatures (`[{}]`) by setting the attribute *display-field* and *value-field*.\nThe value in *value-field* will be set on the bounded field and the values in *display-field* are used for the dropdown.\n\n ### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-collection-dropdown></sample-furo-data-collection-dropdown>\n\n## Attributes & Properties\nPlease refer to furo-select-input\n\n### auto-select-first\nset this attribute to autoselect the first item in the list, if no item is set in the bounded fieldNode",
          "name": "FuroDataCollectionDropdown",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "list",
              "description": "Set a string list as options:\n\n\"A, B, C\"\n\nThis will convert to options [\"A\",\"B\",\"C\"] by furo-select-input",
              "parameters": [
                {
                  "name": "value"
                }
              ],
              "privacy": "public",
              "attribute": "list",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_notifyAndTriggerUpdate",
              "parameters": [
                {
                  "name": "arr"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disable",
              "description": "Sets the field to readonly"
            },
            {
              "kind": "method",
              "name": "enable",
              "description": "Makes the field writable."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the range-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "addItems",
              "parameters": [
                {
                  "name": "arr"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buildListWithMetaOptions",
              "parameters": [
                {
                  "name": "options"
                },
                {
                  "description": "of options with id and display_name",
                  "name": "list",
                  "type": {
                    "text": "options"
                  }
                }
              ],
              "description": "Build the dropdown list with given options from meta",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "injectEntities",
              "parameters": [
                {
                  "name": "entities"
                }
              ],
              "description": "Inject the array of a collection"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "privacy": "public",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayField",
              "type": {
                "text": "string"
              },
              "default": "'display_name'",
              "privacy": "public",
              "description": "The name of the field from the injected collection that contains the label for the dropdown array.",
              "attribute": "display-field"
            },
            {
              "kind": "field",
              "name": "displaySubField",
              "type": {
                "text": "string"
              },
              "default": "'display_name'",
              "privacy": "public",
              "description": "if you bind a complex type, declare here the field which gets updated of display_name by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "attribute": "display-sub-field"
            },
            {
              "kind": "field",
              "name": "valueField",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "privacy": "public",
              "description": "The name of the field from the injected collection that contains the value you want to assign to the attribute value and the bounded field.",
              "attribute": "value-field"
            },
            {
              "kind": "field",
              "name": "subField",
              "type": {
                "text": "string"
              },
              "default": "'data'"
            },
            {
              "kind": "field",
              "name": "valueSubField",
              "default": "undefined",
              "privacy": "public",
              "description": "The name of the field from the injected collection that contains the value you want to assign to the attribute value and the bounded field.",
              "attribute": "value-sub-field"
            },
            {
              "kind": "field",
              "name": "updateLock",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_dropdownList",
              "type": {
                "text": "*[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "the dropdown list",
              "attribute": "_dropdownList"
            },
            {
              "kind": "field",
              "name": "_pseudoDropdownList",
              "type": {
                "text": "*[]"
              },
              "description": "generated one element dropdown, which has only the data of the bounded DO",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_injectedDropdownList",
              "type": {
                "text": "*[]"
              },
              "description": "injected dropdown elements which from a collection of response or in spec defined options",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_valueFoundInList",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "subfield",
              "privacy": "public",
              "description": "if you bind a complex type, declare here the field which gets updated of value by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "attribute": "subfield"
            },
            {
              "kind": "field",
              "name": "autoSelectFirst",
              "privacy": "public",
              "attribute": "auto-select-first"
            },
            {
              "kind": "field",
              "name": "hint",
              "privacy": "public",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "privacy": "public",
              "description": "Set this attribute to autofocus the input field.",
              "attribute": "autofocus",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "leadingIcon",
              "privacy": "public",
              "description": "Icon on the left side",
              "attribute": "leading-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "privacy": "public",
              "description": "Icon on the right side",
              "attribute": "trailing-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valid",
              "privacy": "public",
              "description": "html input validity",
              "attribute": "valid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "condensed",
              "privacy": "public",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "attribute": "condensed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_writeLock",
              "privacy": "public",
              "description": "A Boolean attribute which, if present, means this field is not writeable for a while.",
              "attribute": "_writeLock"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{*} the value from the value-field. By default the value field is \"id\""
              },
              "description": " Fired when value has changed from the component inside. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the original item object"
              },
              "description": " Fired when an item from the dropdown was selected",
              "name": "item-selected"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "label"
            },
            {
              "name": "subfield",
              "description": "if you bind a complex type, declare here the field which gets updated of value by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "fieldName": "subfield"
            },
            {
              "name": "display-sub-field",
              "description": "if you bind a complex type, declare here the field which gets updated of display_name by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "fieldName": "displaySubField"
            },
            {
              "name": "display-field",
              "description": "The name of the field from the injected collection that contains the label for the dropdown array.",
              "fieldName": "displayField"
            },
            {
              "name": "value-field",
              "description": "The name of the field from the injected collection that contains the value you want to assign to the attribute value and the bounded field.",
              "fieldName": "valueField"
            },
            {
              "name": "value-sub-field",
              "description": "The name of the field from the injected collection that contains the value you want to assign to the attribute value and the bounded field.",
              "fieldName": "valueSubField"
            },
            {
              "name": "auto-select-first",
              "fieldName": "autoSelectFirst"
            },
            {
              "name": "hint",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "hint"
            },
            {
              "name": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "fieldName": "disabled"
            },
            {
              "name": "autofocus",
              "description": "Set this attribute to autofocus the input field.",
              "fieldName": "autofocus"
            },
            {
              "name": "leading-icon",
              "description": "Icon on the left side",
              "fieldName": "leadingIcon"
            },
            {
              "name": "trailing-icon",
              "description": "Icon on the right side",
              "fieldName": "trailingIcon"
            },
            {
              "name": "valid",
              "description": "html input validity",
              "fieldName": "valid"
            },
            {
              "name": "condensed",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "fieldName": "condensed"
            },
            {
              "name": "list",
              "description": "Set a string list as options:\n\n\"A, B, C\"\n\nThis will convert to options [\"A\",\"B\",\"C\"] by furo-select-input",
              "fieldName": "list"
            },
            {
              "name": "_dropdownList",
              "description": "the dropdown list",
              "fieldName": "_dropdownList"
            },
            {
              "name": "_writeLock",
              "description": "A Boolean attribute which, if present, means this field is not writeable for a while.",
              "fieldName": "_writeLock"
            }
          ],
          "superclass": {
            "name": "FuroSelectInput",
            "package": "@furo/input/src/furo-select-input.js"
          },
          "summary": "bindable dropdown",
          "tagName": "furo-data-collection-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-collection-dropdown",
          "declaration": {
            "name": "FuroDataCollectionDropdown",
            "module": "src/furo-data-collection-dropdown.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-color-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-color-input` is a extension of furo-color-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`). e.g. value : \"#e318ed\"\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-color-input></sample-furo-data-color-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-color-input](/furo-input?t=FuroColorInput)",
          "name": "FuroDataColorInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the color-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the color value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-color-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the color input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-color-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the color input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-color-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroColorInput",
            "package": "@furo/input/src/furo-color-input.js"
          },
          "summary": "Bind a entityObject.field to a color input",
          "tagName": "furo-data-color-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataColorInput",
          "declaration": {
            "name": "FuroDataColorInput",
            "module": "src/furo-data-color-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-color-input",
          "declaration": {
            "name": "FuroDataColorInput",
            "module": "src/furo-data-color-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-date-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-date-input` is a extension of furo-date-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, furo.fat.String with format '2009-12-24' or type of google.type.Date with format\n{\"day\": 24, \"month\": 12, \"year\": 2009}\n\n### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': The earliest date to accept. format according to ISO 8601. e.g. '2000-01-01'\n- 'max': The latest date to accept. format according to ISO 8601. e.g. '2000-01-01'\n- 'step': The stepping interval to use for this input, such as when clicking arrows on spinner controls or performing validation\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'step': is mapped to 'step' attribute\n- 'required': is mapped to 'required' attribute\n\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-date-input](/furo-input?t=FuroDateInput)",
          "name": "FuroDataDateInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the color-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "_convertStringToDateObj",
              "parameters": [
                {
                  "name": "str"
                },
                {
                  "name": "obj"
                }
              ]
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Date} the date value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-date-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the date input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-date-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the date input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-date-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroDateInput",
            "package": "@furo/input/src/furo-date-input.js"
          },
          "summary": "Bind a entityObject.field to a date input",
          "tagName": "furo-data-date-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-date-input",
          "declaration": {
            "name": "FuroDataDateInput",
            "module": "src/furo-data-date-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-display.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-display`\n Displays a data field. If the type is a complex type (like google.type.Date), the display_name field is used.",
          "name": "FuroDataDisplay",
          "cssProperties": [
            {
              "type": {
                "text": "white"
              },
              "description": "background color of the hovered text ### following labels of fat types are supported: - 'error': state of input is error - 'condensed': input has condensed display - 'hidden': input is hidden ### following attributes of fat types are supported: - 'label': input label - 'hint': input hint - 'leading-icon': furo leading icon of the input - 'trailing-icon': furo trailing icon of the input - 'errortext': the error text of the input - 'error-msg': the same as errortext",
              "name": "--ellipsis-hover-background",
              "default": "white"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the data-display. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "_updateField",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "object"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "displayfield",
              "privacy": "public",
              "description": "If your field type does not have a display_name, use this attribute to set the field that should be used\ninstead of display_name.",
              "attribute": "displayfield"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "hint",
              "privacy": "public",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "hint"
            },
            {
              "kind": "field",
              "name": "leadingIcon",
              "privacy": "public",
              "description": "Icon on the left side",
              "attribute": "leading-icon"
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "privacy": "public",
              "description": "Icon on the right side",
              "attribute": "trailing-icon"
            },
            {
              "kind": "field",
              "name": "condensed",
              "privacy": "public",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "attribute": "condensed"
            },
            {
              "kind": "field",
              "name": "float",
              "privacy": "public",
              "description": "passes always float the label",
              "attribute": "float"
            }
          ],
          "attributes": [
            {
              "name": "displayfield",
              "description": "If your field type does not have a display_name, use this attribute to set the field that should be used\ninstead of display_name.",
              "fieldName": "displayfield"
            },
            {
              "name": "label",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "label"
            },
            {
              "name": "hint",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "hint"
            },
            {
              "name": "leading-icon",
              "description": "Icon on the left side",
              "fieldName": "leadingIcon"
            },
            {
              "name": "trailing-icon",
              "description": "Icon on the right side",
              "fieldName": "trailingIcon"
            },
            {
              "name": "condensed",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "fieldName": "condensed"
            },
            {
              "name": "float",
              "description": "passes always float the label",
              "fieldName": "float"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "Displays a data field",
          "tagName": "furo-data-display",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-display",
          "declaration": {
            "name": "FuroDataDisplay",
            "module": "src/furo-data-display.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-file-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-file-input`\nBinds a entityObject field to a furo-file-input field\n\n * ### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'multiple': indicates that the user may choose more than one file\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'accept': One or more unique file type specifiers describing file types to allow\n- 'multiple': furo leading icon of the input\n- 'capture': What source to use for capturing image or video data\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'required': is mapped to 'required' attribute",
          "name": "FuroDataFileInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_fetchLocalFile",
              "parameters": [
                {
                  "name": "file"
                }
              ],
              "description": "Fetch local file",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "accept",
              "privacy": "public",
              "description": "Hint for expected file type in file upload controls\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers\ne.g. .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document",
              "attribute": "accept",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiple",
              "privacy": "public",
              "description": "Whether to allow multiple values",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "capture",
              "privacy": "public",
              "description": "What source to use for capturing image or video data\nThe capture attribute value is a string that specifies which camera to use for capture of\nimage or video data, if the accept attribute indicates that the input should be of one of those types.\nA value of user indicates that the user-facing camera and/or microphone should be used. A value of environment\nspecifies that the outward-facing camera and/or microphone should be used. If this attribute is missing,\nthe user agent is free to decide on its own what to do. If the requested facing mode isn't available,\nthe user agent may fall back to its preferred default mode.",
              "attribute": "capture",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the text-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Array} all selected files base64 encoded"
              },
              "description": " Fired when value has changed from inside the component",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "A FileList listing the chosen files"
              },
              "description": " This event is representative for the attribute files on the native element input type=file. Fired when value has changed from inside the component",
              "name": "files-selected"
            },
            {
              "type": {
                "text": "{Array} all selected files base64 encoded"
              },
              "description": " is triggered while reading a Blob content.",
              "name": "progress"
            }
          ],
          "attributes": [
            {
              "name": "accept",
              "description": "Hint for expected file type in file upload controls\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers\ne.g. .doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document",
              "fieldName": "accept"
            },
            {
              "name": "multiple",
              "description": "Whether to allow multiple values",
              "fieldName": "multiple"
            },
            {
              "name": "capture",
              "description": "What source to use for capturing image or video data\nThe capture attribute value is a string that specifies which camera to use for capture of\nimage or video data, if the accept attribute indicates that the input should be of one of those types.\nA value of user indicates that the user-facing camera and/or microphone should be used. A value of environment\nspecifies that the outward-facing camera and/or microphone should be used. If this attribute is missing,\nthe user agent is free to decide on its own what to do. If the requested facing mode isn't available,\nthe user agent may fall back to its preferred default mode.",
              "fieldName": "capture"
            }
          ],
          "superclass": {
            "name": "FuroFileDialog",
            "package": "@furo/input/src/furo-file-dialog.js"
          },
          "summary": "Binds a entityObject field to a furo-file-input field",
          "tagName": "furo-data-file-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-file-input",
          "declaration": {
            "name": "FuroDataFileInput",
            "module": "src/furo-data-file-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-money-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-money-input`\nBinds a entityObject field google.type.Money to a furo-number-input and currency dropdown fields\n <sample-furo-data-money-input></sample-furo-data-money-input>\n\n you can set currencies dropdown with options in meta or set options attribute as json in element or set currencies as string in element. the three\n ways have priority : currencies > options as attribute > options in meta. When no currencies is setted. Default currency will be `CHF`\n\n <furo-data-money-input autofocus ƒ-bind-data=\"--entity(*.furo_data_money_input)\" options='{\"list\": [ \"chf\",\"eur\",\"usd\" ]}'></furo-data-money-input>\n <furo-data-money-input autofocus ƒ-bind-data=\"--entity(*.furo_data_money_input)\" options='{\"list\": [ {\"id\":\"CHF\",\"label\":\"Schweiz\"},{\"id\":\"EUR\",\"label\":\"Europa\", \"selected\": true}'></furo-data-money-input>\n <furo-data-money-input autofocus ƒ-bind-data=\"--entity(*.furo_data_money_input)\" currencies=\"chf,eur,usd\"></furo-data-money-input>\n\n### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'required': is mapped to 'required' attribute",
          "name": "FuroDataMoneyInput",
          "cssProperties": [
            {
              "type": {
                "text": "N/A"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_convertDataToMoneyObj",
              "parameters": [
                {
                  "name": "currency"
                },
                {
                  "name": "amount"
                },
                {
                  "name": "obj"
                }
              ],
              "description": "convert data to google.type.Money format",
              "return": {
                "type": {
                  "text": "{}"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the money-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "_updateField",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "parameters": [
                {
                  "name": "optionArray"
                },
                {
                  "description": "with options",
                  "name": "Array",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "description": "Set the options programmatically"
            },
            {
              "kind": "method",
              "name": "setCurrencies",
              "parameters": [
                {
                  "name": "currencies"
                },
                {
                  "description": "with options",
                  "name": "list",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Set the list programmatically"
            },
            {
              "kind": "method",
              "name": "disable",
              "description": "Sets the field to readonly"
            },
            {
              "kind": "method",
              "name": "enable",
              "description": "Makes the field writable."
            },
            {
              "kind": "field",
              "name": "_options",
              "parameters": [
                {
                  "name": "options"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currencies",
              "privacy": "public",
              "description": "Set a string list as options:\n\n\"A, B, C\"\n\nThis will convert to options [\"A\",\"B\",\"C\"]",
              "attribute": "currencies",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "updateSelectOptions",
              "parameters": [
                {
                  "name": "collection"
                }
              ]
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "privacy": "public",
              "description": "html input validity",
              "attribute": "valid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_currencies",
              "type": {
                "text": "*[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "object"
              },
              "default": "{ currency_code: 'CHF', units: null, nanos: null }",
              "privacy": "public",
              "description": "The start value. Changes will be notified with the `@-value-changed` event",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "error",
              "privacy": "public",
              "description": "set this to true to indicate errors",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "public",
              "description": "The list of currencies. Can be a simple list like [\"A\",\"B\",\"C\"]. In this case the value is equals the label\n\nWith ids (key value):\n\n[{\"id\":1,\"label\":\"AAA\"},{\"id\":2,\"label\":\"BBB\"}]\n\n\nWith preselect state in data:\n\n[{\"id\":23,\"label\":\"AAA\",\"selected\":false},{\"id\":44,\"label\":\"BBB\",\"selected\":true}]",
              "attribute": "options",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "description": "amount field label",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "privacy": "public",
              "description": "Set this attribute to autofocus the input field.",
              "attribute": "autofocus",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "Overrides the required value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "privacy": "public",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "errortext",
              "privacy": "public",
              "description": "Text for errors",
              "attribute": "errortext",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "condensed",
              "privacy": "public",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "attribute": "condensed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filled",
              "privacy": "public",
              "description": "Set this attribute to switch to filled layout. Filled is without the borders around the field.",
              "attribute": "filled",
              "reflects": true
            }
          ],
          "events": [
            {
              "type": {
                "text": "google money object"
              },
              "description": " Fired when value has changed from inside the component",
              "name": "value-changed"
            }
          ],
          "attributes": [
            {
              "name": "error",
              "description": "set this to true to indicate errors",
              "fieldName": "error"
            },
            {
              "name": "value",
              "description": "The start value. Changes will be notified with the `@-value-changed` event",
              "fieldName": "value"
            },
            {
              "name": "options",
              "description": "The list of currencies. Can be a simple list like [\"A\",\"B\",\"C\"]. In this case the value is equals the label\n\nWith ids (key value):\n\n[{\"id\":1,\"label\":\"AAA\"},{\"id\":2,\"label\":\"BBB\"}]\n\n\nWith preselect state in data:\n\n[{\"id\":23,\"label\":\"AAA\",\"selected\":false},{\"id\":44,\"label\":\"BBB\",\"selected\":true}]",
              "fieldName": "options"
            },
            {
              "name": "currencies",
              "description": "Set a string list as options:\n\n\"A, B, C\"\n\nThis will convert to options [\"A\",\"B\",\"C\"]",
              "fieldName": "currencies"
            },
            {
              "name": "label",
              "description": "amount field label",
              "fieldName": "label"
            },
            {
              "name": "autofocus",
              "description": "Set this attribute to autofocus the input field.",
              "fieldName": "autofocus"
            },
            {
              "name": "disabled",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "description": "A Boolean attribute which, if present, means this field cannot be edited by the user.",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "description": "Overrides the required value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "required"
            },
            {
              "name": "hint",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "hint"
            },
            {
              "name": "errortext",
              "description": "Text for errors",
              "fieldName": "errortext"
            },
            {
              "name": "valid",
              "description": "html input validity",
              "fieldName": "valid"
            },
            {
              "name": "condensed",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "fieldName": "condensed"
            },
            {
              "name": "filled",
              "description": "Set this attribute to switch to filled layout. Filled is without the borders around the field.",
              "fieldName": "filled"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "Binds a entityObject field google.type.Money to a furo-number-input and currency dropdown fields",
          "tagName": "furo-data-money-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-money-input",
          "declaration": {
            "name": "FuroDataMoneyInput",
            "module": "src/furo-data-money-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-number-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-number-input` is a extension of furo-number-input which enables you to\n bind a entityObject field.\n\nThe field can be of type int32, int64, google.protobuf.Int32Value, google.protobuf.Int64Value, furo.fat.Int32,\nfuro.fat.Int64\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of the furo.fat.Int32 or furo.fat.Int64 are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.Int32 or furo.fat.Int64 are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'step': the step of number input.\n- 'min': minimum value in the input field\n- 'max': maximum value in the input field\n\n### following constrains are mapped into the attributes of the furo.fat.Int32 or furo.fat.Int64:\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'step': is mapped to 'step' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-number-input></sample-furo-data-number-input>\n\n## Attributes & Properties\nPlease refer to furo-number-input",
          "name": "FuroDataNumberInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the number-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "_checkAndEmptyInput",
              "description": "check the empty state by furo.fat object. check the null value by wrapper object.\nempty the input field.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the number value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-number-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the number input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-number-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the value input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-number-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroNumberInput",
            "package": "@furo/input/src/furo-number-input.js"
          },
          "summary": "Bind a numeric entityObject.field to a number input",
          "tagName": "furo-data-number-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataNumberInput",
          "declaration": {
            "name": "FuroDataNumberInput",
            "module": "src/furo-data-number-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-number-input",
          "declaration": {
            "name": "FuroDataNumberInput",
            "module": "src/furo-data-number-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-password-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-password-input` is a extension of furo-password-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`). It is also possible to bind numeric values, but the\nvalues will be handled as string.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n * ### following labels of the furo.fat.String are supported by binding:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.String are supported by binding:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': minimum number of characters available in the input field\n- 'max': maximum number of characters available in the input field\n\n### following constrains are mapped into the attributes of the furo.fat.String :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'pattern': is mapped to 'pattern' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-password-input></sample-furo-data-password-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-password-input](/furo-input?t=FuroPasswordInput)",
          "name": "FuroDataPasswordInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the password-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the password value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-password-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the password input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-password-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the password input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-password-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroPasswordInput",
            "package": "@furo/input/src/furo-password-input.js"
          },
          "summary": "Bind a entityObject.field to a password input",
          "tagName": "furo-data-password-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataPasswordInput",
          "declaration": {
            "name": "FuroDataPasswordInput",
            "module": "src/furo-data-password-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-password-input",
          "declaration": {
            "name": "FuroDataPasswordInput",
            "module": "src/furo-data-password-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-property-display.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-property-display`\n Field for type furo.Property. It works with repeated types an nonrepeating type. Supported\n\n ```html\n <!-- single Property -->\n <furo-data-property-display ƒ-bind-data=\"--entity(*.single_type_property)\"></furo-data-property-display>\n <!-- repeated Property -->\n <furo-data-property-display ƒ-bind-data=\"--entity(*.type_property)\"></furo-data-property-display>\n\nThis component uses the same data like `furo-data-property`\n\n\n\n```\n\n The current type mappings are:\n\n- \"google.type.Date\": \"furo-data-display\"\n- \"furo.StringProperty\": \"furo-data-display\"\n- \"furo.IntegerProperty\": \"furo-data-display\"\n- \"furo.NumberProperty\": \"furo-data-display\"\n- \"furo.StringOptionProperty\": \"furo-data-display\"",
          "name": "FuroDataPropertyDisplay",
          "members": [
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "propertyField"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createPropComponent",
              "parameters": [
                {
                  "name": "propertyField"
                }
              ]
            },
            {
              "kind": "field",
              "name": "typemap",
              "type": {
                "text": "object"
              },
              "default": "{\n      'google.type.Date': 'furo-data-display',\n      'furo.type.Date': 'furo-data-display',\n      'furo.StringProperty': 'furo-data-display',\n      'furo.IntegerProperty': 'furo-data-display',\n      'furo.NumberProperty': 'furo-data-display',\n      'furo.StringOptionProperty': 'furo-data-display',\n    }"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "helper for furo-data-property",
          "tagName": "furo-data-property-display",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-property-display",
          "declaration": {
            "name": "FuroDataPropertyDisplay",
            "module": "src/furo-data-property-display.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-property.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-property`\n Field for type furo.Property. It works with repeated types an nonrepeating type. Supported\n\n ```html\n <!-- single Property -->\n <furo-data-property ƒ-bind-data=\"--entity(*.single_type_property)\"></furo-data-property>\n <!-- repeated Property -->\n <furo-data-property ƒ-bind-data=\"--entity(*.type_property)\"></furo-data-property>\n\n ```\n\n ## Example data for the data-object looks like this\n\n ```json\n \"single_type_property\": {\n   \"data\": {\n     \"@type\": \"google.type.Date\",\n     \"day\": 8,\n     \"month\":  11,\n     \"year\": 2022\n   },\n   \"display_name\": \"a date\",\n   \"id\": \"date\",\n   \"code\": \"date\",\n   \"meta\": {\n     \"fields\": {\n       \"data\": {\n         \"meta\": {\n           \"label\": \"Additional fields\",\n           \"hint\": \"this is data\"\n         },\n         \"constraints\": {\n           \"min\": {\n             \"value\": \"2019-09-09\",\n             \"message\": \"to small\"\n           }\n         }\n       }\n     }\n   }\n }\n ```\n## Example StringOptions Field\n\n```json\n{\n  \"data\": {\n       \"@type\": \"furo.StringOptionProperty\",\n       \"id\": \"bb\",\n       \"display_name\": \"Display\"\n     },\n     \"display_name\": \"Display\",\n     \"id\": \"opt\",\n     \"code\": \"option\",\n     \"meta\": {\n       \"fields\": {\n         \"data\": {\n           \"meta\": {\n             \"label\": \"Please select\",\n             \"hint\": \"datehint is data\",\n             \"repeated\": false,\n             \"options\": [\n               {\n                 \"id\": \"aa\",\n                 \"display_name\": \"The display a\"\n               },\n               {\n                 \"id\": \"bb\",\n                 \"display_name\": \"The display b\"\n               }\n             ]\n           }\n         }\n       }\n     }\n   }\n\n```\n\n The current type mappings are:\n\n- \"google.type.Date\": \"furo-data-date-input\"\n- \"furo.StringProperty\": \"furo-data-text-input\"\n- \"furo.IntegerProperty\": \"furo-data-number-input\"\n- \"furo.NumberProperty\": \"furo-data-number-input\"\n- \"furo.StringOptionProperty\": \"furo-data-collection-dropdown\"",
          "name": "FuroDataProperty",
          "members": [
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "propertyField",
                  "description": "of type furo.Property",
                  "type": {
                    "text": "FieldNode"
                  }
                }
              ],
              "description": "Bind a Fieldnode to the component"
            },
            {
              "kind": "method",
              "name": "_createPropComponent",
              "parameters": [
                {
                  "name": "propertyField"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "typemap",
              "type": {
                "text": "object"
              },
              "default": "{\n      'google.type.Date': 'furo-data-date-input',\n      'furo.type.Date': 'furo-data-date-input',\n      'google.protobuf.StringValue': 'furo-data-text-input',\n      'google.protobuf.FloatValue': 'furo-data-number-input',\n      'google.protobuf.Int32Value': 'furo-data-number-input',\n      'google.protobuf.UInt32Value': 'furo-data-number-input',\n      'google.protobuf.BoolValue': 'furo-data-checkbox-input',\n      'furo.StringProperty': 'furo-data-text-input',\n      'furo.IntegerProperty': 'furo-data-number-input',\n      'furo.NumberProperty': 'furo-data-number-input',\n      'furo.StringOptionProperty': 'furo-data-collection-dropdown',\n      'furo.fat.String': 'furo-data-text-input',\n      'furo.fat.Int32': 'furo-data-number-input',\n      'furo.fat.Int64': 'furo-data-number-input',\n      'furo.fat.Bool': 'furo-data-checkbox-input',\n    }"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "display and bind types of type any",
          "tagName": "furo-data-property",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-property",
          "declaration": {
            "name": "FuroDataProperty",
            "module": "src/furo-data-property.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-radio-buton-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-radio-button-input` is a extension of furo-checkbox-input which enables you to\n bind a entityObject field.\n\nThe field can be of type bool, google.protobuf.BoolValue, furo.fat.Bool. It is also possible to bind string values, but the\nvalues will be handled as boolean true when the string is not empty.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n * ### following labels of the furo.fat.Bool are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.Bool are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n### following constrains are mapped into the attributes of the furo.fat.Bool :\n\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-radio-button-input></sample-furo-data-radio-button-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-radio-button-input](/furo-input?t=FuroRadioButtonInput)",
          "name": "FuroDataRadioButtonInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the furo-data-radio-button-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Boolean}"
              },
              "description": " Fired when value has changed from inside the input field. This event Comes from underlying component furo-radio-button-input (**bubbles**).",
              "name": "value-changed"
            }
          ],
          "superclass": {
            "name": "FuroRadioButtonInput",
            "package": "@furo/input/src/furo-radio-button-input.js"
          },
          "summary": "Bind a entityObject.field to a range input",
          "tagName": "furo-data-radio-button-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataRadioButtonInput",
          "declaration": {
            "name": "FuroDataRadioButtonInput",
            "module": "src/furo-data-radio-buton-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-radio-button-input",
          "declaration": {
            "name": "FuroDataRadioButtonInput",
            "module": "src/furo-data-radio-buton-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-range-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-range-input` is a extension of furo-range-input which enables you to\n bind a entityObject field.\n\nThe field can be of type number, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`). It is also possible to bind numeric values, but the\nvalues will be handled as string.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n * ### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'min': The minimum permitted value\n- 'max': The maximum permitted value\n- 'step': The stepping interval, used both for user interface and validation purposes\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'step': is mapped to 'step' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-range-input></sample-furo-data-range-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-range-input](/furo-input?t=FuroRangeInput)",
          "name": "FuroDataRangeInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the range-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the range input value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-range-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the range input"
              },
              "description": " Fired when the trailing icon was clicked.  Comes from underlying component furo-range-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the range input"
              },
              "description": " Fired when the leading icon was clicked.  Comes from underlying component furo-range-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroRangeInput",
            "package": "@furo/input/src/furo-range-input.js"
          },
          "summary": "Bind a entityObject.field to a range input",
          "tagName": "furo-data-range-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataRangeInput",
          "declaration": {
            "name": "FuroDataRangeInput",
            "module": "src/furo-data-range-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-range-input",
          "declaration": {
            "name": "FuroDataRangeInput",
            "module": "src/furo-data-range-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-reference-search.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-reference-search`\n search a reference\n bound data should be furo.reference\n\n```\n<!--  furo-data-object will eine Referenz auflösen -->\n<furo-data-object type=\"task.Task\" @-object-ready=\"--entityReady\"></furo-data-object>\n\n<furo-horizontal-flex>\n   <!--  furo-data-reference-search kann eine Referenz die entity-objekt besitzt darstellen.\n   Bei einer Texteingabe wird ^^search mit dem eingegebenen Text gesucht. Diesr geht via wire --term an den furo-collection-agent.\n   Wenn furo-collection-agent eine Kollektion zurückliefert, klappt die Auswahl auf. -->\n   <furo-data-reference-search autofocus  flex ƒ-bind-data=\"--entityReady(*.fields.ref)\" @-search=\"--term\" ƒ-collection-in=\"--refCol\"></furo-data-reference-search>\n\n   <furo-data-reference-search  flex ƒ-bind-data=\"--entityReady(*.fields.ref)\" min-term-length=\"2\" @-search=\"--term\" ƒ-collection-in=\"--refCol\"></furo-data-reference-search>\n\n</furo-horizontal-flex>\n\n<!-- Der furo-collection-agent erhält die hts von ref.value, wenn ein term eingegeben wurde beginnt dieser zu suchen.\nDie Resultate werden an furo-data-reference-search zurück gegeben. -->\n<furo-collection-agent service=\"tasks\" ƒ-search=\"--term\" ƒ-hts-in=\"--entityReady(*.fields.ref._value)\" @-response=\"--refCol\"></furo-collection-agent>\n\n```\n\n * ### following labels of fat types are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of fat types are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'min_term_length': the minimum number of characters that use should to input to trigger the search\n- 'no_result_hint': hint text when result not found by search\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n\n\n### following constrains are mapped into the attributes of the fat types :\n\n- 'required': is mapped to 'required' attribute",
          "name": "FuroDataReferenceSearch",
          "cssProperties": [
            {
              "type": {
                "text": "#ffffff"
              },
              "description": "Background color of result list",
              "name": "--furo-data-reference-search-list-background",
              "default": "--surface"
            },
            {
              "type": {
                "text": "#ddb13d"
              },
              "description": "Color of hint when no result found",
              "name": "--reference-search-no-result-hint",
              "default": "--accent"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_registerListeners"
            },
            {
              "kind": "method",
              "name": "_init"
            },
            {
              "kind": "method",
              "name": "_fireSearchEvent"
            },
            {
              "kind": "method",
              "name": "_showList"
            },
            {
              "kind": "method",
              "name": "_closeList"
            },
            {
              "kind": "method",
              "name": "_clear"
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the search-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "method",
              "name": "_updateField"
            },
            {
              "kind": "method",
              "name": "collectionIn",
              "parameters": [
                {
                  "name": "collection"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clearNoResultHint",
              "description": "clear no result hint. reset hint to original value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "minTermLength",
              "type": {
                "text": "number"
              },
              "default": "0",
              "privacy": "public",
              "description": "Overrides the min value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "min-term-length",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueField",
              "type": {
                "text": "string"
              },
              "default": "'id'",
              "privacy": "public",
              "description": "the field name of reference-item which should be used to asign to value (likes id) field of the the data entity object",
              "attribute": "value-field",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayField",
              "type": {
                "text": "string"
              },
              "default": "'display_name'",
              "privacy": "public",
              "description": "the field name of reference-item which should be used as display which will be showed in the dropdown.",
              "attribute": "display-field"
            },
            {
              "kind": "field",
              "name": "noResultHint",
              "type": {
                "text": "string"
              },
              "default": "'no result found'",
              "privacy": "public",
              "description": "hint text when result not found by search",
              "attribute": "no-result-hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_collection",
              "type": {
                "text": "array"
              },
              "description": "the loaded collection",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_hint",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "subfield",
              "privacy": "public",
              "description": "if you bind a complex type, declare here the field which gets updated of value by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "attribute": "subfield",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_displayName",
              "privacy": "public",
              "description": "this property saves the value of the displayField of selected item from collection",
              "attribute": "_displayName"
            },
            {
              "kind": "field",
              "name": "_hasCollection",
              "privacy": "public",
              "description": "mark if the collection is already loaded",
              "attribute": "_hasCollection"
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "Overrides the required value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hint",
              "privacy": "public",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxItemsToDisplay",
              "privacy": "public",
              "description": "The maximal no of items to display. If the collection contains more data then then this value,\nthe **max-results-hint** will be displayed at the bottom of the list.",
              "attribute": "max-items-to-display",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxResultsHint",
              "privacy": "public",
              "description": "hint text to display when the result set is bigger then  **maxItemsToDisplay**.",
              "attribute": "max-results-hint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchOnEnterOnly",
              "privacy": "public",
              "description": "Enable this, to avoid the automatic triggering of \"search\".\n\nThe user have to press enter to trigger the search. Min-term-length is respected.",
              "attribute": "search-on-enter-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Overrides the readonly value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "A Boolean attribute which, if present, means this.binder.fieldNodecannot be edited by the user.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "privacy": "public",
              "description": "Set this attribute to autofocus the input field.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "valid",
              "privacy": "public",
              "description": "html input validity",
              "attribute": "valid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "condensed",
              "privacy": "public",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "attribute": "condensed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "float",
              "privacy": "public",
              "description": "passes always float the label",
              "attribute": "float",
              "reflects": true
            }
          ],
          "events": [
            {
              "type": {
                "text": "{Object} item"
              },
              "description": " Fired from inner element when item is selected",
              "name": "item-selected"
            },
            {
              "type": {
                "text": "{String} term"
              },
              "description": " Fired when term is entered and bigger then min-term-length",
              "name": "search"
            },
            {
              "type": {
                "text": "void"
              },
              "description": " Fired when input value is cleared",
              "name": "value-cleared"
            }
          ],
          "attributes": [
            {
              "name": "value-field",
              "description": "the field name of reference-item which should be used to asign to value (likes id) field of the the data entity object",
              "fieldName": "valueField"
            },
            {
              "name": "display-field",
              "description": "the field name of reference-item which should be used as display which will be showed in the dropdown.",
              "fieldName": "displayField"
            },
            {
              "name": "subfield",
              "description": "if you bind a complex type, declare here the field which gets updated of value by selecting an item.\n\nIf you bind a scalar, you dont need this attribute.",
              "fieldName": "subfield"
            },
            {
              "name": "_displayName",
              "description": "this property saves the value of the displayField of selected item from collection",
              "fieldName": "_displayName"
            },
            {
              "name": "_hasCollection",
              "description": "mark if the collection is already loaded",
              "fieldName": "_hasCollection"
            },
            {
              "name": "label",
              "description": "Overrides the label text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "label"
            },
            {
              "name": "no-result-hint",
              "description": "hint text when result not found by search",
              "fieldName": "noResultHint"
            },
            {
              "name": "required",
              "description": "Overrides the required value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "required"
            },
            {
              "name": "hint",
              "description": "Overrides the hint text from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "hint"
            },
            {
              "name": "min-term-length",
              "description": "Overrides the min value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "minTermLength"
            },
            {
              "name": "max-items-to-display",
              "description": "The maximal no of items to display. If the collection contains more data then then this value,\nthe **max-results-hint** will be displayed at the bottom of the list.",
              "fieldName": "maxItemsToDisplay"
            },
            {
              "name": "max-results-hint",
              "description": "hint text to display when the result set is bigger then  **maxItemsToDisplay**.",
              "fieldName": "maxResultsHint"
            },
            {
              "name": "search-on-enter-only",
              "description": "Enable this, to avoid the automatic triggering of \"search\".\n\nThe user have to press enter to trigger the search. Min-term-length is respected.",
              "fieldName": "searchOnEnterOnly"
            },
            {
              "name": "readonly",
              "description": "Overrides the readonly value from the **specs**.\n\nUse with caution, normally the specs defines this value.",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "description": "A Boolean attribute which, if present, means this.binder.fieldNodecannot be edited by the user.",
              "fieldName": "disabled"
            },
            {
              "name": "autofocus",
              "description": "Set this attribute to autofocus the input field.",
              "fieldName": "autofocus"
            },
            {
              "name": "valid",
              "description": "html input validity",
              "fieldName": "valid"
            },
            {
              "name": "condensed",
              "description": "The default style (md like) supports a condensed form. It is a little bit smaller then the default",
              "fieldName": "condensed"
            },
            {
              "name": "float",
              "description": "passes always float the label",
              "fieldName": "float"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "autocomplete searcher for referenced types",
          "tagName": "furo-data-reference-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-reference-search",
          "declaration": {
            "name": "FuroDataReferenceSearch",
            "module": "src/furo-data-reference-search.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-repeat.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-repeat`\n Display for repeated fields.\n\n ```html\n <furo-data-repeat ƒ-bind-data=\"--data(*.repeaterfield)\"\n     repeated-component=\"furo-date-input\"\n     condensed\n     delete-icon=\"remove\"\n     add-icon=\"star\"\n     add-text=\"add another date\"\n     ƒ-add=\"--additionalDateClicked\"\n     ></furo-data-repeat>\n\n     <!-- Add is controlled from outside, delete from inside of the item -->\n     <furo-data-repeat ƒ-bind-data=\"--data(*.repeatedcomplextype)\"\n     repeated-component=\"my big form\"\n     ƒ-add=\"--additionalDateClicked\"\n     ></furo-data-repeat>\n\n ```\n\n Every Attribute (boolean or string) which is set on furo-data-repeat which is not part of its own api, will be set on the child element.\n If you set condensed as an example, it will be set on the repeated element. It is not possible to set wires to the children.",
          "name": "FuroDataRepeat",
          "cssProperties": [
            {
              "type": {
                "text": "N/A"
              },
              "description": "spacing right for the delete icon",
              "name": "--spacing",
              "default": "N/A"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "onFnaRepeatedFieldChanged"
            },
            {
              "kind": "method",
              "name": "onFnaReadonlyChanged",
              "parameters": [
                {
                  "name": "readonly"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createAttribute",
              "parameters": [
                {
                  "name": "options",
                  "description": ":\"name\",\"type\":\"string\", \"spec\":{..}}  spec is optional",
                  "type": {
                    "text": "\"fieldName\""
                  }
                }
              ],
              "description": "Create a attribute for map<string,type> types\ncreate a field in a FieldNode, this is useful when using map<string,something>\nset the value option to init with values"
            },
            {
              "kind": "method",
              "name": "createAttributeByString",
              "parameters": [
                {
                  "name": "fieldname"
                }
              ]
            },
            {
              "kind": "field",
              "name": "repeatedComponent",
              "privacy": "public",
              "description": "repeated-component to be used for the items.\nThe component must support ƒ-bind-data",
              "attribute": "repeated-component"
            },
            {
              "kind": "method",
              "name": "_checkSize",
              "description": "hide the element if array is empty",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "add",
              "parameters": [
                {
                  "name": "data"
                }
              ],
              "description": "Adds a repeated item"
            },
            {
              "kind": "method",
              "name": "addType",
              "parameters": [
                {
                  "name": "type"
                }
              ],
              "description": "Adds a repeated item with type"
            },
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "deleteIcon",
              "description": "Set the delete icon to enable deleting of a repeated element.",
              "type": {
                "text": "undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "identityPath",
              "privacy": "public",
              "attribute": "identity-path"
            },
            {
              "kind": "field",
              "name": "focusOnCreate",
              "privacy": "public",
              "description": "set this attribute to set the focus to the created item after calling add().",
              "attribute": "focus-on-create"
            }
          ],
          "attributes": [
            {
              "name": "repeated-component",
              "description": "repeated-component to be used for the items.\nThe component must support ƒ-bind-data",
              "fieldName": "repeatedComponent"
            },
            {
              "name": "identity-path",
              "fieldName": "identityPath"
            },
            {
              "name": "focus-on-create",
              "description": "set this attribute to set the focus to the created item after calling add().",
              "fieldName": "focusOnCreate"
            }
          ],
          "mixins": [
            {
              "name": "FieldNodeAdapter",
              "package": "@furo/data/src/lib/FieldNodeAdapter.js"
            },
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "automatic display of repeated fields",
          "tagName": "furo-data-repeat",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "furo-data-repeat",
          "declaration": {
            "name": "FuroDataRepeat",
            "module": "src/furo-data-repeat.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-search-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-search-input` is a extension of furo-search-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`).\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of the furo.fat.String are supported by binding:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.String are supported by binding:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': minimum number of characters available in the input field\n- 'max': maximum number of characters available in the input field\n\n### following constrains are mapped into the attributes of the furo.fat.String :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'pattern': is mapped to 'pattern' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-search-input></sample-furo-data-search-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-search-input](/furo-input?t=FuroSearchInput)",
          "name": "FuroDataSearchInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the search-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the searc value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-search-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the search input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-search-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the value input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-search-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroSearchInput",
            "package": "@furo/input/src/furo-search-input.js"
          },
          "summary": "Bind a entityObject.field to a search input",
          "tagName": "furo-data-search-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataSearchInput",
          "declaration": {
            "name": "FuroDataSearchInput",
            "module": "src/furo-data-search-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-search-input",
          "declaration": {
            "name": "FuroDataSearchInput",
            "module": "src/furo-data-search-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-sign-pad.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-sign-pad`\nDescribe your element",
          "name": "FuroDataSignPad",
          "members": [
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "entityField"
                }
              ],
              "description": "bind a entity field"
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "encodeImage",
              "description": "update field._value  on new drawing"
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "FuroSignPad",
            "package": "@furo/input/src/furo-sign-pad"
          },
          "summary": "Bind a entityObject.field to a sign-pad input",
          "tagName": "furo-data-sign-pad",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataSignPad",
          "declaration": {
            "name": "FuroDataSignPad",
            "module": "src/furo-data-sign-pad.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-sign-pad",
          "declaration": {
            "name": "FuroDataSignPad",
            "module": "src/furo-data-sign-pad.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-text-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-text-input` is a extension of furo-text-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`). It is also possible to bind numeric values, but the\nvalues will be handled as string.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of the furo.fat.String are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.String are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'leading-icon': furo leading icon of the input\n- 'trailing-icon': furo trailing icon of the input\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': minimum number of characters available in the input field\n- 'max': maximum number of characters available in the input field\n\n### following constrains are mapped into the attributes of the furo.fat.String :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'pattern': is mapped to 'pattern' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-text-input></sample-furo-data-text-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-text-input](/furo-input?t=FuroTextInput)",
          "name": "FuroDataTextInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the text-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the text value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-text-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the text input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-text-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the text input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-text-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroTextInput",
            "package": "@furo/input/src/furo-text-input.js"
          },
          "summary": "Bind a entityObject.field to a text input",
          "tagName": "furo-data-text-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataTextInput",
          "declaration": {
            "name": "FuroDataTextInput",
            "module": "src/furo-data-text-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-text-input",
          "declaration": {
            "name": "FuroDataTextInput",
            "module": "src/furo-data-text-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-textarea-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-textarea-input` is a extension of furo-textarea-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.protobuf.StringValue, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`). It is also possible to bind numeric values, but the\nvalues will be handled as string.\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n### following labels of the furo.fat.String are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.String are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': minimum number of characters available in the input field\n- 'max': maximum number of characters available in the input field\n- 'rows': number of rows in the input field\n- 'cols': number of cols in the input field\n\n### following constrains are mapped into the attributes of the furo.fat.String :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-textarea-input></sample-furo-data-textarea-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-textarea-input](/furo-input?t=FuroTextareaInput)",
          "name": "FuroDataTextareaInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the textarea-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the textarea value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-textarea-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the textarea input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-textarea-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the textarea input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-textarea-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroTextareaInput",
            "package": "@furo/input/src/furo-textarea-input.js"
          },
          "summary": "Bind a entityObject.field to a textarea input",
          "tagName": "furo-data-textarea-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataTextareaInput",
          "declaration": {
            "name": "FuroDataTextareaInput",
            "module": "src/furo-data-textarea-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-textarea-input",
          "declaration": {
            "name": "FuroDataTextareaInput",
            "module": "src/furo-data-textarea-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/furo-data-time-input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`furo-data-time-input` is a extension of furo-text-input which enables you to\n bind a entityObject field.\n\nThe field can be of type string, google.type.TimeOfDay, furo.fat.String or any type with the signature\nof the google.protobuf.StringValue (string must be in field `value`).\n\nSetting the attributes on the component itself, will override the metas from spec, fat labels, fat attributes.\n\n\n### following labels of the furo.fat.String are supported:\n\n- 'error': state of input is error\n- 'readonly': input is disabled\n- 'required': input is required\n- 'disabled': input is disabled\n- 'condensed': input has condensed display\n- 'hidden': input is hidden\n\n### following attributes of the furo.fat.String are supported:\n\n- 'label': input label\n- 'hint': input hint\n- 'errortext': the error text of the input\n- 'error-msg': the same as errortext\n- 'pattern': the input regex pattern.\n- 'min': The earliest date and time to accept. format according to ISO 8601. e.g. '2000-01-01T08:32Z'\n- 'max': The latest date and time to accept. format according to ISO 8601. e.g. '2000-01-01T08:32Z'\n- 'step': The stepping interval to use for this input, such as when clicking arrows on spinner controls or performing validation\n\n### following constrains are mapped into the attributes of the furo.fat.String :\n\n- 'max': is mapped to 'max' attribute\n- 'min': is mapped to 'min' attribute\n- 'step': is mapped to 'step' attribute\n- 'required': is mapped to 'required' attribute\n\n<sample-furo-data-time-input></sample-furo-data-time-input>\n\n## Attributes & Properties\nsee the Attributes & Properties of [furo-time-input](/furo-input?t=FuroTimeInput)",
          "name": "FuroDataTimeInput",
          "members": [
            {
              "kind": "method",
              "name": "_initBinder",
              "description": "inits the universalFieldNodeBinder.\nSet the mapped attributes and labels.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_convertStringToTimeOfDayObj",
              "parameters": [
                {
                  "name": "str"
                },
                {
                  "name": "obj"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "description": "Sets the value for the field. This will update the fieldNode."
            },
            {
              "kind": "method",
              "name": "bindData",
              "parameters": [
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the time-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{String} the text value"
              },
              "description": " Fired when value has changed from inside the input field. Comes from underlying component furo-time-input. **bubbles**",
              "name": "value-changed"
            },
            {
              "type": {
                "text": "the value of the time input"
              },
              "description": " Fired when the trailing icon was clicked. Comes from underlying component furo-time-input. **bubbles**",
              "name": "trailing-icon-clicked"
            },
            {
              "type": {
                "text": "the value of the time input"
              },
              "description": " Fired when the leading icon was clicked. Comes from underlying component furo-time-input. **bubbles**",
              "name": "leading-icon-clicked"
            }
          ],
          "superclass": {
            "name": "FuroTimeInput",
            "package": "@furo/input/src/furo-time-input.js"
          },
          "summary": "Bind a entityObject.field to a time input",
          "tagName": "furo-data-time-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FuroDataTimeInput",
          "declaration": {
            "name": "FuroDataTimeInput",
            "module": "src/furo-data-time-input.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "furo-data-time-input",
          "declaration": {
            "name": "FuroDataTimeInput",
            "module": "src/furo-data-time-input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/reference-search-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`reference-search-item`\nRepeated item to display the search result set",
          "name": "ReferenceSearchItem",
          "cssProperties": [
            {
              "type": {
                "text": "200ms"
              },
              "description": "Duration of the styling transitions",
              "name": "--transition-duration",
              "default": "200ms"
            },
            {
              "type": {
                "text": "8px"
              },
              "description": "Padding of the item",
              "name": "--spacing-xs",
              "default": "8px"
            },
            {
              "type": {
                "text": "rgba(var(--primary-rgb), var(--state-hover)"
              },
              "description": "background color hover state",
              "name": "--primary-rgb",
              "default": "rgba(var(--primary-rgb), var(--state-hover)"
            },
            {
              "type": {
                "text": "rgba(var(--primary-rgb), var(--state-hover)"
              },
              "description": "background color selected hover state",
              "name": "--primary-rgb",
              "default": "rgba(var(--primary-rgb), var(--state-hover)"
            },
            {
              "type": {
                "text": "N/A"
              },
              "description": "foreground color",
              "name": "--primary",
              "default": "N/A"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "injectItem",
              "parameters": [
                {
                  "name": "item"
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect"
            },
            {
              "kind": "method",
              "name": "preselect"
            },
            {
              "kind": "method",
              "name": "select"
            },
            {
              "kind": "field",
              "name": "_item",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "events": [
            {
              "type": {
                "text": "item"
              },
              "description": " Fired when item is selected.",
              "name": "item-selected"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "summary": "representation of a result item",
          "tagName": "reference-search-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ReferenceSearchItem",
          "declaration": {
            "name": "ReferenceSearchItem",
            "module": "src/reference-search-item.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "reference-search-item",
          "declaration": {
            "name": "ReferenceSearchItem",
            "module": "src/reference-search-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/CheckMetaAndOverrides.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CheckMetaAndOverrides",
          "members": [
            {
              "kind": "method",
              "name": "UpdateMetaAndConstraints",
              "static": true,
              "parameters": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "kind": "method",
              "name": "CheckAttributeOverrides",
              "static": true,
              "parameters": [
                {
                  "name": "element"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckMetaAndOverrides",
          "declaration": {
            "name": "CheckMetaAndOverrides",
            "module": "src/lib/CheckMetaAndOverrides.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/CollectionDropdownHelper.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Helper class for furo-data-collection-dropdown and furo-ui5-data-collection-dropdown",
          "name": "CollectionDropdownHelper",
          "members": [
            {
              "kind": "method",
              "name": "UpdateInputAttribute",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "attribute"
                },
                {
                  "name": "value"
                }
              ],
              "description": "update Attribute on input element actively, so we dont have things like pattern=\"undefined\" on the native element.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "triggerSetOptionItem",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueByPath",
              "static": true,
              "parameters": [
                {
                  "name": "obj"
                },
                {
                  "name": "path"
                }
              ],
              "description": "Let you get an attribute value by path",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "notifiySelectedItem",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "obj"
                }
              ]
            },
            {
              "kind": "method",
              "name": "findDisplayNameByValue",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "val"
                }
              ]
            },
            {
              "kind": "method",
              "name": "listHasDataObjectValue",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                }
              ]
            },
            {
              "kind": "method",
              "name": "initDropdownItemWithoutCollectionInjection",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateField",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                }
              ]
            },
            {
              "kind": "method",
              "name": "mapDataToList",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "list"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setItemSelectedViaSelectedMark",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "list"
                }
              ]
            },
            {
              "kind": "method",
              "name": "injectList",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "list"
                }
              ]
            },
            {
              "kind": "method",
              "name": "mapInputToInnerStruct",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "collection"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setOptionItems",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                }
              ],
              "description": "set option items",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bindData",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                }
              ],
              "description": "Bind a entity field to the range-input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CollectionDropdownHelper",
          "declaration": {
            "name": "CollectionDropdownHelper",
            "module": "src/lib/CollectionDropdownHelper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/data-repeat-delete.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`data-repeat-delete`\nDeletes a repeated item. Built for furo-data-repeat",
          "name": "DataRepeatDelete",
          "members": [
            {
              "kind": "method",
              "name": "_FBPReady",
              "description": "flow is ready lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bindItem",
              "parameters": [
                {
                  "name": "repeatedNode"
                }
              ]
            },
            {
              "kind": "field",
              "name": "icon",
              "privacy": "public",
              "description": "Description",
              "attribute": "icon"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "description": "Description",
              "fieldName": "icon"
            }
          ],
          "mixins": [
            {
              "name": "FBP",
              "package": "@furo/fbp"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit-element"
          },
          "tagName": "data-repeat-delete",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "data-repeat-delete",
          "declaration": {
            "name": "DataRepeatDelete",
            "module": "src/lib/data-repeat-delete.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/helper.js",
      "declarations": [
        {
          "kind": "class",
          "description": "update Attribute on input element actively, so we dont have things like pattern=\"undefined\" on the native element.",
          "name": "Helper",
          "members": [
            {
              "kind": "method",
              "name": "UpdateInputAttribute",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "attribute"
                },
                {
                  "name": "value"
                }
              ],
              "description": "update Attribute on input element actively, so we dont have things like pattern=\"undefined\" on the native element.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "BindData",
              "static": true,
              "parameters": [
                {
                  "name": "caller"
                },
                {
                  "name": "fieldNode",
                  "description": "a Field object",
                  "type": {
                    "text": "Object|FieldNode"
                  }
                },
                {
                  "description": "input element",
                  "name": "furo",
                  "type": {
                    "text": "Object|caller"
                  }
                }
              ],
              "description": "Bind a entity field to the input. You can use the entity even when no data was received.\nWhen you use `@-object-ready` from a `furo-data-object` which emits a EntityNode, just bind the field with `--entity(*.fields.fieldname)`"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Helper",
          "declaration": {
            "name": "Helper",
            "module": "src/lib/helper.js"
          }
        }
      ]
    }
  ]
}
